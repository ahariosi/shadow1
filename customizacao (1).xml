<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2018.1.4 (Build 505_1U)" ts="2024-06-07 08:31:26">


<Class name="customizacao.integracao.tasy.xml.DadosRetorno">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66638,42023.857288</TimeChanged>
<TimeCreated>66638,41854.031467</TimeCreated>

<Parameter name="XMLNAME">
<Default>ColetaRetorno</Default>
</Parameter>

<Property name="Retorno">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="XMLNAME" value="Retorno"/>
</Property>

<Property name="DescricaoErro">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="descricaoErro"/>
</Property>
</Class>


<Class name="customizacao.tasy.dao.status.Status">
<TimeChanged>66855,69342.800719</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Method name="BuscaStatusOs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOs:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.status.DadosRetorno</ReturnType>
<Implementation><![CDATA[

    Set objDadosRetorno = ##class(customizacao.tasy.xml.status.DadosRetorno).%New()
    Do objDadosRetorno.OrdemServicoNewObject()
    Try 
    {
	    Set parms($I(parms)) = pOs
	    Set sql = "SELECT "_
						"Os,Os->CodigoOs,Procedimento,Procedimento->Mnemonico, Status, Status->Descricao, Id "_
					 "FROM "_
					 	" dado.TblOsProcedimento "_
					 "Where "_
					 	"Os->CodigoOs = ? "
					 	
	 	Set rs = ##class(s00.util.Padrao).ExecuteStatement(,1,,sql,parms...)
	 	
	 	Set objDadosRetorno.OrdemServico.CodigoOs = pOs
		While rs.%Next()
		{
			Set objDadosRetorno.OrdemServico.OsId = rs.Os
			Set objExame = ##class(customizacao.tasy.xml.status.Exame).%New()
			Set objExame.Codigo = rs.Procedimento
			Set objExame.Mnemonico = rs.Mnemonico
			Set objExame.Status = rs.Status
			Set objExame.DescStatus = rs.Descricao
			Set objExame.OsProcedimentoId = rs.Id
			
			Do objDadosRetorno.OrdemServico.Exames.Insert(objExame)	
		}				 	
            
    }
    Catch(objExcecao) 
    {        
    	Set status = objExcecao.AsStatus()        
        Set objDadosRetorno.Retorno = 0
        Set objDadosRetorno.DescricaoErro = $System.Status.GetErrorText(status)
    }
    Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="AlteraStatusOs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOsId:%String="",pProcedimento:%String="",pOsProcedimentoId:%String="",pStatusAlterar:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.status.DadosRetorno</ReturnType>
<Implementation><![CDATA[

    Set objDadosRetorno = ##class(customizacao.tasy.xml.status.DadosRetorno).%New()
    Do objDadosRetorno.OrdemServicoNewObject()
    Try 
    {
	    If ((pOsProcedimentoId '= $C(0)) && (pOsProcedimentoId '= ""))
	    {
			Set osProcedimento = ##class(dado.TblOsProcedimento).%OpenId(pOsProcedimentoId)
	    }
	    Else
	    {
		    Set osProcedimento = ##class(dado.TblOsProcedimento).idxOsProcedimentoOpen(pOsId,pProcedimento)
	    }
	    If '$ISOBJECT(osProcedimento)
	    {
		    Set status = $System.Status.Error(5001,"Procedimento "_pProcedimento_" não localizado na OS "_pOsId_".")
            Throw ##class(%Exception.StatusException).CreateFromStatus(status)
	    }
	    
	    If pStatusAlterar = ""
	    {
		    Set status = $System.Status.Error(5001,"Status para alterar não informado.")
        	Throw ##class(%Exception.StatusException).CreateFromStatus(status)
	    }
	    Set status = osProcedimento.StatusSetObjectId(pStatusAlterar)
	    If $System.Status.IsError(status) Throw ##class(%Exception.StatusException).CreateFromStatus(status)
	    
	    Set osProcedimento.DataPromessa = ""
	    Set osProcedimento.DataPromessaExterna = ""
	    
	    Set status = osProcedimento.%Save()
	    If $System.Status.IsError(status) Throw ##class(%Exception.StatusException).CreateFromStatus(status)
	    
	    Set objDadosRetorno = ##class(customizacao.tasy.xml.status.DadosRetorno).%New()
	    Do objDadosRetorno.OrdemServicoNewObject()
	    
	    Set objDadosRetorno.OrdemServico.CodigoOs = osProcedimento.Os.CodigoOs
	    
	    Set objExame = ##class(customizacao.tasy.xml.status.Exame).%New()
		Set objExame.Codigo = osProcedimento.Procedimento.%Id()
		Set objExame.Mnemonico = osProcedimento.Procedimento.Mnemonico
		Set objExame.Status = osProcedimento.Status.%Id()
		Set objExame.DescStatus = osProcedimento.Status.Descricao
		
		
		

	    Do objDadosRetorno.OrdemServico.Exames.Insert(objExame)	
    }
    Catch(objExcecao) 
    {        
    	Set status = objExcecao.AsStatus()        
        Set objDadosRetorno.Retorno = 0
        Set objDadosRetorno.DescricaoErro = $System.Status.GetErrorText(status)
    }
    Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="RetornarDescricaoStatus">
<ClassMethod>1</ClassMethod>
<ReturnType>customizacao.tasy.xml.status.ListaStatus</ReturnType>
<Implementation><![CDATA[
    Set objDadosRetorno = ##class(customizacao.tasy.xml.status.ListaStatus).%New()

    Try 
    {
	    Set sql = "SELECT "_
						"Id , Descricao "_
					 "FROM "_
					 	" dado.TblStatusExame "
					 	
	 	Set rs = ##class(s00.util.Padrao).ExecuteStatement(,0,,sql)

		While rs.%Next()
		{
			Set objStatus = ##class(customizacao.tasy.xml.status.Status).%New()
			Set objStatus.Id = rs.Id
			Set objStatus.Descricao = rs.Descricao

			Do objDadosRetorno.Status.SetAt(objStatus,rs.Id)
		}				 	
            
    }
    Catch(objExcecao) 
    {        
    	Set status = objExcecao.AsStatus()        
        Set objDadosRetorno.Retorno = 0
        Set objDadosRetorno.DescricaoErro = $System.Status.GetErrorText(status)
    }
    Return objDadosRetorno
]]></Implementation>
</Method>
</Class>




<Class name="customizacao.tasy.servicoweb.WSLisCustomizacao">
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>
<TimeChanged>66920,42467.407865</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>WSLisCustomizacao</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.shift.com.br</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domínio usado para localização.</Description>
<Default>SCSDOMAIN</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Method name="BuscaDadosColeta">
<Description><![CDATA[
 - DataInicio: data inicial da busca<br />
 - HoraInicio: hora inicial da busca<br />
 - DataFim: data final da busca<br />
 - HoraFim: hora final da busca<br />
 - LogId: codigo do Log Operação<br />
 - Integracao: nome da integração <br />
NOTA 1: Todos os parâmetros de busca são obrigatórios.<br />
NOTA 2: As datas e horas devem ser informadas no formado ODBC.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try {       
        Return ..PreencherDadosColeta(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao)
    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return ""
]]></Implementation>
</Method>

<Method name="BuscaDadosRepeticao">
<Description><![CDATA[
 - DataInicio: data inicial da busca<br />
 - HoraInicio: hora inicial da busca<br />
 - DataFim: data final da busca<br />
 - HoraFim: hora final da busca<br />
 - LogId: codigo do Log Operação<br />
 - Integracao: nome da integração <br />
NOTA 1: Todos os parâmetros de busca são obrigatórios.<br />
NOTA 2: As datas e horas devem ser informadas no formado ODBC.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try {       
        Return ..PreencherDadosRepeticao(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao)
    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return ""
]]></Implementation>
</Method>

<Method name="BuscaDadosLibRepeticao">
<Description><![CDATA[
 - DataInicio: data inicial da busca<br />
 - HoraInicio: hora inicial da busca<br />
 - DataFim: data final da busca<br />
 - HoraFim: hora final da busca<br />
 - LogId: codigo do Log Operação<br />
 - Integracao: nome da integração <br />
NOTA 1: Todos os parâmetros de busca são obrigatórios.<br />
NOTA 2: As datas e horas devem ser informadas no formado ODBC.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try {       
        Return ..PreencherDadosLibRepeticao(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao)
    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return ""
]]></Implementation>
</Method>

<Method name="BuscaDadosCancelamento">
<Description><![CDATA[
 - DataInicio: data inicial da busca<br />
 - HoraInicio: hora inicial da busca<br />
 - DataFim: data final da busca<br />
 - HoraFim: hora final da busca<br />
 - LogId: codigo do Log Operação<br />
 - Integracao: nome da integração <br />
NOTA 1: Todos os parâmetros de busca são obrigatórios.<br />
NOTA 2: As datas e horas devem ser informadas no formado ODBC.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try {       
        Return ..PreencherDadosCancelamento(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao)
    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return ""
]]></Implementation>
</Method>

<Method name="RemoveResultadosFila">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIntegracao:%String,pDataAssinatura:%String,pOrdemServico:%String,pGeraLog:%Boolean=0,&pDescricaoErro:%String(MAXLEN="")]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
		Set retorno = 1
	Try{
		If (pOrdemServico '= ""){
			Set sentencaProc = "SELECT ID, Os, Procedimento FROM dado.TblOsProcedimento WHERE Os->CodigoOs = ? AND Os->Integracao = ? AND Exportado = ?"
			Set stmtProc = ##class(%SQL.Statement).%New()
			$$$THROWONERROR(scProc, stmtProc.%Prepare(sentencaProc))
			$$$THROWONERROR(rsProc, stmtProc.%Execute(pOrdemServico,pIntegracao,2))			
		}ElseIf (pDataAssinatura '= ""){
			Set sentencaProc = "SELECT ID, Os, Procedimento FROM dado.TblOsProcedimento WHERE AssinaturaData = ? AND Os->Integracao = ? AND Exportado = ?"
			Set stmtProc = ##class(%SQL.Statement).%New()
			$$$THROWONERROR(scProc, stmtProc.%Prepare(sentencaProc))
			$$$THROWONERROR(rsProc, stmtProc.%Execute($ZDATEH(pDataAssinatura,3),pIntegracao,2))
		}Else{
			Set erroEx = ##class(s00.util.Excecao).%New("Nenhum filtro informado.")
		    Throw erroEx
		}
				
		While (rsProc.%Next()){
			Set idTblOsProcedimento = rsProc.ID
			Set idOs = rsProc.Os
			Set codigoExame = rsProc.Procedimento
			
			Do ..RegistrarExportacaoResultado(idOs,codigoExame,pIntegracao,0,1,"",1,pGeraLog)
		}
		
	}Catch(ex){
		Set retorno = 0
		Set Status = ex.AsStatus()
		Set pDescricaoErro = $System.Status.GetOneErrorText(Status)
	}
	Quit retorno
]]></Implementation>
</Method>

<Method name="PreencherDadosCancelamento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pTipoEvento:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<Implementation><![CDATA[
    Set objDadosRetorno = ##class(customizacao.tasy.xml.DadosRetorno).%New()
    
    Try {
        Set codLog  = "002"
        Set codLog2 = "003"                
        // Busca os logs no período, ordenados pelo código da OS
        K parms      
        Set parms($I(parms)) = pDataInicial_" "_pHoraInicial
        Set parms($I(parms)) = pDataFinal_" "_pHoraFinal
        Set parms($I(parms)) = codLog
        Set parms($I(parms)) = codLog2
        
        Set sqlLog = "SELECT ID FROM dado.TblLogOperacao WHERE "_
                     "s00_util.DataHora_LogicalToTimeStamp(Data,Hora) BETWEEN ? AND ? "_
                     "AND (LogId = ? OR LogId = ?) ORDER BY Dado2,Dado1"

        Set rsLog = ##class(s00.util.Padrao).ExecuteStatement(,,,sqlLog,parms...)
        While rsLog.%Next(){
            
            Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(rsLog.ID)
            If '$ISOBJECT(tblLogOperacao) Continue                      
            
            If (tblLogOperacao.LogId.Id) = "002"{
                Set idOs = tblLogOperacao.Dado1
            }Else{
                Set codExame = tblLogOperacao.Dado1
                Set idOs = tblLogOperacao.Dado2
            }       
                                                        
            If (pIntegracao '= ""){
                Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
                If '$ISOBJECT(arqOrdemServico) Continue
                If (arqOrdemServico.Integracao '= pIntegracao) Continue             
            }
            
            If (tblLogOperacao.LogId.Id) = "002"{
                Set listaExamesCancelados = $LFS(tblLogOperacao.DadosEspecificos.GetAt(3),"/")
                For exame=1:1:$LISTLENGTH(listaExamesCancelados){
                    Set codExame = $LIST(listaExamesCancelados,exame)
                    Set Status = ..PreencherObjCancelamento(idOs,codExame,rsLog.ID,objDadosRetorno)
                    If $$$ISERR(Status) THROW
                }
            }Else{
                Set Status = ..PreencherObjCancelamento(idOs,codExame,rsLog.ID,objDadosRetorno)
                If $$$ISERR(Status) THROW
            }   
        }       
    }Catch(objExcecao) {                
        Set objDadosRetorno.Situacao = 0
        Set objDadosRetorno.DescricaoErro = pExcecao.Name _ " - " _ pExcecao.Data
    }
    Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosColeta">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pTipoEvento:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<Implementation><![CDATA[
    Set objDadosRetorno = ##class(customizacao.tasy.xml.DadosRetorno).%New()
    Try {
        Set codLog = "060"
                
        // Busca os logs no período, ordenados pelo código da OS
        K parms
        Set parms($I(parms)) = pDataInicial
        Set parms($I(parms)) = pHoraInicial
        Set parms($I(parms)) = pDataInicial
        
        Set parms($I(parms)) = pDataFinal
        Set parms($I(parms)) = pHoraFinal       
        Set parms($I(parms)) = pDataFinal       

        Set parms($I(parms)) = codLog
        
        Set osAnterior = ""
        
        Set sqlLog = "SELECT ID FROM dado.TblLogOperacao WHERE "_           
            "( ( (Data = ?) AND (Hora >= ?) ) OR (Data > ?) ) AND "_
            "( ( (Data = ?) AND (Hora <= ?) ) OR (Data < ?) ) AND "_
            " LogId = ? ORDER BY Dado2,Dado1,LogId "
        
        Set rsLog = ##class(s00.util.Padrao).ExecuteStatement(,1,,sqlLog,parms...)
        While rsLog.%Next(){
            
            Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(rsLog.ID)
            If '$ISOBJECT(tblLogOperacao) Continue                      
            
            Set idOs = tblLogOperacao.Dado2
            
            //Set idExame = tblLogOperacao.Dado1
            Set idOsRecipiente = tblLogOperacao.Dado1
                            
            If (pIntegracao '= ""){
                Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
                If '$ISOBJECT(arqOrdemServico) Continue
                If (arqOrdemServico.Integracao '= pIntegracao) Continue             
            }
            
            #DIM objOrdemServico As customizacao.tasy.xml.OrdemServico
            
            K parmsProc
            Set parmsProc($I(parmsProc)) = idOsRecipiente
            Set sqlProc = "SELECT OsProcedimento As idTblOsProcedimento FROM dado.TblOsRecipienteProcedimento WHERE RecipienteOs = ? "
            Set rsProc = ##class(s00.util.Padrao).ExecuteStatement(,1,,sqlProc,parmsProc...)
            While rsProc.%Next(){
                
                Set idExame = rsProc.idTblOsProcedimento
                
                Set Status = ..PreencherDados(idOs,idExame,rsLog.ID,objDadosRetorno)
                If $$$ISERR(Status) THROW                           
            }
        }       
    }Catch(objExcecao) {                
        Set objDadosRetorno.Situacao = 0
        Set objDadosRetorno.DescricaoErro = pExcecao.Name _ " - " _ pExcecao.Data
    }
    Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosRepeticao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pTipoEvento:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<Implementation><![CDATA[
    Set objDadosRetorno = ##class(customizacao.tasy.xml.DadosRetorno).%New()
    Try {
        Set codLog = "006"
                
        // Busca os logs no período, ordenados pelo código da OS
        K parms
        Set parms($I(parms)) = pDataInicial
        Set parms($I(parms)) = pHoraInicial
        Set parms($I(parms)) = pDataInicial
        
        Set parms($I(parms)) = pDataFinal
        Set parms($I(parms)) = pHoraFinal       
        Set parms($I(parms)) = pDataFinal       

        Set parms($I(parms)) = codLog
        
        Set osAnterior = ""
        
        Set sqlLog = "SELECT ID FROM dado.TblLogOperacao WHERE "_           
            "( ( (Data = ?) AND (Hora >= ?) ) OR (Data > ?) ) AND "_
            "( ( (Data = ?) AND (Hora <= ?) ) OR (Data < ?) ) AND "_
            " LogId = ? ORDER BY Dado2,Dado1,LogId "
        
        Set rsLog = ##class(s00.util.Padrao).ExecuteStatement(,1,,sqlLog,parms...)
        While rsLog.%Next(){
            
            Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(rsLog.ID)
            If '$ISOBJECT(tblLogOperacao) Continue                      
            
            Set idOs = tblLogOperacao.Dado2
            Set codExame = tblLogOperacao.Dado1
            
            Set tblOsProcedimento = ##class(dado.TblOsProcedimento).idxOsProcedimentoOpen(idOs,codExame)
            Set idExame = tblOsProcedimento.%Id()
                                        
            If (pIntegracao '= ""){
                Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
                If '$ISOBJECT(arqOrdemServico) Continue
                If (arqOrdemServico.Integracao '= pIntegracao) Continue             
            }
            
            Set Status = ..PreencherDados(idOs,idExame,rsLog.ID,objDadosRetorno)
            If $$$ISERR(Status) THROW
        }       
    }Catch(objExcecao) {                
        Set objDadosRetorno.Situacao = 0
        Set objDadosRetorno.DescricaoErro = pExcecao.Name _ " - " _ pExcecao.Data
    }
    Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosLibRepeticao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pTipoEvento:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<Implementation><![CDATA[
    Set objDadosRetorno = ##class(customizacao.tasy.xml.DadosRetorno).%New()
    Try {
        Set codLog = "007"
                
        // Busca os logs no período, ordenados pelo código da OS
        K parms
        Set parms($I(parms)) = pDataInicial
        Set parms($I(parms)) = pHoraInicial
        Set parms($I(parms)) = pDataInicial
        
        Set parms($I(parms)) = pDataFinal
        Set parms($I(parms)) = pHoraFinal       
        Set parms($I(parms)) = pDataFinal       

        Set parms($I(parms)) = codLog
        
        Set osAnterior = ""
        
        Set sqlLog = "SELECT ID FROM dado.TblLogOperacao WHERE "_           
            "( ( (Data = ?) AND (Hora >= ?) ) OR (Data > ?) ) AND "_
            "( ( (Data = ?) AND (Hora <= ?) ) OR (Data < ?) ) AND "_
            " LogId = ? ORDER BY Dado2,Dado1,LogId "
        
        Set rsLog = ##class(s00.util.Padrao).ExecuteStatement(,1,,sqlLog,parms...)
        While rsLog.%Next(){
            
            Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(rsLog.ID)
            If '$ISOBJECT(tblLogOperacao) Continue                      
            
            Set idOs = tblLogOperacao.Dado2
            Set codExame = tblLogOperacao.Dado1
            
            Set tblOsProcedimento = ##class(dado.TblOsProcedimento).idxOsProcedimentoOpen(idOs,codExame)
            Set idExame = tblOsProcedimento.%Id()
                                        
            If (pIntegracao '= ""){
                Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
                If '$ISOBJECT(arqOrdemServico) Continue
                If (arqOrdemServico.Integracao '= pIntegracao) Continue             
            }
            
            Set Status = ..PreencherDados(idOs,idExame,rsLog.ID,objDadosRetorno)
            If $$$ISERR(Status) THROW
        }       
    }Catch(objExcecao) {                
        Set objDadosRetorno.Situacao = 0
        Set objDadosRetorno.DescricaoErro = pExcecao.Name _ " - " _ pExcecao.Data
    }
    Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDados">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOs:%String,pIdExame:%String,pIdLogOperacao:%String,&objDadosRetorno:customizacao.tasy.xml.DadosRetorno]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    Set Status = $$$OK
    Try{

        Set idOs = pIdOs
        Set idExame = pIdExame
        Set idLogOperacao = pIdLogOperacao
            
        Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(idLogOperacao)
        If '$ISOBJECT(tblLogOperacao) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")                 
                
        Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
        If '$ISOBJECT(arqOrdemServico) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.ArqOrdemServico não encontrado para OS com ID "_idOs_".")
                
        Set tblOsProcedimento = ##class(dado.TblOsProcedimento).%OpenId(idExame)        
        If '$ISOBJECT(tblOsProcedimento) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")
        
        Set osIncluida = 0
        Set qtdeOsIncluidas = objDadosRetorno.OrdemServico.Count()
        
        For contOsInc=1:1:qtdeOsIncluidas{
            
            // OS já estava incluída na lista
            If (objDadosRetorno.OrdemServico.GetAt(contOsInc).CodigoOs = arqOrdemServico.CodigoOs){
                Set osIncluida = 1
                
                Set exameIncluido = 0
                Set qtdeEx = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Count()
                For contEx=1:1:qtdeEx{
                    
                    // Exame já estava incluído na OS
                    If (objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx) = idExame){
                        
                        Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = tblLogOperacao.Data
                        Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = tblLogOperacao.Hora
                        
                        Set exameIncluido = 1   
                    }
                }
                
                // Exame não estava incluído na OS
                If 'exameIncluido{
                    Set objExame = ##class(customizacao.tasy.xml.Exame).%New()
                    Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
                    Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
                    Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao           
                    Set objExame.Status = tblOsProcedimento.Status.%Id()            
                    Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
                    Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
                    If $ISOBJECT(tblLogOperacao.MotivoId){
                        Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
                    }
                    If $ISOBJECT(tblLogOperacao.UsuarioId){
                        If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
                            Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
                        }
                    }
                    Do objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Insert(objExame)
                }
            }
        }
        
        // OS não estava incluída na lista
        If 'osIncluida{
            Set objOrdemServico = ##class(customizacao.tasy.xml.OrdemServico).%New()
            Set objOrdemServico.CodigoOs = arqOrdemServico.CodigoOs
            Set objOrdemServico.PedidoCliente = arqOrdemServico.NroIdentificacaoOsLisOrigem
            
            Set objExame = ##class(customizacao.tasy.xml.Exame).%New()
            Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()          
            Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
            Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao           
            Set objExame.Status = tblOsProcedimento.Status.%Id()            
            Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
            Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
            If $ISOBJECT(tblLogOperacao.MotivoId){
                Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
            }
            If $ISOBJECT(tblLogOperacao.UsuarioId){
                If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
                    Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
                }
            }
            Do objOrdemServico.Exames.Insert(objExame)
            
            Do objDadosRetorno.OrdemServico.Insert(objOrdemServico)
        }               
    }Catch(objErro){
        Set Status = objErro.AsStatus()
    }   
    
    Quit Status
]]></Implementation>
</Method>

<Method name="PreencherObjCancelamento">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOs:%String,pCodExame:%String,pIdLogOperacao:%String,&objDadosRetorno:customizacao.tasy.xml.DadosRetorno]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    Set Status = $$$OK
    Try{

        Set idOs = pIdOs
        Set idLogOperacao = pIdLogOperacao
        Set idExame = pCodExame
            
        Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(idLogOperacao)
        If '$ISOBJECT(tblLogOperacao) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")                 
                
        Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
        If '$ISOBJECT(arqOrdemServico) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.ArqOrdemServico não encontrado para OS com ID "_idOs_".")
                
        Set tblProcedimento = ##class(dado.TblExame).%OpenId(idExame)       
        If '$ISOBJECT(tblProcedimento) Throw ##class(s00.util.Excecao).%New("Registro da tabela tblProcedimento não encontrado para ID "_pCodExame_".")
        
        Set osIncluida = 0
        Set qtdeOsIncluidas = objDadosRetorno.OrdemServico.Count()
                                
        For contOsInc=1:1:qtdeOsIncluidas{
            
            // OS já estava incluída na lista
            If (objDadosRetorno.OrdemServico.GetAt(contOsInc).CodigoOs = arqOrdemServico.CodigoOs){
                Set osIncluida = 1
                
                Set exameIncluido = 0
                Set qtdeEx = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Count()
                For contEx=1:1:qtdeEx{
                    
                    // Exame já estava incluído na OS
                    If (objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx) = idExame){
                        
                        Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = tblLogOperacao.Data
                        Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = tblLogOperacao.Hora
                        
                        Set exameIncluido = 1   
                    }
                }
                
                // Exame não estava incluído na OS
                If 'exameIncluido{
                    Set objExame = ##class(customizacao.tasy.xml.Exame).%New()
                    Set objExame.Codigo = tblProcedimento.%Id()
                    Set objExame.Mnemonico = tblProcedimento.Mnemonico
                    Set objExame.Descricao = tblProcedimento.Descricao
                    Set objExame.Status = "CC"          
                    Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
                    Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
                    If $ISOBJECT(tblLogOperacao.MotivoId){
                        Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
                    }
                    If $ISOBJECT(tblLogOperacao.UsuarioId){
                        If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
                            Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
                        }
                    }
                    Do objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Insert(objExame)
                }
            }
        }
        
        // OS não estava incluída na lista
        If 'osIncluida{
            Set objOrdemServico = ##class(customizacao.tasy.xml.OrdemServico).%New()
            Set objOrdemServico.CodigoOs = arqOrdemServico.CodigoOs
            Set objOrdemServico.PedidoCliente = arqOrdemServico.NroIdentificacaoOsLisOrigem
            
            Set objExame = ##class(customizacao.tasy.xml.Exame).%New()
            Set objExame.Codigo = tblProcedimento.%Id()
            Set objExame.Mnemonico = tblProcedimento.Mnemonico
            Set objExame.Descricao = tblProcedimento.Descricao
            Set objExame.Status = "CC"          
            Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
            Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
            
            If $ISOBJECT(tblLogOperacao.MotivoId){
                Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
            }
            If $ISOBJECT(tblLogOperacao.UsuarioId){
                If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
                    Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
                }
            }
            Do objOrdemServico.Exames.Insert(objExame)
            
            Do objDadosRetorno.OrdemServico.Insert(objOrdemServico)
        }               
    }Catch(objErro){
        Set Status = objErro.AsStatus()
    }   
    
    Quit Status
]]></Implementation>
</Method>

<Method name="RegistrarExportacaoResultado">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOsId:%String,pProcedimentoId:%String,pUsuarioWebId:%String,pAtualizarStatusProcedimento:%Boolean,pRemocaoManual:%Boolean,pIdUsuarioShiftLis:%String="",pAlteraExportado:%Boolean=1,pGeraLog:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set retorno = 1
	Try{
		Set objOsProcedimento = ##class(dado.TblOsProcedimento).idxOsProcedimentoOpen(pOsId, pProcedimentoId)
		If ($ISOBJECT(objOsProcedimento)){
			
			If pUsuarioWebId = ""{
				Set usuarioId = ##class(dado.TblUsuario).GetUsuarioAutomatico()
				Set origemLog = 1
				Set usuarioTipo = 5
			}Else{
				Set objUsuarioWeb = ##class(dado.TblUsuarioWeb).%OpenId(pUsuarioWebId)
				If '$ISOBJECT(objUsuarioWeb){
					Set objUsuarioWeb = ##class(dado.TblUsuarioWeb).idxUserIdOpen(pUsuarioWebId)
					If '$ISOBJECT(objUsuarioWeb){
						Throw ##class(s00.util.Excecao).%New("Usuário web "_pUsuarioWebId_" não encontrado.")
					}
				}
				Set usuarioId = objUsuarioWeb.%Id()
				Set origemLog = 2
				Set usuarioTipo = objUsuarioWeb.Tipo
			}
			
			If pIdUsuarioShiftLis '= ""{
				Set objUsuarioShiftLis = ##class(dado.TblUsuario).%OpenId(pIdUsuarioShiftLis)
				Set usuarioId = objUsuarioShiftLis.%Id()
				Set usuarioTipo = 5
			}
			
			//Remoção pela integracao, log 068 ; remocao manual (pela interface) log 289
			Set log = "068"
			If pRemocaoManual = 1{
				Set log = "289"
				Set pAtualizarStatusProcedimento = 0
			}
			
			If pAtualizarStatusProcedimento{
				Set osProcedimento = objOsProcedimento.%Id()
				
				Set contador = 0
				Set sqlOsProcedimento = "SELECT COUNT(*) As Contador FROM dado.TblResultado WHERE LogAssinaturaId IS NOT NULL AND Procedimento = ?"
				Set rsOsProcedimento = ##class(%ResultSet).%New()
				Set sc = rsOsProcedimento.Prepare(sqlOsProcedimento)
				Set sc = rsOsProcedimento.Execute(osProcedimento)
				If rsOsProcedimento.Next(){
					Set contador = rsOsProcedimento.Contador
				}
				If contador > 0{
					Do objOsProcedimento.StatusSetObjectId("EX")
				}
			}
			
			If pGeraLog{
				If (##class(s01.util.Log).RegistrarLogOperacao(origemLog, log, "", pProcedimentoId, pOsId, usuarioId, usuarioTipo) = 0){ //igual a zero tem erro
					Set localErro = "RegistrarExportacaoResultado() -> RegistrarLogOperacao()"
	    	    	Set erroEx = ##class(s00.util.Excecao).%New("Erro ao registrar log "_log_" "_localErro)
		        	Throw erroEx
		    	}
			}
    		If pAlteraExportado{
	    		Set objOsProcedimento.Exportado = 3
    		}
			Set sc = objOsProcedimento.%Save()
			If ($$$ISERR(sc)){
				Set localErro = "RegistrarExportacaoResultado() -> Registrar Status EXPORTADO"
	    	    Set erroEx = ##class(s00.util.Excecao).%New("Erro ao registrar status EXPORTADO")
	        	Throw erroEx
			}
		}
	}Catch(ex){
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
		Throw ex
	}
	Quit retorno
]]></Implementation>
</Method>

<Method name="BuscaRecipiente">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodExame:%String,pUnidadeColeta:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try {
	    Set recipiente = "" 
    	Set exame = ##class(dado.TblExame).%OpenId(pCodExame)
    	
    	Set qtdUnidade = exame.RecipienteUnidadeRecipiente.Count()
    	
    	For i=1:1:qtdUnidade
    	{
	    	Set unidade = exame.RecipienteUnidadeUnidade.GetAt(i)
	    	If unidade = pUnidadeColeta
	    	{
		    	Set recipiente = ##Class(dado.TblRecipiente).ApelidoGetStored(exame.RecipienteUnidadeRecipiente.GetAt(i))
	    	}
	    	
    	}
    	If recipiente = ""
    	{
	    	Set recipiente = ##Class(dado.TblRecipiente).ApelidoGetStored(exame.Recipiente.GetAt(1))
    	}

    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return recipiente
]]></Implementation>
</Method>

<Method name="GravarDadosColeta">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodigoOs:%String,pRecipiente:%String,pColetador:%String,pData:%String="",pHora:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objDadosRetorno = ##class(customizacao.tasy.xml.DadosRetorno).%New()
	Try
	{
		Set objUsuarioWeb = ##class(dado.TblUsuarioWeb).idxUserIdOpen(pColetador)
		Set idOsRecipiente = 0

		If $ISOBJECT(objUsuarioWeb) 
		{
			Set ordemServico = ##class(dado.ArqOrdemServico).idxCodigoOsOpen(pCodigoOs)
			Set osRecipiente = ##class(dado.TblOsRecipiente).idxCbarraOpen(pRecipiente)
			
			If $ISOBJECT(ordemServico)
			{
				If $ISOBJECT(osRecipiente)
				{
					Set idOsRecipiente = osRecipiente.%Id()
				}

				Set %dataLog = $CASE(pData,"":##class(s00.util.DataHora).DisplayToLogical("","data"),:##class(s00.util.DataHora).OdbcToLogical(pData))
				Set %horaLog = ##class(s00.util.DataHora).DisplayToLogical(pHora,"hora")

				Set regLog = ##class(s01.util.Log).RegistrarLogOperacao(2,"060","",idOsRecipiente,ordemServico.%Id(),objUsuarioWeb.%Id(),0,,objUsuarioWeb.%Id(),,)
				If (regLog = 0)
				{
					Throw ##class(s00.util.Excecao).%New(("Erro ao registrar log de operação."),"","",)
				}				
			}
			Else
			{
				Set objDadosRetorno.Situacao = 0
				Set objDadosRetorno.DescricaoErro = "Código Os: "_pCodigoOs_" não localizado na base"
			}
		}
		Else
		{
			Set objDadosRetorno.Situacao = 0
			Set objDadosRetorno.DescricaoErro = "Código Coletador: "_pColetador_" não localizado na base"
		}		
	}
	Catch(objExcecao) 
	{
		Set objDadosRetorno.Situacao = 0
		Set objDadosRetorno.DescricaoErro = objExcecao.Name _ " - " _ objExcecao.Data		
	} 
	
	Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="RecuperaInformacaoLog">
<ClassMethod>1</ClassMethod>
<FormalSpec>pExame:%String="",pOs:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.InformacaoLog</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try 
    {
	    Set objRetorno = ##class(customizacao.tasy.xml.InformacaoLog).%New()
	    
	    If (pExame = "") || (pOs = "")
	    {
		    Set Status = $$$ERROR(5001, "Os valores dos parâmetros do método RecuperaInformacaoLog devem ser informados.")
		    $$$ThrowStatus(Status)
	    }
	    		
        Set sql = "SELECT ID FROM dado.ArqOrdemServico WHERE CodigoOs = ?"
                     
        Set tStatement = ##class(%SQL.Statement).%New()
        Set Status = tStatement.%Prepare(sql)
        If $System.Status.IsError(Status) Throw ##class(s00.util.Excecao).%New(Status)
        
        Set rset = tStatement.%Execute(pOs)
        
        Set logLista = $LB("230","011","031","089","054","013","051","025","048","320","090","319","160","060")
        
        IF rset.%Next()
        {
	        Set sqlLog = "SELECT Data,Hora,UsuarioId->UserId As UserId ,LogId FROM dado.TblLogOperacao WHERE Dado1 = ? AND Dado2 = ? AND LogId %INLIST (?) ORDER BY Id DESC"
                        
	        Set tStatementLog = ##class(%SQL.Statement).%New()
	        Set Status = tStatementLog.%Prepare(sqlLog)
	        If $System.Status.IsError(Status) Throw ##class(s00.util.Excecao).%New(Status)
	        Set rsetLog = tStatementLog.%Execute(pExame,rset.ID,logLista)
	        
	        While rsetLog.%Next()
	        {
		        If objRetorno.LogInformation.GetAt(rsetLog.%Get("LogId")) = ""
		        {
		         	Set objLog = ##class(customizacao.tasy.xml.Log).%New()           
	                Set objLog.DataHora = $ZDATE(rsetLog.%Get("Data"),3)_" "_$ZTIME(rsetLog.%Get("Hora"))
	                Set objLog.Operador = rsetLog.%Get("UserId")
	                
	                Set Status = objRetorno.LogInformation.SetAt(objLog,rsetLog.%Get("LogId"))
	                If $System.Status.IsError(Status) Throw ##class(s00.util.Excecao).%New(Status)
	        	}
                
        	}
        }
    	
    } Catch(ex){        
    	Set Status = ex.AsStatus()
    	Set objRetorno.Retorno = 0
    	Set objRetorno.DescricaoErro = $System.Status.GetOneErrorText(Status)
    
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return objRetorno
]]></Implementation>
</Method>

<Method name="BuscaDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaStatus:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.statusV2.DadosRetornoStatus</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {		
		Return ..PreencherDadosStatus(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao,pListaStatus)
	} Catch(ex){		
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
	}
	
	Return ##class(customizacao.tasy.xml.statusV2.DadosRetornoStatus).%New()
]]></Implementation>
</Method>

<Method name="PreencherDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaStatus:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.statusV2.DadosRetornoStatus</ReturnType>
<Implementation><![CDATA[
	Try {
		K parms
		Set parms($I(parms)) = pDataInicial
		Set parms($I(parms)) = pDataFinal
		Set parms($I(parms)) = pHoraInicial
		Set parms($I(parms)) = pHoraFinal		
		
		Set Status = $$$OK
		Set sqlLogOperacao = ##class(%Stream.GlobalCharacter).%New()
		Do sqlLogOperacao.WriteLine("SELECT ID, Dado1 , Dado2")
		Do sqlLogOperacao.WriteLine("FROM dado.TblLogOperacao")
		Do sqlLogOperacao.WriteLine("WHERE Data BETWEEN ? AND ?")
		Do sqlLogOperacao.WriteLine("AND Hora BETWEEN ? AND ?")
		Do sqlLogOperacao.WriteLine("AND ((LogId->Tipo = 4) OR (LogId->Tipo = 3))")
		Do sqlLogOperacao.WriteLine("GROUP BY Dado1 , Dado2")
		Do sqlLogOperacao.WriteLine("ORDER BY Id ASC")
		Set sqlLogOperacao = sqlLogOperacao.Read(sqlLogOperacao.Size)
		Set statement = ##class(%SQL.Statement).%New(1)
		$$$THROWONERROR(Status,statement.%Prepare(sqlLogOperacao))
		Set resultSet = statement.%Execute(parms...)
		
		Set filtroStatusProcedimento = $LISTFROMSTRING(pListaStatus)
		If pListaStatus = "" 
		{
			Set filtroStatusProcedimento = $ListBuild("R1","IA","RT","PE","RS","EP","AM","RA","EX","AS","AL","EN")	
		}
		
		Set objDadosRetorno = ##class(customizacao.tasy.xml.statusV2.DadosRetornoStatus).%New()
		While resultSet.%Next()
		{
			Set os = resultSet.Dado2
			Set procedimento = resultSet.Dado1
			Set id = resultSet.Id
			Set sqlOsProcedimento = ##class(%Stream.GlobalCharacter).%New()
			Do sqlOsProcedimento.WriteLine("SELECT Id")
			Do sqlOsProcedimento.WriteLine("FROM dado.TblOsProcedimento")
			Do sqlOsProcedimento.WriteLine("WHERE Os = ?")
			Do sqlOsProcedimento.WriteLine("AND Procedimento = ?")
			Do sqlOsProcedimento.WriteLine("AND Os->Integracao = ?")
			Do sqlOsProcedimento.WriteLine("AND Status %INLIST ?")
			Set sqlOsProcedimento = sqlOsProcedimento.Read(sqlOsProcedimento.Size)
			Set statement = ##class(%SQL.Statement).%New(2)
			$$$THROWONERROR(Status,statement.%Prepare(sqlOsProcedimento))
			Set rsOsProcedimento = statement.%Execute(os, procedimento, pIntegracao, filtroStatusProcedimento)
			
			If rsOsProcedimento.%Next()
			{
				Set idExame = rsOsProcedimento.Id
				$$$THROWONERROR(Status,..PreencherDadosRetornoStatus(os,idExame,id,.objDadosRetorno))					
			}
			
		}
		
	}Catch(objExcecao) {	
		Set objDadosRetorno.Situacao = 0
		Set objDadosRetorno.DescricaoErro = pExcecao.Name _ " - " _ pExcecao.Data
	}
	Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosRetornoStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOs:%String,pIdExame:%String,pIdLogOperacao:%String,&objDadosRetorno:customizacao.tasy.xml.statusV2.DadosRetornoStatus]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Set Status = $$$OK
	Try{

		Set CBarraExame = ""
		Set TipoAmostra = ""

		Set idOs = pIdOs
		Set idExame = pIdExame
		Set idLogOperacao = pIdLogOperacao
			
		Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(idLogOperacao)
		If '$ISOBJECT(tblLogOperacao) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")					
				
		Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
		If '$ISOBJECT(arqOrdemServico) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.ArqOrdemServico não encontrado para OS com ID "_idOs_".")
				
		Set tblOsProcedimento = ##class(dado.TblOsProcedimento).%OpenId(idExame)		
		If '$ISOBJECT(tblOsProcedimento) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")
				
		Set StatusExame = tblOsProcedimento.Status.Id
		
			
		Set osIncluida = 0
		Set qtdeOsIncluidas = objDadosRetorno.OrdemServico.Count()
		
		For contOsInc=1:1:qtdeOsIncluidas{
			// OS já estava incluída na lista
			If (objDadosRetorno.OrdemServico.GetAt(contOsInc).CodigoOs = arqOrdemServico.CodigoOs){
				Set osIncluida = 1
				
				Set exameIncluido = 0
				Set qtdeEx = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Count()
				For contEx=1:1:qtdeEx{
					
					// Exame já estava incluído na OS
					If (objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).Codigo = idExame){
						If (tblLogOperacao.Data > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento){
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = tblLogOperacao.Data
							Set exameIncluido = 1
						}
						If (tblLogOperacao.Hora > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento){
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = tblLogOperacao.Hora
							Set exameIncluido = 1
						}

					}
				}
				
				// Exame não estava incluído na OS
				If 'exameIncluido{
					Set objExame = ##class(customizacao.tasy.xml.statusV2.ExameStatus).%New()
					Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
					Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
					Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
					Set objExame.Status = StatusExame			
					Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
					Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
					If $ISOBJECT(tblLogOperacao.MotivoId){
						Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
						Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
					}
					If $ISOBJECT(tblLogOperacao.UsuarioId){
						If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
							Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
						}
					}
					
					Do objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Insert(objExame)
				}Else{
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = $ZDATE(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento,3)
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = $ZTIME(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento)
					
				}
			}
		}
		
		// OS não estava incluída na lista
		If 'osIncluida{
			Set objOrdemServico = ##class(customizacao.tasy.xml.statusV2.OrdemServicoStatus).%New()
			Set objOrdemServico.CodigoOs = arqOrdemServico.CodigoOs
			Set objOrdemServico.PedidoCliente = arqOrdemServico.NroIdentificacaoOsLisOrigem
						
			Set objExame = ##class(customizacao.tasy.xml.statusV2.ExameStatus).%New()
			Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
			Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
			Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
			Set objExame.Status = StatusExame			
			Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
			Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
			If $ISOBJECT(tblLogOperacao.MotivoId){
				Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
				Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
			}
			If $ISOBJECT(tblLogOperacao.UsuarioId){
				If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
					Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
				}
			}
			
			Do objOrdemServico.Exames.Insert(objExame)
			
			Do objDadosRetorno.OrdemServico.Insert(objOrdemServico)
		}				
	}Catch(objErro){
		Set Status = objErro.AsStatus()
	}	
	
	Quit Status
]]></Implementation>
</Method>
</Class>


<Class name="customizacao.tasy.servicoweb.WSPedido">
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>
<TimeChanged>66828,41311.478505</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>WSLisCustomizacao</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.shift.com.br</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domínio usado para localização.</Description>
<Default>SCSDOMAIN</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="CompositePergunta">
<Type>s01.controle.perguntas.Perguntas</Type>
<InitialExpression>##class(s01.controle.perguntas.Perguntas).%New()</InitialExpression>
</Property>

<Property name="ObjUsuarioWeb">
<Type>dado.TblUsuarioWeb</Type>
</Property>

<Method name="SalvaInfoPreAnalitica">
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set Retorno = $$$OK
    Try {  
    	DO ..SalvaInfoPreAnaliticasDoProcedimento(pPedidoLab)
    	DO ..SalvarPerguntasNaInclusaoProcedimento(pPedidoLab)        
    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
        Set Retorno = 0
    }
    Quit Retorno
]]></Implementation>
</Method>

<Method name="SalvaInfoPreAnaliticasDoProcedimento">
<FormalSpec>pPedidoLab:%RegisteredObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set retorno = 1
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set objProxy = ##Class(%ZEN.proxyObject).%New()
		Set pedidoLab = pPedidoLab
		Set ..ObjUsuarioWeb = ##class(dado.TblUsuarioWeb).idxUserIdOpen(pedidoLab.UsuarioWebId)
		Set objUsuarioWeb = ..ObjUsuarioWeb
		Set Os = ##Class(dado.ArqOrdemServico).idxCodigoOsOpen(pedidoLab.Pedido.OrdemServico)
		Set objProxy.OsId = Os.%Id()
		
		Set listaProcedimento = ""
		Set qtdProcedimento = pedidoLab.Exame.Count()
		For i=1:1:qtdProcedimento
		{
			Set listaProcedimento = listaProcedimento_$LB(pedidoLab.Exame.GetAt(i).Codigo)
		}
		
		Set lProcedimento = $LISTTOSTRING(listaProcedimento,$CHAR(252))
		Set objRetorno = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).BuscarInfPreanalitica(, objProxy.OsId, "", lProcedimento, "", $CHAR(253), $CHAR(252),,1)
		Set scsListaRespostas = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).ConstruirListaResposta(objRetorno.scsListaParametros, $CHAR(253), $CHAR(252))
		Set scsListaLaudos = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).ConstruirListaResposta(objRetorno.scsListaParametros, $CHAR(253), $CHAR(252))
		Set lParametrosOs = $LISTFROMSTRING(objRetorno.scsListaParametros,$CHAR(252))
		Set lProcessoAnaliticoOs = $LISTFROMSTRING(objRetorno.scsListaProcessos,$CHAR(252))
					
		/*
		** VALIDAÇÃO DAS INFORMAÇÕES PRÉ-ANALÍTICAS POR PROCEDIMENTO
		*/
		Set existeResposta = 0
		Set totalProcedimento = pedidoLab.Exame.Count()
		For i=1:1:totalProcedimento{
			#DIM lInformacaoPreAnalitica As %ListOfObjects = pedidoLab.Exame.GetAt(i).InformacoesPreAnaliticas
			Set totalInformacaoPreAnalitica = lInformacaoPreAnalitica.Count()
			For j=1:1:totalInformacaoPreAnalitica{
				#DIM informacaoPreAnalitica As s01.util.b2b.shiftLis.ensemblev2.imp.InformacaoPreAnalitica = lInformacaoPreAnalitica.GetAt(j)
				
				If informacaoPreAnalitica.Tipo '= "I" CONTINUE
				
				Set objParametro = ##class(dado.TblParametro).idxApelidoOpen(informacaoPreAnalitica.ValorId)
				
				If '$ISOBJECT(objParametro) CONTINUE
				
				Set posicaoInformacaoPreAnalitica = $LISTFIND(lParametrosOs,objParametro.%Id())
				If posicaoInformacaoPreAnalitica > 0{
					Set objProcessoAnalitico = ##class(dado.TblProcessoAnalitico).%OpenId($LISTGET(lProcessoAnaliticoOs,posicaoInformacaoPreAnalitica))
					
					Set resposta = informacaoPreAnalitica.Valor
										
					Set existeProcessoComItemLaudo = 0
					If $ISOBJECT(objProcessoAnalitico){
						If (objProcessoAnalitico.PermiteAlterarTextoLaudo = 0) && ($ISOBJECT(objProcessoAnalitico.GrupoLaudoId)){
							Set existeProcessoComItemLaudo = 1
							
							If ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).ExisteLaudoNoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta){
								Set objLaudoItem = ##class(dado.TblGrupoLaudoItem).idxGrupoLaudoAbreviaturaOpen(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta)								
								Set resposta = objLaudoItem.LaudoId.%Id()
							}Else{
								Set valoresPermitidosLaudo = ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).GetApelidoItensLaudoDoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id())
								Throw ##class(s00.util.Excecao).%New("SalvarInformacoesPreAnalitica()",5001,,"Erro ao salvar informações pré-analíticas. O parâmetro %1 aceita apenas os seguintes valores %2.",informacaoPreAnalitica.ValorId,valoresPermitidosLaudo)
							}
						}
					}
					
					If existeProcessoComItemLaudo{
						Set $PIECE(scsListaLaudos,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
					}Else{
						Set $PIECE(scsListaRespostas,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
					}
					
					Set existeResposta = 1
				}
			}
		}
		
		/*
		** VALIDAÇÃO DAS INFORMAÇÕES PRÉ-ANALÍTICAS POR PACIENTE
		*/
		Set lParametro = $LISTFROMSTRING("")
		Set lValorSalvar = $LISTFROMSTRING("")
		Set imc = ""
		Set pedido = ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).%New()
		Set pedido.PedidoLab = pedidoLab
		Do pedido.ValidarInfoPreAnaliticaEspecifica(.lParametro, .lValorSalvar, .imc)

		For i=1:1:$LISTLENGTH(lParametro){
			Set parametroId = $LISTGET(lParametro,i)
			Set objParametro = ##class(dado.TblParametro).%OpenId(parametroId)
				
			If '$ISOBJECT(objParametro) CONTINUE
			
			Set posicao = $LISTLENGTH(lParametrosOs) + 1
			Set $LIST(lParametrosOs,*+1)= parametroId
			Set posicaoInformacaoPreAnalitica = $LISTFIND(lParametrosOs,parametroId)
			If posicaoInformacaoPreAnalitica > 0{
				Set objProcessoAnalitico = ##class(dado.TblProcessoAnalitico).%OpenId($LISTGET(lProcessoAnaliticoOs,posicaoInformacaoPreAnalitica))
				
				Set resposta = $LISTGET(lValorSalvar,i)
									
				Set existeProcessoComItemLaudo = 0
				If $ISOBJECT(objProcessoAnalitico){
					If (objProcessoAnalitico.PermiteAlterarTextoLaudo = 0) && ($ISOBJECT(objProcessoAnalitico.GrupoLaudoId)){
						Set existeProcessoComItemLaudo = 1
						
						If ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).ExisteLaudoNoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta){
							Set objLaudoItem = ##class(dado.TblGrupoLaudoItem).idxGrupoLaudoAbreviaturaOpen(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta)								
							Set resposta = objLaudoItem.LaudoId.%Id()
						}Else{
							Set valoresPermitidosLaudo = ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).GetApelidoItensLaudoDoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id())
							Throw ##class(s00.util.Excecao).%New("SalvarInformacoesPreAnalitica()",5001,,"Erro ao salvar informações pré-analíticas. O parâmetro %1 aceita apenas os seguintes valores %2.",$LISTGET(lParametro,i),valoresPermitidosLaudo)
						}
					}
				}
				
				If existeProcessoComItemLaudo{
					Set $PIECE(scsListaLaudos,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
				}Else{
					Set $PIECE(scsListaRespostas,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
				}
				
				Set existeResposta = 1
			}
		}
	
		Set objRetorno.scsListaRespostas = scsListaRespostas
		Set objRetorno.scsListaLaudos = scsListaLaudos
		Set objRetorno.scsListaParametros 	= $LISTTOSTRING(lParametrosOs, $CHAR(252))
		
		If objUsuarioWeb.ValidarInformacaoPreAnalitica{
			Do ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).ValidaInformacaoPreAnaliticaObrigatoria(
				objRetorno.scsListaParametros,
				objRetorno.scsListaRespostas,
				objRetorno.scsListaLaudos)
		}
		
		Set objProxy.txtImc = imc
		Set retorno = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).SalvarInfPreAnaliticas(
			objRetorno.scsListaOS,
			objRetorno.scsListaProcedimentos,
			objRetorno.scsListaParametros,
			objRetorno.scsListaProcessos,
			objRetorno.scsListaRespostas,
			objRetorno.scsListaLaudos,
			$CHAR(253),
			$CHAR(252),
			objProxy)
			
	}Catch(ex){
		Throw ex
	}
	
	Quit retorno
]]></Implementation>
</Method>

<Method name="SalvarPerguntasNaInclusaoProcedimento">
<FormalSpec>pPedidoLab:%RegisteredObject,pObjProxy</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set retorno = 1
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set pedidoLab = pPedidoLab
		
		Set objProxy = ##Class(%ZEN.proxyObject).%New()
		
		Set Os = ##Class(dado.ArqOrdemServico).idxCodigoOsOpen(pedidoLab.Pedido.OrdemServico)
		Set objProxy.OsId = Os.%Id()
		
		Set ..CompositePergunta.OsId = objProxy.OsId
		Do ..PreencherInfoCompositePergunta(pedidoLab,objProxy)
		Set mv = $CHAR(253)
		Set listaCodPerguntas = ""
		Set listaRespostas = ""
		Set qtdPerguntas = ..CompositePergunta.Perguntas.Count()
		For iPerguntas = 1:1:qtdPerguntas{
			Set $LIST(listaCodPerguntas,iPerguntas) = ..CompositePergunta.Perguntas.GetAt(iPerguntas).PerguntaId
			Set $LIST(listaRespostas,iPerguntas) = ..CompositePergunta.Perguntas.GetAt(iPerguntas).Resposta
		}
		Set codPerguntas = $LISTTOSTRING(listaCodPerguntas,mv)
		 		
		Set totalProcedimento = pedidoLab.Exame.Count()
		For iProcedimento=1:1:totalProcedimento{
 			#DIM lInformacaoPreAnalitica As %ListOfObjects = pedidoLab.Exame.GetAt(iProcedimento).InformacoesPreAnaliticas
 			Set totalInformacaoPreAnalitica = lInformacaoPreAnalitica.Count()
 			For iPerguntas=1:1:totalInformacaoPreAnalitica{
	 			#DIM informacaoPreAnalitica As s01.util.b2b.shiftLis.ensemblev2.imp.InformacaoPreAnalitica = lInformacaoPreAnalitica.GetAt(iPerguntas)
			
				If informacaoPreAnalitica.Tipo '= "P" CONTINUE
				Set posPergunta = $LISTFIND(listaCodPerguntas, informacaoPreAnalitica.ValorId)
				If (posPergunta '= 0){
					Set $LIST(listaRespostas,posPergunta) = informacaoPreAnalitica.Valor
				}				
			}
		}
		For iPerguntas = 1:1:qtdPerguntas{
			Set ..CompositePergunta.Perguntas.GetAt(iPerguntas).Resposta = $LISTGET(listaRespostas, iPerguntas)
		}
		Do ..SalvarObservacoes(objProxy.OsId)	
	}Catch(ex){
		Throw ex
	}
	
	Quit retorno
]]></Implementation>
</Method>

<Method name="PreencherInfoCompositePergunta">
<FormalSpec>pPedidoLab:%RegisteredObject,pObjProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set pedidoLab = pPedidoLab
		
		Set objPaciente = ""
		
		Set validacaoPacienteFactory = ##class(s01.util.b2b.shiftLis.ensemblev2.ValidacaoPacienteFactory).%New(pedidoLab,..ObjUsuarioWeb.%Id())
		Set pacienteId = validacaoPacienteFactory.GetValidacaoPaciente().ValidarPacientePorNome()
		If pacienteId '= ""
		{
			Set objPaciente = ##class(dado.ArqPaciente).%OpenId(pacienteId)
		}
		
		Set ..CompositePergunta.UnidadeColetaId = pedidoLab.Pedido.Posto
		Set ..CompositePergunta.Segmento = pedidoLab.Pedido.Segmento
		Set ..CompositePergunta.Categoria = 1
		Set ..CompositePergunta.Origem = 2 //2 = integração
		Set ..CompositePergunta.PacienteId = objPaciente.%Id()
 		If (pObjProxy.OsId '= "") {//se a ordem de serviço já está cadastrada
 			Set ..CompositePergunta.Acao = "INCLUSAO"
		} Else {
			Set ..CompositePergunta.Acao = "CADASTRO"
		}
		
		Set qtdProcedimento = pedidoLab.Exame.Count()
		Set listaProcedimento = ""
		For i=1:1:qtdProcedimento
		{
			Set listaProcedimento = listaProcedimento_$LB(pedidoLab.Exame.GetAt(i).Codigo)
		}
		Set lProcedimento = $LISTTOSTRING(listaProcedimento,$CHAR(253))
		
		Set listaExames = $LISTFROMSTRING(lProcedimento, $CHAR(253))
		Set qtdExames = $LISTLENGTH(listaExames)
		
		For iExame = 1:1:qtdExames {
			Set objPerguntaItem = ##class(s01.modelo.perguntas.Item).%New()
			Set objPerguntaItem.Id = $LISTGET(listaExames,iExame)
			Set objPerguntaItem.Status = "AM"
			Do ..CompositePergunta.Itens.Insert(objPerguntaItem)
			Kill objPerguntaItem
 		}
 		
 		Do ..CompositePergunta.BuscarPerguntas()
	}Catch(ex){
		Throw ex
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="SalvarObservacoes">
<FormalSpec>pOsId:%String</FormalSpec>
<Implementation><![CDATA[
	Try {
		Set ..CompositePergunta.OsId = pOsId
		Set ..CompositePergunta.UsuarioId = ..ObjUsuarioWeb.%Id()
		Set ..CompositePergunta.UsuarioWebId = ..ObjUsuarioWeb.%Id()
		Set ..CompositePergunta.ValidarInformacaoPreAnalitica = ..ObjUsuarioWeb.ValidarInformacaoPreAnalitica
		Do ..CompositePergunta.Salvar()
		
	} Catch (ex) {
		Throw ex	
	}
]]></Implementation>
</Method>
</Class>


<Class name="customizacao.tasy.servicoweb.WSStatus">
<Super>%SOAP.WebService</Super>
<TimeChanged>66942,62999.570641</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>WSStatus</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.shift.com.br</Default>
</Parameter>

<Method name="BuscaStatusOs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOs:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.status.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try 
    {
	    Set objRetorno = ""
        Set objRetorno = ##class(customizacao.tasy.dao.status.Status).BuscaStatusOs(pOs)
    } 
    Catch(ex)
    {        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return objRetorno
]]></Implementation>
</Method>

<Method name="AlteraStatusOs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOsId:%String="",pProcedimento:%String="",pOsProcedimentoId:%String="",pStatusAlterar:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.status.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try 
    {
	    Set objRetorno = ""
        Set objRetorno = ##class(customizacao.tasy.dao.status.Status).AlteraStatusOs(pOsId,pProcedimento,pOsProcedimentoId,pStatusAlterar)
    } 
    Catch(ex)
    {        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return objRetorno
]]></Implementation>
</Method>

<Method name="RetornarDescricaoStatus">
<ClassMethod>1</ClassMethod>
<ReturnType>customizacao.tasy.xml.status.ListaStatus</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try 
    {
	    Set objRetorno = ""
        Set objRetorno = ##class(customizacao.tasy.dao.status.Status).RetornarDescricaoStatus()
    } 
    Catch(ex)
    {        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return objRetorno
]]></Implementation>
</Method>

<Method name="BuscaDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaStatus:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.statusV2.DadosRetornoStatus</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {		
		Return ..PreencherDadosStatus(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao,pListaStatus)
	} Catch(ex){		
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
	}
	
	Return ##class(customizacao.tasy.xml.statusV2.DadosRetornoStatus).%New()
]]></Implementation>
</Method>

<Method name="PreencherDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaStatus:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.statusV2.DadosRetornoStatus</ReturnType>
<Implementation><![CDATA[
	Try {
		K parms
		Set parms($I(parms)) = pDataInicial
		Set parms($I(parms)) = pDataFinal
		Set parms($I(parms)) = pHoraInicial
		Set parms($I(parms)) = pHoraFinal		
		
		Set Status = $$$OK
		Set sqlLogOperacao = ##class(%Stream.GlobalCharacter).%New()
		Do sqlLogOperacao.WriteLine("SELECT ID, Dado1 , Dado2")
		Do sqlLogOperacao.WriteLine("FROM dado.TblLogOperacao")
		Do sqlLogOperacao.WriteLine("WHERE Data BETWEEN ? AND ?")
		Do sqlLogOperacao.WriteLine("AND Hora BETWEEN ? AND ?")
		Do sqlLogOperacao.WriteLine("AND ((LogId->Tipo = 4) OR (LogId->Tipo = 3))")
		Do sqlLogOperacao.WriteLine("GROUP BY Dado1 , Dado2")
		Do sqlLogOperacao.WriteLine("ORDER BY Id ASC")
		Set sqlLogOperacao = sqlLogOperacao.Read(sqlLogOperacao.Size)
		Set statement = ##class(%SQL.Statement).%New(1)
		$$$THROWONERROR(Status,statement.%Prepare(sqlLogOperacao))
		Set resultSet = statement.%Execute(parms...)
		
		Set filtroStatusProcedimento = $LISTFROMSTRING(pListaStatus)
		If pListaStatus = "" 
		{
			Set filtroStatusProcedimento = $ListBuild("R1","IA","RT","PE","RS","EP","AM","RA","EX","AS","AL","EN")	
		}
		
		Set objDadosRetorno = ##class(customizacao.tasy.xml.statusV2.DadosRetornoStatus).%New()
		While resultSet.%Next()
		{
			Set os = resultSet.Dado2
			Set procedimento = resultSet.Dado1
			Set id = resultSet.Id
			Set sqlOsProcedimento = ##class(%Stream.GlobalCharacter).%New()
			Do sqlOsProcedimento.WriteLine("SELECT Id")
			Do sqlOsProcedimento.WriteLine("FROM dado.TblOsProcedimento")
			Do sqlOsProcedimento.WriteLine("WHERE Os = ?")
			Do sqlOsProcedimento.WriteLine("AND Procedimento = ?")
			Do sqlOsProcedimento.WriteLine("AND Os->Integracao = ?")
			Do sqlOsProcedimento.WriteLine("AND Status %INLIST ?")
			Set sqlOsProcedimento = sqlOsProcedimento.Read(sqlOsProcedimento.Size)
			Set statement = ##class(%SQL.Statement).%New(2)
			$$$THROWONERROR(Status,statement.%Prepare(sqlOsProcedimento))
			Set rsOsProcedimento = statement.%Execute(os, procedimento, pIntegracao, filtroStatusProcedimento)
			
			If rsOsProcedimento.%Next()
			{
				Set idExame = rsOsProcedimento.Id
				$$$THROWONERROR(Status,..PreencherDadosRetornoStatus(os,idExame,id,.objDadosRetorno))					
			}
			
		}
		
	}Catch(objExcecao) {	
		Set objDadosRetorno.Situacao = 0
		Set objDadosRetorno.DescricaoErro = pExcecao.Name _ " - " _ pExcecao.Data
	}
	Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosRetornoStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOs:%String,pIdExame:%String,pIdLogOperacao:%String,&objDadosRetorno:customizacao.tasy.xml.statusV2.DadosRetornoStatus]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	Set Status = $$$OK
	Try{

		Set CBarraExame = ""
		Set TipoAmostra = ""

		Set idOs = pIdOs
		Set idExame = pIdExame
		Set idLogOperacao = pIdLogOperacao
			
		Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(idLogOperacao)
		If '$ISOBJECT(tblLogOperacao) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")					
				
		Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(idOs)
		If '$ISOBJECT(arqOrdemServico) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.ArqOrdemServico não encontrado para OS com ID "_idOs_".")
				
		Set tblOsProcedimento = ##class(dado.TblOsProcedimento).%OpenId(idExame)		
		If '$ISOBJECT(tblOsProcedimento) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")
				
		Set StatusExame = tblOsProcedimento.Status.Id
		
			
		Set osIncluida = 0
		Set qtdeOsIncluidas = objDadosRetorno.OrdemServico.Count()
		
		For contOsInc=1:1:qtdeOsIncluidas{
			// OS já estava incluída na lista
			If (objDadosRetorno.OrdemServico.GetAt(contOsInc).CodigoOs = arqOrdemServico.CodigoOs){
				Set osIncluida = 1
				
				Set exameIncluido = 0
				Set qtdeEx = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Count()
				For contEx=1:1:qtdeEx{
					
					// Exame já estava incluído na OS
					If (objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).Codigo = idExame){
						If (tblLogOperacao.Data > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento){
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = tblLogOperacao.Data
							Set exameIncluido = 1
						}
						If (tblLogOperacao.Hora > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento){
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = tblLogOperacao.Hora
							Set exameIncluido = 1
						}

					}
				}
				
				// Exame não estava incluído na OS
				If 'exameIncluido{
					Set objExame = ##class(customizacao.tasy.xml.statusV2.ExameStatus).%New()
					Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
					Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
					Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
					Set objExame.Status = StatusExame			
					Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
					Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
					If $ISOBJECT(tblLogOperacao.MotivoId){
						Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
						Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
					}
					If $ISOBJECT(tblLogOperacao.UsuarioId){
						If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
							Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
						}
					}
					
					Do objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Insert(objExame)
				}Else{
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = $ZDATE(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento,3)
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = $ZTIME(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento)
					
				}
			}
		}
		
		// OS não estava incluída na lista
		If 'osIncluida{
			Set objOrdemServico = ##class(customizacao.tasy.xml.statusV2.OrdemServicoStatus).%New()
			Set objOrdemServico.CodigoOs = arqOrdemServico.CodigoOs
			Set objOrdemServico.PedidoCliente = arqOrdemServico.NroIdentificacaoOsLisOrigem
						
			Set objExame = ##class(customizacao.tasy.xml.statusV2.ExameStatus).%New()
			Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
			Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
			Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
			Set objExame.Status = StatusExame			
			Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
			Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
			If $ISOBJECT(tblLogOperacao.MotivoId){
				Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
				Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
			}
			If $ISOBJECT(tblLogOperacao.UsuarioId){
				If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
					Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
				}
			}
			
			Do objOrdemServico.Exames.Insert(objExame)
			
			Do objDadosRetorno.OrdemServico.Insert(objOrdemServico)
		}				
	}Catch(objErro){
		Set Status = objErro.AsStatus()
	}	
	
	Quit Status
]]></Implementation>
</Method>
</Class>


<Class name="customizacao.tasy.servicoweb.WSStatusV2">
<Super>%SOAP.WebService</Super>
<TimeChanged>66889,63273.214945</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>WSStatus</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.shift.com.br</Default>
</Parameter>

<Method name="BuscaStatusOs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOs:%String</FormalSpec>
<ReturnType>customizacao.tasy.xml.status.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try 
    {
	    Set objRetorno = ""
        Set objRetorno = ##class(customizacao.tasy.dao.status.Status).BuscaStatusOs(pOs)
    } 
    Catch(ex)
    {        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return objRetorno
]]></Implementation>
</Method>

<Method name="AlteraStatusOs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOsId:%String="",pProcedimento:%String="",pOsProcedimentoId:%String="",pStatusAlterar:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.status.DadosRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try 
    {
	    Set objRetorno = ""
        Set objRetorno = ##class(customizacao.tasy.dao.status.Status).AlteraStatusOs(pOsId,pProcedimento,pOsProcedimentoId,pStatusAlterar)
    } 
    Catch(ex)
    {        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return objRetorno
]]></Implementation>
</Method>

<Method name="RetornarDescricaoStatus">
<ClassMethod>1</ClassMethod>
<ReturnType>customizacao.tasy.xml.status.ListaStatus</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
    Try 
    {
	    Set objRetorno = ""
        Set objRetorno = ##class(customizacao.tasy.dao.status.Status).RetornarDescricaoStatus()
    } 
    Catch(ex)
    {        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
    }
    
    Return objRetorno
]]></Implementation>
</Method>

<Method name="BuscaDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaStatus:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.statusV2.DadosRetornoStatus</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {		
		Return ..PreencherDadosStatus(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao,pListaStatus)
	} Catch(ex){		
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
	}
	
	Return ##class(customizacao.tasy.xml.statusV2.DadosRetornoStatus).%New()
]]></Implementation>
</Method>

<Method name="PreencherDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaStatus:%String=""</FormalSpec>
<ReturnType>customizacao.tasy.xml.statusV2.DadosRetornoStatus</ReturnType>
<Implementation><![CDATA[
	Try {
		K parms
		Set parms($I(parms)) = pDataInicial
		Set parms($I(parms)) = pDataFinal
		Set parms($I(parms)) = pHoraInicial
		Set parms($I(parms)) = pHoraFinal		
		
		Set Status = $$$OK
		Set sqlLogOperacao = ##class(%Stream.GlobalCharacter).%New()
		Do sqlLogOperacao.WriteLine("SELECT ID, Dado1 , Dado2")
		Do sqlLogOperacao.WriteLine("FROM dado.TblLogOperacao")
		Do sqlLogOperacao.WriteLine("WHERE Data BETWEEN ? AND ?")
		Do sqlLogOperacao.WriteLine("AND Hora BETWEEN ? AND ?")
		Do sqlLogOperacao.WriteLine("AND ((LogId->Tipo = 4) OR (LogId->Tipo = 3))")
		Do sqlLogOperacao.WriteLine("GROUP BY Dado1 , Dado2")
		Do sqlLogOperacao.WriteLine("ORDER BY Id ASC")
		Set sqlLogOperacao = sqlLogOperacao.Read(sqlLogOperacao.Size)
		Set statement = ##class(%SQL.Statement).%New(1)
		$$$THROWONERROR(Status,statement.%Prepare(sqlLogOperacao))
		Set resultSet = statement.%Execute(parms...)
		
		Set filtroStatusProcedimento = $LISTFROMSTRING(pListaStatus)
		If pListaStatus = "" 
		{
			Set filtroStatusProcedimento = $ListBuild("R1","IA","RT","PE","RS","EP","AM","RA","EX","AS","AL","EN")	
		}
		
		Set objDadosRetorno = ##class(customizacao.tasy.xml.statusV2.DadosRetornoStatus).%New()
		While resultSet.%Next()
		{
			Set os = resultSet.Dado2
			Set procedimento = resultSet.Dado1
			Set id = resultSet.Id
			Set sqlOsProcedimento = ##class(%Stream.GlobalCharacter).%New()
			Do sqlOsProcedimento.WriteLine("SELECT Id")
			Do sqlOsProcedimento.WriteLine("FROM dado.TblOsProcedimento")
			Do sqlOsProcedimento.WriteLine("WHERE Os = ?")
			Do sqlOsProcedimento.WriteLine("AND Procedimento = ?")
			Do sqlOsProcedimento.WriteLine("AND Os->Integracao = ?")
			Do sqlOsProcedimento.WriteLine("AND Status %INLIST ?")
			Set sqlOsProcedimento = sqlOsProcedimento.Read(sqlOsProcedimento.Size)
			Set statement = ##class(%SQL.Statement).%New(2)
			$$$THROWONERROR(Status,statement.%Prepare(sqlOsProcedimento))
			Set rsOsProcedimento = statement.%Execute(os, procedimento, pIntegracao, filtroStatusProcedimento)
			
			If rsOsProcedimento.%Next()
			{
				Set idExame = rsOsProcedimento.Id
				$$$THROWONERROR(Status,..PreencherDadosRetornoStatus(os,idExame,id,.objDadosRetorno))					
			}
			
		}
		
	}Catch(objExcecao) {	
		Set objDadosRetorno.Situacao = 0
		Set objDadosRetorno.DescricaoErro = pExcecao.Name _ " - " _ pExcecao.Data
	}
	Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosRetornoStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOs:%String,pIdExame:%String,pIdLogOperacao:%String,&objDadosRetorno:customizacao.tasy.xml.statusV2.DadosRetornoStatus]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status = $$$OK
	
	Try{
		Set CBarraExame = ""
		Set TipoAmostra = ""

		Set idOs = pIdOs
		Set idExame = pIdExame
		Set idLogOperacao = pIdLogOperacao
			
		If ('##class(dado.TblLogOperacao).%ExistsId(idLogOperacao))
		{
			Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblLogOperacao não encontrado para ID "_idLogOperacao_".")
		}
		
		If ('##class(dado.ArqOrdemServico).%ExistsId(idOs))
		{
			Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.ArqOrdemServico não encontrado para OS com ID "_idOs_".")
		}
		
		If ('##class(dado.TblOsProcedimento).%ExistsId(idExame))
		{
			Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_idExame_".")
		}

		Set tblLogOperacaoData = ##class(dado.TblLogOperacao).DataGetStored(idLogOperacao)
		Set tblLogOperacaoHora = ##class(dado.TblLogOperacao).HoraGetStored(idLogOperacao)
		Set tblLogOperacaoMotivoId = ##class(dado.TblLogOperacao).MotivoIdGetStored(idLogOperacao)
		
		Set tblLogOperacaoMotivoIdClasse = ""
		Set tblLogOperacaoMotivoIdDescricao = ""
		If (tblLogOperacaoMotivoId '= "")
		{
			Set tblLogOperacaoMotivoIdClasse = ##class(dado.TblSubLog).ClasseGetStored(tblLogOperacaoMotivoId)
			Set tblLogOperacaoMotivoIdDescricao = ##class(dado.TblSubLog).DescricaoGetStored(tblLogOperacaoMotivoId)		
		}
		
		Set tblLogOperacaoUsuarioId = ##class(dado.TblLogOperacao).UsuarioIdGetStored(idLogOperacao)
		Set tblLogOperacaoUsuarioIdPessoaFisica = ""
		Set tblLogOperacaoUsuarioIdPessoaFisicaNome = ""
		If (tblLogOperacaoUsuarioId '= "")
		{
			Set tblLogOperacaoUsuarioIdPessoaFisica = ##class(dado.TblUsuario).PessoaFisicaGetStored(tblLogOperacaoUsuarioId)
			
			If (tblLogOperacaoUsuarioIdPessoaFisica '= "")
			{
				Set tblLogOperacaoUsuarioIdPessoaFisicaNome = ##class(dado.TblPessoaFisica).NomeGetStored(tblLogOperacaoUsuarioIdPessoaFisica)		
			}
		}

		Set arqOrdemServicoCodigoOs = ##class(dado.ArqOrdemServico).CodigoOsGetStored(idOs)
		Set arqOrdemServicoNroIdentificacaoOsLisOrigem = ##class(dado.ArqOrdemServico).NroIdentificacaoOsLisOrigemGetStored(idOs)

		Set arqOrdemServicoOs = ##class(dado.TblOsProcedimento).OsGetStored(idExame)
		Set tblOsProcedimentoStatus = ##class(dado.TblOsProcedimento).StatusGetStored(idExame)
		Set tblOsProcedimentoStatusId = ##class(dado.TblStatusExame).IdGetStored(tblOsProcedimentoStatus)
		Set tblOsProcedimentoProcedimento = ##class(dado.TblOsProcedimento).ProcedimentoGetStored(idExame)
		Set tblOsProcedimentoProcedimentoId = ##class(dado.TblExame).IdGetStored(tblOsProcedimentoProcedimento)
		Set tblOsProcedimentoProcedimentoMnemonico = ##class(dado.TblExame).MnemonicoGetStored(tblOsProcedimentoProcedimento)
		Set tblOsProcedimentoProcedimentoDescricao = ##class(dado.TblExame).DescricaoGetStored(tblOsProcedimentoProcedimento)		
				
		Set StatusExame = tblOsProcedimentoStatusId
		
			
		Set osIncluida = 0
		Set qtdeOsIncluidas = objDadosRetorno.OrdemServico.Count()
		
		For contOsInc=1:1:qtdeOsIncluidas{
			// OS já estava incluída na lista
			If (objDadosRetorno.OrdemServico.GetAt(contOsInc).CodigoOs = arqOrdemServicoCodigoOs){
				Set osIncluida = 1
				
				Set exameIncluido = 0
				Set qtdeEx = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Count()
				For contEx=1:1:qtdeEx{
					
					// Exame já estava incluído na OS
					If (objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).Codigo = idExame){
						If (tblLogOperacaoData > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento){
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = tblLogOperacaoData
							Set exameIncluido = 1
						}
						If (tblLogOperacaoHora > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento){
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = tblLogOperacaoHora
							Set exameIncluido = 1
						}

					}
				}
				
				// Exame não estava incluído na OS
				If 'exameIncluido{
					Set objExame = ##class(customizacao.tasy.xml.statusV2.ExameStatus).%New()
					Set objExame.Codigo = tblOsProcedimentoProcedimentoId
					Set objExame.Mnemonico = tblOsProcedimentoProcedimentoMnemonico
					Set objExame.Descricao = tblOsProcedimentoProcedimentoDescricao
					Set objExame.Status = StatusExame			
					Set objExame.DataEvento = $ZDATE(tblLogOperacaoData,3)
					Set objExame.HoraEvento = $ZTIME(tblLogOperacaoHora)
					If (tblLogOperacaoMotivoId '= ""){
						Set objExame.CdMotivoEvento = tblLogOperacaoMotivoIdClasse
						Set objExame.MotivoEvento = tblLogOperacaoMotivoIdDescricao
					}
					If (tblLogOperacaoUsuarioId '= ""){
						If (tblLogOperacaoUsuarioIdPessoaFisica '= ""){
							Set objExame.UsuarioEvento = tblLogOperacaoUsuarioIdPessoaFisicaNome
						}
					}
					
					Do objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Insert(objExame)
				}Else{
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = $ZDATE(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento,3)
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = $ZTIME(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento)
					
				}
			}
		}
		
		// OS não estava incluída na lista
		If 'osIncluida{
			Set objOrdemServico = ##class(customizacao.tasy.xml.statusV2.OrdemServicoStatus).%New()
			Set objOrdemServico.CodigoOs = arqOrdemServicoCodigoOs
			Set objOrdemServico.PedidoCliente = arqOrdemServicoNroIdentificacaoOsLisOrigem
						
			Set objExame = ##class(customizacao.tasy.xml.statusV2.ExameStatus).%New()
			Set objExame.Codigo = tblOsProcedimentoProcedimentoId
			Set objExame.Mnemonico = tblOsProcedimentoProcedimentoMnemonico
			Set objExame.Descricao = tblOsProcedimentoProcedimentoDescricao
			Set objExame.Status = StatusExame			
			Set objExame.DataEvento = $ZDATE(tblLogOperacaoData,3)
			Set objExame.HoraEvento = $ZTIME(tblLogOperacaoHora)
			If (tblLogOperacaoMotivoId '= ""){
				Set objExame.MotivoEvento = tblLogOperacaoMotivoIdDescricao
				Set objExame.CdMotivoEvento = tblLogOperacaoMotivoIdClasse
			}
			If (tblLogOperacaoUsuarioId '= ""){
				If (tblLogOperacaoUsuarioIdPessoaFisica '= ""){
					Set objExame.UsuarioEvento = tblLogOperacaoUsuarioIdPessoaFisicaNome
				}
			}
			
			Do objOrdemServico.Exames.Insert(objExame)
			
			Do objDadosRetorno.OrdemServico.Insert(objOrdemServico)
		}				
	}Catch(objErro){
		Set Status = objErro.AsStatus()
	}	
	
	Quit Status
]]></Implementation>
</Method>
</Class>


<Class name="customizacao.tasy.xml.DadosRetorno">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65337,38801.403824</TimeChanged>
<TimeCreated>65336,53061.111574</TimeCreated>

<Property name="Situacao">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="XMLNAME" value="situacao"/>
</Property>

<Property name="DescricaoErro">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="descricaoErro"/>
</Property>

<Property name="OrdemServico">
<Type>customizacao.tasy.xml.OrdemServico</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="ordemServico"/>
<Parameter name="XMLNAME" value="ordensServico"/>
</Property>
</Class>


<Class name="customizacao.tasy.xml.Exame">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66791,61889.390083</TimeChanged>
<TimeCreated>65336,53074.983941</TimeCreated>

<Parameter name="XMLNAME">
<Default>exame</Default>
</Parameter>

<Property name="Codigo">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigo"/>
</Property>

<Property name="Mnemonico">
<Type>%String</Type>
<Parameter name="XMLNAME" value="mnemonico"/>
</Property>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="descricao"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="XMLNAME" value="status"/>
</Property>

<Property name="DataEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="dataEvento"/>
</Property>

<Property name="HoraEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="horaEvento"/>
</Property>

<Property name="UsuarioEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="usuarioEvento"/>
</Property>

<Property name="MotivoEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="motivoEvento"/>
</Property>
</Class>


<Class name="customizacao.tasy.xml.InformacaoLog">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66645,41366.819682</TimeChanged>
<TimeCreated>66645,41366.819682</TimeCreated>

<Property name="Retorno">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="DescricaoErro">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LogInformation">
<Type>customizacao.tasy.xml.Log</Type>
<Collection>array</Collection>
</Property>
</Class>


<Class name="customizacao.tasy.xml.Log">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66645,41362.638128</TimeChanged>
<TimeCreated>66645,41362.638128</TimeCreated>

<Property name="DataHora">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Operador">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="customizacao.tasy.xml.OrdemServico">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65337,38481.853446</TimeChanged>
<TimeCreated>65336,53076.804332</TimeCreated>

<Parameter name="XMLNAME">
<Default>ordemServico</Default>
</Parameter>

<Property name="CodigoOs">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigoOs"/>
</Property>

<Property name="PedidoCliente">
<Type>%String</Type>
<Parameter name="XMLNAME" value="pedidoCliente"/>
</Property>

<Property name="Exames">
<Type>customizacao.tasy.xml.Exame</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="exame"/>
<Parameter name="XMLNAME" value="exames"/>
</Property>
</Class>


<Class name="customizacao.tasy.xml.Retorno">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>65337,38551.626692</TimeChanged>
<TimeCreated>65336,52470.976266</TimeCreated>

<Parameter name="XMLNAME">
<Default>retorno</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://www.shift.com.br/Retorno</Default>
</Parameter>

<Property name="Dados">
<Type>%String</Type>
<Parameter name="XMLNAME" value="dados"/>
</Property>

<Property name="Erro">
<Type>%Stream.FileCharacter</Type>
<Parameter name="XMLNAME" value="erro"/>
</Property>
</Class>


<Class name="customizacao.tasy.xml.status.DadosRetorno">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66379,54916.23053</TimeChanged>
<TimeCreated>65336,53061.111574</TimeCreated>

<Property name="Retorno">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="XMLNAME" value="retorno"/>
</Property>

<Property name="DescricaoErro">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="descricaoErro"/>
</Property>

<Property name="OrdemServico">
<Type>customizacao.tasy.xml.status.OrdemServico</Type>
<Parameter name="XMLITEMNAME" value="ordemServico"/>
<Parameter name="XMLNAME" value="ordensServico"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>DadosRetornoState</State>
<StreamLocation>^customizacaoFEF2.DadosRetornoS</StreamLocation>
<Data name="DadosRetornoState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Retorno</Value>
</Value>
<Value name="2">
<Value>DescricaoErro</Value>
</Value>
<Value name="3">
<Value>OrdemServico</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="customizacao.tasy.xml.status.Exame">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66379,54916.231601</TimeChanged>
<TimeCreated>65336,53074.983941</TimeCreated>

<Parameter name="XMLNAME">
<Default>exame</Default>
</Parameter>

<Property name="Codigo">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigo"/>
</Property>

<Property name="Mnemonico">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="mnemonico"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="XMLNAME" value="status"/>
</Property>

<Property name="DescStatus">
<Type>%String</Type>
<Parameter name="XMLNAME" value="descStatus"/>
</Property>

<Property name="OsProcedimentoId">
<Type>%String</Type>
<Parameter name="XMLNAME" value="osProcedimentoId"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>ExameState</State>
<StreamLocation>^customizacao.tasy.xmFEF2.ExameS</StreamLocation>
<Data name="ExameState">
<Value name="1">
<Value>Codigo</Value>
</Value>
<Value name="2">
<Value>Mnemonico</Value>
</Value>
<Value name="3">
<Value>Status</Value>
</Value>
<Value name="4">
<Value>DescStatus</Value>
</Value>
<Value name="5">
<Value>OsProcedimentoId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="customizacao.tasy.xml.status.ListaStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66855,69177.972863</TimeChanged>
<TimeCreated>65336,53076.804332</TimeCreated>

<Property name="Status">
<Type>customizacao.tasy.xml.status.Status</Type>
<Collection>array</Collection>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>ListaStatusState</State>
<StreamLocation>^customizacao.tFEF2.ListaStatusS</StreamLocation>
<Data name="ListaStatusState">
<Value name="1">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="customizacao.tasy.xml.status.OrdemServico">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66379,54916.455319</TimeChanged>
<TimeCreated>65336,53076.804332</TimeCreated>

<Parameter name="XMLNAME">
<Default>ordemServico</Default>
</Parameter>

<Property name="CodigoOs">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigoOs"/>
</Property>

<Property name="OsId">
<Type>%String</Type>
<Parameter name="XMLNAME" value="osId"/>
</Property>

<Property name="Exames">
<Type>customizacao.tasy.xml.status.Exame</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="exame"/>
<Parameter name="XMLNAME" value="exames"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>OrdemServicoState</State>
<StreamLocation>^customizacaoFEF2.OrdemServicoS</StreamLocation>
<Data name="OrdemServicoState">
<Value name="1">
<Value>CodigoOs</Value>
</Value>
<Value name="2">
<Value>Exames</Value>
</Value>
<Value name="3">
<Value>OsId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="customizacao.tasy.xml.status.Status">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66855,68342.078402</TimeChanged>
<TimeCreated>65336,53076.804332</TimeCreated>

<Property name="Id">
<Type>%String</Type>
<Parameter name="XMLNAME" value="Id"/>
</Property>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="XMLNAME" value="Descricao"/>
</Property>

<Property name="Retorno">
<Type>%String</Type>
<Parameter name="XMLNAME" value="Retorno"/>
</Property>

<Property name="DescricaoErro">
<Type>%String</Type>
<Parameter name="XMLNAME" value="DescricaoErro"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>StatusState</State>
<StreamLocation>^customizacao.tasy.xFEF2.StatusS</StreamLocation>
<Data name="StatusState">
<Value name="1">
<Value>Id</Value>
</Value>
<Value name="2">
<Value>Descricao</Value>
</Value>
<Value name="3">
<Value>Retorno</Value>
</Value>
<Value name="4">
<Value>DescricaoErro</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="customizacao.tasy.xml.statusV2.DadosRetornoStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66393,70075.4906</TimeChanged>
<TimeCreated>65423,61758.333734</TimeCreated>

<Parameter name="XMLIGNORENULL">
<Default>0</Default>
</Parameter>

<Property name="OrdemServico">
<Type>customizacao.tasy.xml.statusV2.OrdemServicoStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="ordemServicoStatus"/>
<Parameter name="XMLNAME" value="ordensServicoStatus"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>DadosRetornoStatusState</State>
<StreamLocation>^customizac957A.DadosRetorno57DS</StreamLocation>
<Data name="DadosRetornoStatusState">
<Value name="1">
<Value>OrdemServico</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="customizacao.tasy.xml.statusV2.ExameStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66855,66472.964504</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>exameStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Codigo">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigo"/>
</Property>

<Property name="Mnemonico">
<Type>%String</Type>
<Parameter name="XMLNAME" value="mnemonico"/>
</Property>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="descricao"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="XMLNAME" value="status"/>
</Property>

<Property name="DataEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="dataEvento"/>
</Property>

<Property name="HoraEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="horaEvento"/>
</Property>

<Property name="UsuarioEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="usuarioEvento"/>
</Property>

<Property name="MotivoEvento">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="motivoEvento"/>
</Property>

<Property name="CdMotivoEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="cdMotivoEvento"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>ExameStatusState</State>
<StreamLocation>^customizacao.t957A.ExameStatusS</StreamLocation>
<Data name="ExameStatusState">
<Value name="1">
<Value>Codigo</Value>
</Value>
<Value name="2">
<Value>Mnemonico</Value>
</Value>
<Value name="3">
<Value>Descricao</Value>
</Value>
<Value name="4">
<Value>Status</Value>
</Value>
<Value name="5">
<Value>DataEvento</Value>
</Value>
<Value name="6">
<Value>HoraEvento</Value>
</Value>
<Value name="7">
<Value>UsuarioEvento</Value>
</Value>
<Value name="8">
<Value>MotivoEvento</Value>
</Value>
<Value name="9">
<Value>CdMotivoEvento</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="customizacao.tasy.xml.statusV2.OrdemServicoStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66393,70083.453377</TimeChanged>
<TimeCreated>65423,61724.249383</TimeCreated>

<Parameter name="XMLNAME">
<Default>ordemServicoStatus</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>0</Default>
</Parameter>

<Property name="CodigoOs">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigoOs"/>
</Property>

<Property name="PedidoCliente">
<Type>%String</Type>
<Parameter name="XMLNAME" value="pedidoCliente"/>
</Property>

<Property name="Exames">
<Type>customizacao.tasy.xml.statusV2.ExameStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="exameStatus"/>
<Parameter name="XMLNAME" value="examesStatus"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>OrdemServicoStatusState</State>
<StreamLocation>^customizac957A.OrdemServicD5D4S</StreamLocation>
<Data name="OrdemServicoStatusState">
<Value name="1">
<Value>CodigoOs</Value>
</Value>
<Value name="2">
<Value>PedidoCliente</Value>
</Value>
<Value name="3">
<Value>Exames</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.NFSe.WebService">
<Super>s01.util.b2b.NFSe.ws.WebService</Super>
<TimeChanged>66722,38754.707258</TimeChanged>
<TimeCreated>66667,31853.188204</TimeCreated>

<Method name="WsGetRpsLoteEmissao">
<Description>
Gera e retorna um lote com as RPS que devem ser convertidas em NFSe
Customizado: Alterar a busca de emissão para considerar sempre o paciente como tomador no layout RPS do Shift LIS.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%String,pEmpresaCNPJ:%String="",pTipo:%String=""</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.EmissaoRpsLote</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Return ##class(interoperability.NFSe.integracao.Emissao).GetRpsLoteEmissao(pLocalIntegracao, pEmpresaCNPJ, pTipo)
]]></Implementation>
</Method>

<Method name="WsGetRpsLoteEmissaoV2">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%String,pEmpresaCNPJ:%String="",pTipo:%String=""</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.EmissaoRpsLoteV2</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Return ##super(pLocalIntegracao, pEmpresaCNPJ, pTipo)
]]></Implementation>
</Method>

<Method name="WsConfirmarRecRpsLote">
<Description>
Confirma o recebimento do lote pelo Ensemble</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRpsLoteId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Return ##super(pRpsLoteId)
]]></Implementation>
</Method>

<Method name="WsConfirmarEnvioRps">
<Description>
Confirma o envio da RPS pelo Ensemble
Customização: Registrar no RPS novamente o status "Envio: disponível integração" juntamente com o erro apresentado, caso haja falha de comunicação com a NDD.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNotaFiscalId:%String,pXmlEnviado:%String,pStatus:%String,pErroMensagem:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ##class(interoperability.NFSe.integracao.Emissao).ConfirmarEnvioRps(pNotaFiscalId, pXmlEnviado, pStatus, pErroMensagem)
]]></Implementation>
</Method>

<Method name="WsRetornoRpsEmissao">
<Description>
Resultado da conversão da RPS.
Customização: Cria registro de conciliação caso flag pCriarConciliacao = 1.</Description>
<FormalSpec>pNotaFiscalId:%String,pSituacao:%Boolean,pNfseNumero:%String,pNfseCodigoVerificacao:%String,pNfseData:%String,pNfseHora:%String,pEventoCodigo:%String,pEventoDescricao:%String,pEventoCorrecao:%String,pRetornoOrigem:%String,pXmlRetornado:%String,pEventoAlertaCodigo:%String,pEventoAlertaDescricao:%String,pNumeroRPSGerado:%String="",pUrlImpressao:%String="",pCriarConciliacao:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set retorno = ##super(pNotaFiscalId, pSituacao, pNfseNumero, pNfseCodigoVerificacao, pNfseData, pNfseHora, pEventoCodigo, pEventoDescricao, pEventoCorrecao, pRetornoOrigem, pXmlRetornado, pEventoAlertaCodigo, pEventoAlertaDescricao, pNumeroRPSGerado,pUrlImpressao)
	
	If ((retorno) && (pCriarConciliacao = "1")) Do ##class(customizacao.integracao.nfse.iu.codigo.monitoria.PessoaJuridica).CriarRegistroConciliacao(pNotaFiscalId)
	
	Quit retorno
]]></Implementation>
</Method>

<Method name="WsGetNfseLoteCancelamentoCustomizado">
<Description>
Gera e retorna o lote com as NFSe que devem ser canceladas
Customização: Alterar a busca de cancelamento para seguir o mesmo layout de emissão.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%String</FormalSpec>
<ReturnType>interoperability.NFSe.xml.Cancelamento</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ##class(interoperability.NFSe.integracao.Cancelamento).GetNfseLoteCancelamentoCustomizado(pLocalIntegracao)
]]></Implementation>
</Method>

<Method name="WsGetNfseLoteCancelamento">
<Description>
Gera e retorna o lote com as NFSe que devem ser canceladas
Customização: Para notas com Status "Conciliado", bloquear cancelamento e registrar mensagem "não é possível cancelar o RPS pois este já foi conciliado" no histórico do RPS.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%String</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.CancelamentoNFSeLote</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ##class(interoperability.NFSe.integracao.Cancelamento).GetNfseLoteCancelamento(pLocalIntegracao)
]]></Implementation>
</Method>

<Method name="WsConfirmarRecNfseLote">
<Description>
Confirma o recebimento do lote pelo Ensemble</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNfseLoteId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Return ##super(pNfseLoteId)
]]></Implementation>
</Method>

<Method name="WsConfirmarEnvioNfse">
<Description>
Confirma o envio da NFSe pelo Ensemble</Description>
<FormalSpec>pNotaFiscalId:%String,pXmlEnviado:%String,pStatus:%String,pErroMensagem:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Return ##super(pNotaFiscalId, pXmlEnviado, pStatus, pErroMensagem)
]]></Implementation>
</Method>

<Method name="WsRetornoNfseCancelamento">
<Description>
Resultado do cancelamento da NFSe.
Customização: Para notas com Status "Conciliado", alterar Status para "Cancelado" independente do retorno do terceiro, e registrar erro de cancelamento no histórico do RPS.</Description>
<FormalSpec>pNotaFiscalId:%String,pSituacao:%Boolean,pNfseCodigoCancelamento:%String,pNfseCancelamentoData:%String,pNfseCancelamentoHora:%String,pEventoCodigo:%String,pEventoDescricao:%String,pEventoCorrecao:%String,pRetornoOrigem:%String,pXmlRetornado:%String,pEventoAlertaCodigo:%String,pEventoAlertaDescricao:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	Quit ##class(interoperability.NFSe.integracao.Cancelamento).RetornoNfseCancelamento(pNotaFiscalId, pSituacao, pNfseCodigoCancelamento, pNfseCancelamentoData, pNfseCancelamentoHora, pEventoCodigo, pEventoDescricao, pEventoCorrecao, pRetornoOrigem, pXmlRetornado, pEventoAlertaCodigo, pEventoAlertaDescricao)
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSe.integracao.Cancelamento">
<Super>s01.util.b2b.NFSe.integracao.Cancelamento</Super>
<TimeChanged>66730,42152.081087</TimeChanged>
<TimeCreated>66667,42593.987416</TimeCreated>

<Parameter name="DOMAIN">
<Type>STRING</Type>
<Default>SCSDOMAIN</Default>
</Parameter>

<Method name="GetNfseLoteCancelamentoCustomizado">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%Integer</FormalSpec>
<ReturnType>interoperability.NFSe.xml.Cancelamento</ReturnType>
<Implementation><![CDATA[
	Try
	{
		TSTART
		
		#DIM listaCancelamento As s01.util.b2b.NFSe.xml.CancelamentoNFSeLote = ##class(s01.util.b2b.NFSe.integracao.Cancelamento).GetNfseLoteCancelamento(pLocalIntegracao)
		Set objRetorno = ##class(interoperability.NFSe.xml.Cancelamento).%New()
		
		Set qtdNfse = listaCancelamento.ListaNfse.Count()
		
		For cNfse=1:1:qtdNfse
		{
			#DIM objNfse As s01.util.b2b.NFSe.xml.CancelamentoNFSe = listaCancelamento.ListaNfse.GetAt(cNfse)
			
			Set objNotaFiscal = ##class(dado.TblNotaFiscal).%OpenId(objNfse.NotaFiscalId)
			If '$ISOBJECT(objNotaFiscal) Continue
			
			Set objConfigNFSe  = objNotaFiscal.EmpresaId.ConfigNotaFiscalEletronicaId
			
			Set PrestadorCPF         = ""
			Set PrestadorCNPJ        = objNotaFiscal.EmpresaCNPJ
			Set PrestadorRazaoSocial = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EmpresaRazaoSocial)
			
			Set objRetorno.RpsLoteId = objNotaFiscal.RpsEmissaoLoteId.%Id()
			Set objRetorno.RpsLoteNumero = objNotaFiscal.RpsEmissaoLoteId.LoteNumero
			Set objRetorno.RpsQuantidade = qtdNfse
			
			Set objRps = ##class(s01.util.b2b.NFSe.xml.EmissaoRps).%New()
			
			Set objRps.NotaFiscalId = objNotaFiscal.%Id()
			Set objRps.RpsNumero = objNotaFiscal.NumeroRPS
			Set objRps.RpsTipo = 1
			Set objRps.RpsDataEmissao = ##class(s00.util.DataHora).LogicalToOdbc(objNotaFiscal.DataEmissaoRPS)
			Set objRps.RpsHoraEmissao = ##class(s00.util.DataHora).LogicalToDisplay(objNotaFiscal.HoraEmissaoRPS,"hora")
			Set objRps.RpsStatus = 1
			
			If (objNotaFiscal.OsId)
			{
				Set objOs = ##class(dado.ArqOrdemServico).%OpenId(objNotaFiscal.OsId.%Id())
				If '$ISOBJECT(objOs) Continue
				
				Set objRps.TomadorNome = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.Nome)
				Set objRps.TomadorTipoDocumento = objOs.Paciente.PessoaFisica.TipoDocEstrangeiro
				Set objRps.TomadorNumDocumento = objOs.Paciente.PessoaFisica.Passaporte
				Set objRps.TomadorEstrangeiro = objOs.Paciente.PessoaFisica.Nacionalidade
				Set objRps.TomadorCpf = objOs.Paciente.PessoaFisica.Cpf
				Set objRps.TomadorEmail = objOs.Paciente.PessoaFisica.Email

				If (objRps.TomadorEstrangeiro)
				{
					Set objRps.TomadorEnderecoCep = objOs.Paciente.PessoaFisica.EstrangeiroCodigoPostal1
					Set objRps.TomadorEnderecoLogradouro = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EstrangeiroLogradouro1)
					Set objRps.TomadorEnderecoNumero = objOs.Paciente.PessoaFisica.EstrangeiroNumero
					Set objRps.TomadorEnderecoBairro = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EstrangeiroLogradouro2)
					Set objRps.TomadorEnderecoCidadeDescricao = ##class(dado.TblCepLocalidade).CidadeDescricaoGetStored(objOs.Paciente.PessoaFisica.EstrangeiroCidade)
					Set objRps.TomadorEnderecoCidadeIBGE = ""
					Set objRps.TomadorEnderecoCidadeSIAFI = ""
					Set objRps.TomadorEnderecoEstado = objOs.Paciente.PessoaFisica.EstrangeiroEstado
					Set objRps.TomadorEnderecoPaisDescricao = objOs.Paciente.PessoaFisica.EstrangeiroPaisId.Descricao
					Set objRps.TomadorEnderecoPaisBACEN = objOs.Paciente.PessoaFisica.EstrangeiroPaisId.CodigoBCB
					Set objRps.TomadorEnderecoComplemento = ""
					Set objRps.TomadorEnderecoObservacao = ""
				}
				Else
				{
					Set objRps.TomadorEnderecoCep = objOs.Paciente.PessoaFisica.EnderecoCep.GetAt(1)
					Set objRps.TomadorEnderecoLogradouro = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EnderecoLogradouro.GetAt(1))
					Set objRps.TomadorEnderecoNumero = objOs.Paciente.PessoaFisica.EnderecoNumero.GetAt(1)
					Set objRps.TomadorEnderecoBairro = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EnderecoBairro.GetAt(1))
					Set objRps.TomadorEnderecoCidadeDescricao = ##class(dado.TblCepLocalidade).CidadeDescricaoGetStored(objOs.Paciente.PessoaFisica.EnderecoCidade.GetAt(1))
					Set objRps.TomadorEnderecoCidadeIBGE = ##class(dado.TblCepLocalidade).CodigoIBGEGetStored(objOs.Paciente.PessoaFisica.EnderecoCidade.GetAt(1))
					Set objRps.TomadorEnderecoCidadeSIAFI = ##class(dado.TblCepLocalidade).CodigoSIAFIGetStored(objOs.Paciente.PessoaFisica.EnderecoCidade.GetAt(1))
					Set objRps.TomadorEnderecoEstado = objOs.Paciente.PessoaFisica.EnderecoEstado.GetAt(1)
					Set objRps.TomadorEnderecoPaisDescricao = objOs.Paciente.PessoaFisica.EnderecoPais.GetAt(1)
					Set objRps.TomadorEnderecoPaisBACEN = ##class(dado.TblPais).CodigoBCBGetStored(objOs.Paciente.PessoaFisica.EnderecoPais.GetAt(1))
					Set objRps.TomadorEnderecoComplemento = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EnderecoComplemento.GetAt(1))
					Set objRps.TomadorEnderecoObservacao = ""
				}
				
				Set objRps.TomadorTelefoneDDD = objOs.Paciente.PessoaFisica.TelefoneDdd.GetAt(1)
				Set objRps.TomadorTelefoneDDI = objOs.Paciente.PessoaFisica.TelefoneDdi.GetAt(1)
				Set objRps.TomadorTelefoneNumero = objOs.Paciente.PessoaFisica.TelefoneNumero.GetAt(1)
				Set objRps.TomadorTelefoneObservacao = objOs.Paciente.PessoaFisica.TelefoneObservacao.GetAt(1)
				
				Set objRps.OrdemServico = objNotaFiscal.OsId.CodigoOs
				Set objRps.UnidadeColetaId = objNotaFiscal.OsId.PostoGetObjectId()
				Set objRps.AtendenteCodigo = objNotaFiscal.OsId.Recepcionista.%Id()
				Set objRps.AtendenteNome = objNotaFiscal.OsId.Recepcionista.PessoaFisica.Nome
				
				Set objRps.dadosCadastrais = ##class(s01.util.b2b.NFSe.integracao.Emissao).PreencherDadosCadastrais(objNotaFiscal.OsIdGetObjectId())
				
				//Se for humano passa o ID, mas se for animal passa CPF do proprietário
				Set objRps.ResponsavelId = objNotaFiscal.OsId.Paciente.%Id()
				
				If (objNotaFiscal.OsId.Categoria = 2)
				{
					Set objRps.ResponsavelId = objNotaFiscal.OsId.Proprietario.PessoaFisica.Cpf
				}
			}
			Else
			{
				Set objRps.TomadorNome = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.NomeDependente)
				Set objRps.TomadorInscricaoMunicipal = objNotaFiscal.InscricaoMunicipalDependente
				Set objRps.TomadorInscricaoEstadual = objNotaFiscal.InscricaoEstadualDependente
				Set objRps.TomadorEstrangeiro = objNotaFiscal.Nacionalidade
				Set objRps.TomadorTipo = objNotaFiscal.Tipo
				Set objRps.TomadorCnpj = objNotaFiscal.CpfDependente
				Set objRps.TomadorEmail = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EmailDependente)
				Set objRps.TomadorEnderecoCep              = objNotaFiscal.EnderecoCep
				Set objRps.TomadorEnderecoLogradouro       = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EnderecoLogradouro)
				Set objRps.TomadorEnderecoNumero           = objNotaFiscal.EnderecoNumero
				Set objRps.TomadorEnderecoBairro           = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EnderecoBairroDescricao)
				Set objRps.TomadorEnderecoCidadeDescricao  = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EnderecoCidadeDescricao)
				Set objRps.TomadorEnderecoCidadeIBGE       = ##class(dado.TblCepLocalidade).CodigoIBGEGetStored(objNotaFiscal.EnderecoCidade)
				Set objRps.TomadorEnderecoCidadeSIAFI      = ##class(dado.TblCepLocalidade).CodigoSIAFIGetStored(objNotaFiscal.EnderecoCidade)
				Set objRps.TomadorEnderecoEstado           = objNotaFiscal.EnderecoEstado
				Set objRps.TomadorEnderecoPaisDescricao    = objNotaFiscal.EnderecoPais
				Set objRps.TomadorEnderecoPaisBACEN        = ##class(dado.TblPais).CodigoBCBGetStored(objNotaFiscal.EnderecoPais)
				Set objRps.TomadorEnderecoComplemento      = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EnderecoComplemento)
				Set objRps.TomadorEnderecoObservacao       = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EnderecoObservacao)
				Set telefoneDDI = "00"
				Set telefoneDDD = "00"
				Set telefoneNumero = "00000000"
				
				Set:(objNotaFiscal.TelefoneDdiTomador) telefoneDDI = objNotaFiscal.TelefoneDdiTomador
				Set:(objNotaFiscal.TelefoneDddTomador) telefoneDDD = objNotaFiscal.TelefoneDddTomador
				Set:(objNotaFiscal.TelefoneNumeroTomador) telefoneNumero = objNotaFiscal.TelefoneNumeroTomador
				
				Set objRps.TomadorTipoDocumento            = objNotaFiscal.TipoDocEstrangeiro
				Set objRps.TomadorNumDocumento             = objNotaFiscal.DocEstrangeiro
				Set objRps.TomadorTelefoneDDI              = telefoneDDI
				Set objRps.TomadorTelefoneDDD              = telefoneDDD
				Set objRps.TomadorTelefoneNumero           = telefoneNumero
				Set objRps.TomadorTelefoneObservacao       = ""
			}
			
			Set objRps.PrestadorInscricaoMunicipal     = objNotaFiscal.EmpresaInscricaoMunicipal
			Set objRps.PrestadorInscricaoEstadual      = objNotaFiscal.EmpresaInscricaoEstadual
			Set objRps.PrestadorCPF                    = PrestadorCPF
			Set objRps.PrestadorCnpj                   = PrestadorCNPJ
			Set objRps.PrestadorCnes                   = objNotaFiscal.EmpresaCNES
			Set objRps.PrestadorEmail                  = ""
			Set objRps.PrestadorEnderecoCep            = objNotaFiscal.EmpresaEnderecoCep
			Set objRps.PrestadorEnderecoLogradouro     = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EmpresaEnderecoLogradouro)
			Set objRps.PrestadorEnderecoNumero         = objNotaFiscal.EmpresaEnderecoNumero
			Set objRps.PrestadorEnderecoBairro         = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EmpresaEnderecoBairro)
			Set objRps.PrestadorEnderecoCidadeDescricao= ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EmpresaEnderecoCidade)
			Set objRps.PrestadorEnderecoCidadeIBGE     = ##class(dado.TblCepLocalidade).CodigoIBGEGetStored(objNotaFiscal.EmpresaId.PessoaJuridica.EnderecoCidade.GetAt(1))
			Set objRps.PrestadorEnderecoCidadeSIAFI    = ##class(dado.TblCepLocalidade).CodigoSIAFIGetStored(objNotaFiscal.EmpresaId.PessoaJuridica.EnderecoCidade.GetAt(1))
			Set objRps.PrestadorEnderecoEstado         = objNotaFiscal.EmpresaEnderecoEstado
			Set objRps.PrestadorEnderecoPaisDescricao  = "Brasil"
			Set objRps.PrestadorEnderecoPaisBACEN      = "001508"
			Set objRps.PrestadorEnderecoComplemento    = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EnderecoComplemento)
			Set objRps.PrestadorTelefoneDDI            = ##class(s01.util.b2b.NFSe.Util).GetApenasNumeros(objNotaFiscal.EmpresaTelefoneDdi)
			Set objRps.PrestadorTelefoneDDD            = ##class(s01.util.b2b.NFSe.Util).GetApenasNumeros(objNotaFiscal.EmpresaTelefoneDdd)
			Set objRps.PrestadorTelefoneNumero         = ##class(s01.util.b2b.NFSe.Util).GetApenasNumeros(objNotaFiscal.EmpresaTelefoneNumero)
			Set objRps.PrestadorTelefoneObservacao     = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.EmpresaTelefoneObservacao)
			
			// Valores da nota
			Set objRps.ValorTotal                      = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(objNotaFiscal.ValorTotal, 2)
			Set objRps.ValorLiquido                    = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(objNotaFiscal.ValorLiquido, 2)
			
			// Deixa os impostos com valor padrão zerado
			Set objRps.ValorPis                        = "0.00"
			Set objRps.ValorCofins                     = "0.00"
			Set objRps.ValorInss                       = "0.00"
			Set objRps.ValorIr                         = "0.00"
			Set objRps.ValorIss                        = "0.00"
			Set objRps.ValorCsll                       = "0.00"
			Set objRps.ValorIcms                       = "0.00"
			Set objRps.OutrasRetencoes                 = "0.00"
			Set objRps.AliquotaPis                     = "0"
			Set objRps.AliquotaCofins                  = "0"
			Set objRps.AliquotaInss                    = "0"
			Set objRps.AliquotaIr                      = "0"
			Set objRps.AliquotaIss                     = "0"
			Set objRps.AliquotaCsll                    = "0"
			Set objRps.AliquotaIcms                    = "0"
			Set objRps.AliquotaOutrasRetencoes         = "0"
			Set objRps.DescontoCondicionado            = "0"
			Set objRps.DescontoIncondicionado          = "0"

			Set objProxyImposto  = ##class(%ZEN.proxyObject).%New()
			Set lTiposImpostos   = ""
			Set lTodosImpostosId = ""
			
			// Busca os impostos selecionados na configuração
			Set sqlImpostosConfig = " SELECT TipoImposto As TipoImposto, AcrescimoDescontoId As ImpostoId FROM dado.TblConfigNFSeImposto WHERE ConfigNFSeId = ? ORDER BY TipoImposto, AcrescimoDescontoId "
			#DIM stmImpostoConfigResult As %SQL.StatementResult = ##class(s00.util.Padrao).ExecuteStatement(.stmImpostoConfig, 0, 1, sqlImpostosConfig, objConfigNFSe.%Id())
			While (stmImpostoConfigResult.%Next()){
				Set TipoImposto = stmImpostoConfigResult.TipoImposto
				Set ImpostoId   = stmImpostoConfigResult.ImpostoId
				
				If ('$LF(lTiposImpostos, TipoImposto)){
					Set $LIST(lTiposImpostos, $LISTLENGTH(lTiposImpostos) + 1) = TipoImposto
				}
				
				If ('$LISTFIND(lTodosImpostosId, ImpostoId)){
					Set $LIST(lTodosImpostosId, $LISTLENGTH(lTodosImpostosId) + 1) = ImpostoId
				}
				
				Set lImpostoId = $PROPERTY(objProxyImposto, TipoImposto)
				If ('$LISTFIND(lImpostoId, ImpostoId)){
					Set $LIST(lImposto, $LISTLENGTH(lImpostoId) + 1) = ImpostoId
				}
				Set $PROPERTY(objProxyImposto, TipoImposto) = lImposto
			}
			
			Set objProxyImpostoSufixo        = ##class(%ZEN.proxyObject).%New()
			Set objProxyImpostoSufixo.PIS    = "Pis"
			Set objProxyImpostoSufixo.COFINS = "Cofins"
			Set objProxyImpostoSufixo.ISSQN  = "Iss"
			Set objProxyImpostoSufixo.ICMS   = "Icms"
			Set objProxyImpostoSufixo.IR     = "Ir"
			Set objProxyImpostoSufixo.CSLL   = "Csll"
			Set objProxyImpostoSufixo.INSS   = "Inss"
			
			Set valorTotalDescontos = 0
			
			Set notaFiscalAcrescimoDescontoService = ##class(s01.service.notaFiscalAcrescimoDesconto.NotaFiscalAcrescimoDescontoService).%New()
			Set notaFiscalAcrescimosDescontos = notaFiscalAcrescimoDescontoService.GetStatementResultNotaFiscalAcrescimosDescontos(objRps.NotaFiscalId)
			
			While (notaFiscalAcrescimosDescontos.%Next()){
				Set descontoId    = notaFiscalAcrescimosDescontos.AcrescimoDesconto
				Set descontoValor = notaFiscalAcrescimosDescontos.Valor
				
				If descontoValor < 0 {
					Set descontoValor = -(descontoValor)
				}
				
				Set adicionarDesconto = 1
				
				Set pos = $LISTFIND(lTodosImpostosId, descontoId)
				If (pos > 0){
					FOR nImposto=1:1:$LISTLENGTH(lTiposImpostos){
						Set TipoImposto   = $LISTGET(lTiposImpostos, nImposto)
						Set ImpostoSufixo = $PROPERTY(objProxyImpostoSufixo, TipoImposto)
						
						Set lImpostoId    = $PROPERTY(objProxyImposto, TipoImposto)
						If ('$LISTFIND(lImpostoId, descontoId)) CONTINUE
						
						Set descontoValor    = +(descontoValor)
						Set descontoAliquota = 0
						If (descontoValor > 0){
							Set descontoAliquota = ((100 * descontoValor) / objRps.ValorTotal)
						}
						
						// Calcula a aliquota do imposto
						Set $PROPERTY(objRps, "Valor" _ ImpostoSufixo)    = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(descontoValor, 2)
						Set $PROPERTY(objRps, "Aliquota" _ ImpostoSufixo) = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(descontoAliquota, 2)
						Set adicionarDesconto = 0
						
						// Remove o tipo de imposto já preenchido da lista
						Set $LIST(lTiposImpostos, nImposto, nImposto) = ""
						
						QUIT
					}
				}
				If (adicionarDesconto) {
					Set valorTotalDescontos = (valorTotalDescontos + descontoValor)
				}
			}
			
				
				
			Set objRps.ValorDeducoes                   = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(valorTotalDescontos, 2)
			
			Set objRps.IssExigibilidade                = objConfigNFSe.IssExigibilidade
			Set objRps.IssRetido                       = objConfigNFSe.IssRetido
			Set objRps.IssRetidoResponsavel            = objConfigNFSe.ResponsavelRetencaoISS
			Set objRps.ItemListaServico                = objConfigNFSe.CodigoAtividade
			Set objRps.RegimeEspecialDeTributacao      = objConfigNFSe.RegimeEspecialTributacao
			Set objRps.OptanteSimplesNacional          = objConfigNFSe.OptanteSimplesNacional
			Set objRps.IncentivoFiscal                 = objConfigNFSe.IncentivoFiscal
			Set objRps.CfopLocal                       = objConfigNFSe.CodigoCFOPLocal
			Set objRps.CfopExterno                     = objConfigNFSe.CodigoCFOPExterno
			Set objRps.RegimeTributario                = objConfigNFSe.RegimeTributario
			Set objRps.PisSituacaoTributaria           = objConfigNFSe.SituacaoTributariaPIS
			Set objRps.CofinsSituacaoTributaria        = objConfigNFSe.SituacaoTributariaCOFINS
			Set objRps.TipoRecolhimento                = objConfigNFSe.TipoRecolhimento
			Set objRps.Operacao                        = objConfigNFSe.Operacao
			Set objRps.Tributacao                      = objConfigNFSe.Tributacao
			Set objRps.CnaeDiagnostico                 = objConfigNFSe.CnaeDiagnostico
			Set objRps.CnaeVacina                      = objConfigNFSe.CnaeVacina
			Set objRps.CodigoAtividade                 = objConfigNFSe.CodigoAtividade
			Set objRps.AliquotaAtividade               = objConfigNFSe.AliquotaAtividade
			
			// Gera a observação
			Set ObservacaoRPS = ""
			Set IdTemplateGeral = ""
			
			If ($ISOBJECT(objOs)){
				If ($ISOBJECT(objConfigNFSe.ObservacaoNotaOsTemplateId)){
					Set IdTemplateGeral = objConfigNFSe.ObservacaoNotaOsTemplateIdGetObjectId()
				}
			}Else{
				If ($ISOBJECT(objConfigNFSe.ObservacaoNotaFaturaTemplateId)){
					Set IdTemplateGeral = objConfigNFSe.ObservacaoNotaFaturaTemplateIdGetObjectId()
				}
			}
			
			Set codigoOs = ""
			If (IdTemplateGeral '= ""){
				Set objDados = ##class(%ArrayOfDataTypes).%New()
				Do objDados.SetAt(objNotaFiscal, "objRps")
				Do objDados.SetAt(1, "integracao")
				Set osId = ""
				If $ISOBJECT(objNotaFiscal.OsId) {
					Set osId = objNotaFiscal.OsId.%Id()
					Set codigoOs = objNotaFiscal.OsId.CodigoOs
				}
				
				Set listaIdOsProcedimento = 0
				If (((objNotaFiscal.TipoNota = 3) || (objNotaFiscal.TipoNota = 4)) && ((objNotaFiscal.Tipo = "P") || (objNotaFiscal.Tipo = "J"))){
					Set sql = "SELECT LIST(Id) AS Ids FROM dado.TblOsProcedimento WHERE Os = ? AND FontePagadoraId->TipoConvenio = 'B'"
					Set stmt = ##class(%SQL.Statement).%New(0)
					$$$THROWONERROR(sc,stmt.%Prepare(sql))
					$$$THROWONERROR(rs,stmt.%Execute(osId))
					While rs.%Next(){
						If (rs.Ids '= ""){
							Set listaIdOsProcedimento = rs.Ids
						}
					}
				}
				Set ObservacaoRPS = ##class(s01.relatorio.geral.Geral).GerarTexto(osId, IdTemplateGeral, "", listaIdOsProcedimento, .pErro, objDados, "", "", 1, 1, 1, 0)
				If (pErro '= ""){
					Do ##class(s00.util.Padrao).ApresentaExcecao(##class(s00.util.Excecao).%New($$$Text("Erro ao gerar observacao: ") _ pErro, "", "GerarRpsLote"), 2)
					CONTINUE
				}
			}
			Set objRps.Observacao = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(ObservacaoRPS)
			Set objRps.ObservacaoNota = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objNotaFiscal.Observacao)
			
			Set segmento = 1
			If (($ISOBJECT(objOs)) && (objConfigNFSe.TipoDescricaoNFSe = 2)) {
				// Preenche os itens da Nota fiscal
				Set sqlItens = 
						" SELECT "_
							" Os->Segmento As OsSegmento, " _
							" CASE %INTERNAL(TipoCobranca) " _
								" WHEN 1 THEN ( " _
									" CASE %INTERNAL(Os->Segmento) " _
										" WHEN 1 THEN Procedimento " _
										" WHEN 2 THEN VacinaId " _
									" END " _
								" ) " _
								" WHEN 2 THEN Adicional " _
							" END As Codigo, " _
							" CASE %INTERNAL(TipoCobranca) " _
								" WHEN 1 THEN ( " _
									" CASE %INTERNAL(Os->Segmento) " _
										" WHEN 1 THEN (SELECT Mnemonico || ' - ' || Descricao FROM dado.TblExame WHERE Id = Procedimento) " _
										" WHEN 2 THEN (SELECT Mnemonico || ' - ' || Descricao FROM dado.TblVacina WHERE Id = VacinaId) " _
									" END " _
								" ) " _
								" WHEN 2 THEN (SELECT Id || ' - ' || Descricao FROM dado.TblAdicional WHERE Id = Adicional) " _
							" END As Descricao, " _
							" %INTERNAL(ValorBrutoBalcao) As ValorBruto, " _ // Valor sem descontos
							" %INTERNAL(LiquidoBalcao) As ValorLiquido, " _   // Valor com descontos
							" %INTERNAL(TipoCobranca) As TipoCobranca " _
						" FROM dado.TblOsCobranca " _
						" WHERE Os = ? AND ValorBrutoBalcao > 0  AND FontePagadora IN (SELECT FontePagadoraId FROM dado.TblNotaFiscalFontePagadora WHERE NotaFiscalId = ?) " _
						" ORDER BY TipoCobranca "
				#DIM stmResultItens As %SQL.StatementResult = ##class(s00.util.Padrao).ExecuteStatement(.stmItens, 0, 1, sqlItens, objOs.%Id(), objRps.NotaFiscalId)

				Set sqlTransacao = "SELECT " _
									"(SELECT TipoPagamento FROM dado.TblFormaPagamento WHERE ID = tr.TipoPagamento) as FormaPagamento, "_
									"TipoPagamento,"_
									"Agencia,"_
									"Banco,"_
									"ContaCorrente,"_
									"Cheque,"_
									"Valor "_
									"FROM dado.TblTransacao as tr "_
									"WHERE Os = ? ORDER BY ID DESC"
				
				Set rsetTransacao = ##class(s00.util.Padrao).ExecuteStatement(,,,sqlTransacao,objOs.%Id())
				
				While (stmResultItens.%Next()){
					Set OsSegmento        = stmResultItens.OsSegmento
					Set Codigo            = stmResultItens.Codigo
					Set Descricao         = stmResultItens.Descricao
					Set ValorBruto        = stmResultItens.ValorBruto
					Set ValorLiquido      = stmResultItens.ValorLiquido
					Set TipoCobranca      = stmResultItens.TipoCobranca
					Set Quantidade        = 1
					Set ValorBrutoTotal   = (ValorBruto * Quantidade)
					Set ValorLiquidoTotal = (ValorLiquido * Quantidade)
					
					Set patternDescricao = ""
					If (TipoCobranca = 1) {
						If (OsSegmento = 1) {
							Set patternDescricao = objConfigNFSe.DescServDetProcedimento
						}ElseIf (OsSegmento = 2){
							Set patternDescricao = objConfigNFSe.DescServDetVacina
							Set segmento = 2
						}
					}ElseIf (TipoCobranca = 2){
						Set patternDescricao = objConfigNFSe.DescServDetAdicional
					}
					
					// Caso exista uma descrição personalizada será utilizada como molde
					If (patternDescricao '= ""){
						Set descricaoTmp = patternDescricao
						Set descricaoTmp = $REPLACE(descricaoTmp, "<DESCRICAO>", Descricao)
						Set descricaoTmp = $REPLACE(descricaoTmp, "<CODIGO>", Codigo)
						Set descricaoTmp = $REPLACE(descricaoTmp, "<CODIGOOS>", codigoOs)
						Set Descricao    = descricaoTmp
					}
					
					Set objRpsItem = ##class(s01.util.b2b.NFSe.xml.EmissaoRpsItem).%New()
					Set objRpsItem.Descricao     = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(Descricao)
					Set objRpsItem.Quantidade    = Quantidade
					Set objRpsItem.ValorBrutoUnitario = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(ValorBruto, 2)
					Set objRpsItem.ValorLiquidoUnitario = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(ValorLiquido, 2)
					Set objRpsItem.ValorTotal    = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(ValorBrutoTotal, 2)
										
					If rsetTransacao.%Next(){					
						Set objRpsItem.TipoPagamento 		= rsetTransacao.FormaPagamento
						Set objRpsItem.CartaoAdministradora = rsetTransacao.TipoPagamento
						Set objRpsItem.CartaoNumero 		= ""
						Set objRpsItem.CartaoAgencia 		= ""
						
						If (rsetTransacao.FormaPagamento = "2") || (rsetTransacao.FormaPagamento = "3")
						{ 
							;Cheque/Cheque pré-datado
							Set objRpsItem.ChequeConta 			= rsetTransacao.ContaCorrente
							Set objRpsItem.CartaoAgencia 		= rsetTransacao.Banco
							;Não é certo pegar o Rg do paciente, mas deixei assim para a fase de testes. - Daniel
							Set objRpsItem.ChequeRg 			= objNotaFiscal.RgDependente
							Set objRpsItem.ChequeTelefone 		= ""
							;Mesma situação do Rg. - Daniel
							Set objRpsItem.ChequeEmitente 		= objNotaFiscal.NomeDependente
						}Elseif (rsetTransacao.FormaPagamento = "4") || (rsetTransacao.FormaPagamento = "5")
						{ //Cartao Credito/Debito
							Set objRpsItem.CartaoNumero 	= rsetTransacao.Cheque
							Set objRpsItem.CartaoAgencia	= rsetTransacao.Banco
						}
					}
					
					Do objRps.Itens.Insert(objRpsItem)
				}
			}Else{
				Set objRpsItem = ##class(s01.util.b2b.NFSe.xml.EmissaoRpsItem).%New()
				
				Set descricaoNfe = ""
				Set patternDescricao = ""
				
				If (objNotaFiscal.TipoSegmentoEmissao = 1){ // procedimento
					Set patternDescricao = objConfigNFSe.DescServConsProcedimento
				}
				ElseIf (objNotaFiscal.TipoSegmentoEmissao = 2){ // vacina
					Set patternDescricao = objConfigNFSe.DescServConsVacina
					Set segmento = 2
				}
				ElseIf (objNotaFiscal.TipoSegmentoEmissao = 3){ // ambos
					Set patternDescricao = objConfigNFSe.DescServConsAmbos
				}
				
				// Caso exista uma descrição personalizada será utilizada como molde
				If (patternDescricao '= ""){
					Set descricaoTmp = patternDescricao
					Set descricaoTmp = $REPLACE(descricaoTmp, "<CODIGOOS>", codigoOs)
					Set descricaoNfe    = descricaoTmp
				}
				
				Set objRpsItem.Descricao = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(descricaoNfe)
				Set objRpsItem.Quantidade    = 1
				Set objRpsItem.ValorBrutoUnitario = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(objRps.ValorTotal, 2)
				Set objRpsItem.ValorLiquidoUnitario = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(objRps.ValorLiquido, 2)
				Set objRpsItem.ValorTotal    = ##class(s01.util.b2b.NFSe.Util).AjustarCasasDecimais(objRps.ValorTotal, 2)
				Do objRps.Itens.Insert(objRpsItem)
			}
			
			Do objRetorno.ListaRps.Insert(objRps)
		}
		
		TCOMMIT
	}
	Catch(ex)
	{
		TROLLBACK
		
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
		Do objRetorno.ListaRps.Clear()
	}	
	
	Return objRetorno
]]></Implementation>
</Method>

<Method name="GetNfseLoteCancelamento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%Integer</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.CancelamentoNFSeLote</ReturnType>
<Implementation><![CDATA[
	Try
	{
		#DIM objRetorno As s01.util.b2b.NFSe.xml.CancelamentoNFSeLote = ##super(pLocalIntegracao)
		
		Set qtdNfse = objRetorno.ListaNfse.Count()
				
		For cNfse=1:1:qtdNfse
		{
			If (cNfse > qtdNfse) Quit
					
			#DIM objNfse As s01.util.b2b.NFSe.xml.CancelamentoNFSe = objRetorno.ListaNfse.GetAt(cNfse)
			
			Set objNotaFiscal = ##class(dado.TblNotaFiscal).%OpenId(objNfse.NotaFiscalId)
			If '$ISOBJECT(objNotaFiscal) Continue
			
			Set objConciliacao = ##class(customizacao.integracao.nfse.modelo.dado.TblConciliacao).IdxNotaFiscalOpen(objNfse.NotaFiscalId)
						
			If (($ISOBJECT(objConciliacao)) && ('objConciliacao.PermiteCancelarViaFluxoPadrao))
			{
				Set objNotaFiscal.StatusGeracaoNFe = 4
				$$$THROWONERROR(Status,objNotaFiscal.%Save())
				
				Set mensagemEvento = "Não é possível cancelar este RPS pois o mesmo já foi conciliado."
				
				Do ##class(s01.util.b2b.NFSe.Util).RegistrarEventoDocumento(objNotaFiscal.%Id(),2,"0",mensagemEvento)
				
				Set oid = objRetorno.ListaNfse.RemoveAt(cNfse,.retorno)
				
				If ('retorno)
				{
					Set Status = $$$ERROR($$$GeneralError, "Erro ao remover NF " _ objNotaFiscal.%Id() _ " do lote de cancelamento.")
					Throw ##class(%Exception.StatusException).CreateFromStatus(Status)
				}
				
				Set cNfse = cNfse - 1
				Set qtdNfse = qtdNfse - 1
				
				Continue
			}
			Else
			{
				If ($ISOBJECT(objConciliacao)) 
				{
					Set objConciliacao.PermiteCancelarViaFluxoPadrao = 0
					$$$THROWONERROR(Status,objConciliacao.%Save())
				}
			}
			
			Set objNfse.PrestadorEnderecoCidadeIBGE = ##class(dado.TblCepLocalidade).CodigoIBGEGetStored(objNotaFiscal.EmpresaId.PessoaJuridica.EnderecoCidade.GetAt(1))
		}
		
		If ('qtdNfse) Set objRetorno = ""
	}
	Catch(ex)
	{
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
		Do objRetorno.ListaNfse.Clear()
	}	
	
	Return objRetorno
]]></Implementation>
</Method>

<Method name="RetornoNfseCancelamento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNotaFiscalId:%String,pSituacao:%String,pNfseCodigoCancelamento:%String,pNfseCancelamentoData:%String,pNfseCancelamentoHora:%String,pEventoCodigo:%String="",pEventoDescricao:%String="",pEventoCorrecao:%String="",pRetornoOrigem:%String,pXmlRetornado:%String="",pEventoAlertaCodigo:%String="",pEventoAlertaDescricao:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try
	{
		Set retorno = 1
		
		If (##class(customizacao.integracao.nfse.modelo.dado.TblConciliacao).IdxNotaFiscalExists(pNotaFiscalId)) Set pSituacao = 1
		
		Set retorno = ##super(pNotaFiscalId,pSituacao,pNfseCodigoCancelamento,pNfseCancelamentoData,pNfseCancelamentoHora,pEventoCodigo,pEventoDescricao,pEventoCorrecao,pRetornoOrigem,pXmlRetornado,pEventoAlertaCodigo,pEventoAlertaDescricao)
	}
	Catch(ex)
	{
		Set retorno = 0
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
	}
	
	Return retorno
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSe.integracao.Emissao">
<Super>s01.util.b2b.NFSe.integracao.Emissao</Super>
<TimeChanged>66781,51654.212308</TimeChanged>
<TimeCreated>66667,31905.558724</TimeCreated>

<Method name="GetRpsLoteEmissao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%Integer,pEmpresaCNPJ:%String="",pTipo:%String=""</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.EmissaoRpsLote</ReturnType>
<Implementation><![CDATA[
	Try
	{
		#DIM objRetorno As s01.util.b2b.NFSe.xml.EmissaoRpsLote = ##super(pLocalIntegracao, pEmpresaCNPJ, pTipo)
		
		Set qtdRps = objRetorno.ListaRps.Count()
		
		For cRps=1:1:qtdRps
		{
			#DIM objRps As s01.util.b2b.NFSe.xml.EmissaoRps = objRetorno.ListaRps.GetAt(cRps)
			
			If (objRps.TomadorTipo = "P") || (objRps.TomadorTipo = "CF")
			{
				Set objNotaFiscal = ##class(dado.TblNotaFiscal).%OpenId(objRps.NotaFiscalId)
				If '$ISOBJECT(objNotaFiscal) Continue
				
				If (objNotaFiscal.OsId)
				{
					Set objOs = ##class(dado.ArqOrdemServico).%OpenId(objNotaFiscal.OsId.%Id())
					If '$ISOBJECT(objOs) Continue
					
					Set objRps.TomadorNome = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.Nome)
					Set objRps.TomadorTipoDocumento = objOs.Paciente.PessoaFisica.TipoDocEstrangeiro
					Set objRps.TomadorNumDocumento = objOs.Paciente.PessoaFisica.Passaporte
					Set objRps.TomadorEstrangeiro = objOs.Paciente.PessoaFisica.Nacionalidade
					Set objRps.TomadorCpf = objOs.Paciente.PessoaFisica.Cpf
					Set objRps.TomadorEmail = objOs.Paciente.PessoaFisica.Email
					Set objRps.TomadorEnderecoCep = objOs.Paciente.PessoaFisica.EnderecoCep.GetAt(1)
					Set objRps.TomadorEnderecoLogradouro = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EnderecoLogradouro.GetAt(1))
					Set objRps.TomadorEnderecoNumero = objOs.Paciente.PessoaFisica.EnderecoNumero.GetAt(1)
					Set objRps.TomadorEnderecoBairro = ##class(dado.TblCepBairro).BairroDescricaoGetStored(##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EnderecoBairro.GetAt(1)))
					Set objRps.TomadorEnderecoCidadeDescricao = ##class(dado.TblCepLocalidade).CidadeDescricaoGetStored(objOs.Paciente.PessoaFisica.EnderecoCidade.GetAt(1))
					Set objRps.TomadorEnderecoCidadeIBGE = ##class(dado.TblCepLocalidade).CodigoIBGEGetStored(objOs.Paciente.PessoaFisica.EnderecoCidade.GetAt(1))
					Set objRps.TomadorEnderecoCidadeSIAFI = ##class(dado.TblCepLocalidade).CodigoSIAFIGetStored(objOs.Paciente.PessoaFisica.EnderecoCidade.GetAt(1))
					Set objRps.TomadorEnderecoEstado = objOs.Paciente.PessoaFisica.EnderecoEstado.GetAt(1)
					Set objRps.TomadorEnderecoPaisDescricao = objOs.Paciente.PessoaFisica.EnderecoPais.GetAt(1)
					Set objRps.TomadorEnderecoPaisBACEN = ##class(dado.TblPais).CodigoBCBGetStored(objOs.Paciente.PessoaFisica.EnderecoPais.GetAt(1))
					Set objRps.TomadorEnderecoComplemento = ##class(s01.util.b2b.NFSe.Util).RemoverCaracterEspecialAcentos(objOs.Paciente.PessoaFisica.EnderecoComplemento.GetAt(1))
					Set objRps.TomadorEnderecoObservacao = ""
					Set objRps.TomadorTelefoneDDD = objOs.Paciente.PessoaFisica.TelefoneDdd.GetAt(1)
					Set objRps.TomadorTelefoneDDI = objOs.Paciente.PessoaFisica.TelefoneDdi.GetAt(1)
					Set objRps.TomadorTelefoneNumero = objOs.Paciente.PessoaFisica.TelefoneNumero.GetAt(1)
					Set objRps.TomadorTelefoneObservacao = objOs.Paciente.PessoaFisica.TelefoneObservacao.GetAt(1)
				}
			}
		}
	}
	Catch(ex)
	{
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
		Do objRetorno.ListaRps.Clear()
	}	
	
	Return objRetorno
]]></Implementation>
</Method>

<Method name="ConfirmarEnvioRps">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNotaFiscalId:%String,pXmlEnviado:%String="",pStatus:%String,pErroMensagem:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try
	{
		Set retorno = 1
		
		If (pStatus = 1)
		{
			Set retorno = ##super(pNotaFiscalId,pXmlEnviado,pStatus,pErroMensagem)	
		}
		Else
		{
			Set objNotaFiscal = ##class(dado.TblNotaFiscal).%OpenId(pNotaFiscalId)
			
			If $ISOBJECT(objNotaFiscal)
			{
				Set EventoMensagem = $$$Text("Falha ao enviar para o sistema terceiro. Reinserindo o RPS na fila.")
				
				If (pErroMensagem '= "")
				{
					Set EventoMensagem = EventoMensagem _ ": " _ $CHAR(254) _ pErroMensagem
				}

				Set objNotaFiscal.StatusGeracaoNFe = 0
				
				// Registra o XML enviado.
				Do objNotaFiscal.RpsEmissaoXmlEnvio.Clear()
				Do objNotaFiscal.RpsEmissaoXmlEnvio.Write(pXmlEnviado)
				
				Do ##class(s01.util.b2b.NFSe.Util).RegistrarEventoDocumento(pNotaFiscalId, 1, "0", EventoMensagem, , , , pXmlEnviado)
				$$$THROWONERROR(pSC, objNotaFiscal.%Save())
			}
			Else
			{
				Throw ##class(s00.util.Excecao).%New($$$Text("Nota fiscal não encontrada: ") _ pNotaFiscalId, "", "ConfirmarEnvioRps()")
			}
		}
	}
	Catch(ex)
	{
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
		Set retorno = 0
	}	
	
	Return retorno
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSe.xml.Cancelamento">
<Super>s01.util.b2b.NFSe.xml.EmissaoRpsLote</Super>
<TimeChanged>66693,57674.359493</TimeChanged>
<TimeCreated>66667,43523.271305</TimeCreated>

<Property name="MotivoCancelamento">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="MotivoCancelamento"/>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>
</Class>


<Class name="interoperability.NFSeV2.WebService">
<Super>s01.util.b2b.NFSe.ws.WebService</Super>
<TimeChanged>66781,33949.3006</TimeChanged>
<TimeCreated>66763,57179.965902</TimeCreated>

<Method name="WsGetRpsLoteEmissao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%String,pEmpresaCNPJ:%String="1",pTipo:%String="",pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.EmissaoRpsLote</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pLocalIntegracao,pEmpresaCNPJ,pTipo)
	Set:$ISOBJECT(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pLocalIntegracao,pEmpresaCNPJ,pTipo)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsGetRpsLoteEmissaoV2">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%String,pEmpresaCNPJ:%String="",pTipo:%String="",pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.EmissaoRpsLoteV2</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pLocalIntegracao,pEmpresaCNPJ,pTipo)
	Set:$ISOBJECT(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pLocalIntegracao,pEmpresaCNPJ,pTipo)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsConfirmarRecRpsLote">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRpsLoteId:%String,pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pRpsLoteId)
	Set:(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pRpsLoteId)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsConfirmarEnvioRps">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNotaFiscalId:%String,pXmlEnviado:%String,pStatus:%String,pErroMensagem:%String,pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pNotaFiscalId,pXmlEnviado,pStatus,pErroMensagem)
	Set:(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pNotaFiscalId,pXmlEnviado,pStatus,pErroMensagem)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsRetornoRpsEmissao">
<FormalSpec>pNotaFiscalId:%String,pSituacao:%Boolean,pNfseNumero:%String,pNfseCodigoVerificacao:%String,pNfseData:%String,pNfseHora:%String,pEventoCodigo:%String,pEventoDescricao:%String,pEventoCorrecao:%String,pRetornoOrigem:%String,pXmlRetornado:%String,pEventoAlertaCodigo:%String,pEventoAlertaDescricao:%String,pNumeroRPSGerado:%String="",pUrlImpressao:%String="",pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pNotaFiscalId,pSituacao,pNfseNumero,pNfseCodigoVerificacao,pNfseData,pNfseHora,pEventoCodigo,pEventoDescricao,pEventoCorrecao,pRetornoOrigem,pXmlRetornado,pEventoAlertaCodigo,pEventoAlertaDescricao,pNumeroRPSGerado,pUrlImpressao)
	Set:(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pNotaFiscalId,pSituacao,pNfseNumero,pNfseCodigoVerificacao,pNfseData,pNfseHora,pEventoCodigo,pEventoDescricao,pEventoCorrecao,pRetornoOrigem,pXmlRetornado,pEventoAlertaCodigo,pEventoAlertaDescricao,pNumeroRPSGerado,pUrlImpressao)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsGetNfseLoteCancelamento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLocalIntegracao:%String,pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>s01.util.b2b.NFSe.xml.CancelamentoNFSeLote</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pLocalIntegracao)
	Set:$ISOBJECT(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pLocalIntegracao)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsConfirmarRecNfseLote">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNfseLoteId:%String,pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pNfseLoteId)
	Set:(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pNfseLoteId)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsConfirmarEnvioNfse">
<FormalSpec>pNotaFiscalId:%String,pXmlEnviado:%String,pStatus:%String,pErroMensagem:%String,pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pNotaFiscalId,pXmlEnviado,pStatus,pErroMensagem)
	Set:(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pNotaFiscalId,pXmlEnviado,pStatus,pErroMensagem)
	Return objResposta
]]></Implementation>
</Method>

<Method name="WsRetornoNfseCancelamento">
<FormalSpec>pNotaFiscalId:%String,pSituacao:%Boolean,pNfseCodigoCancelamento:%String,pNfseCancelamentoData:%String,pNfseCancelamentoHora:%String,pEventoCodigo:%String,pEventoDescricao:%String,pEventoCorrecao:%String,pRetornoOrigem:%String,pXmlRetornado:%String,pEventoAlertaCodigo:%String,pEventoAlertaDescricao:%String,pModulosCustomizados:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set objResposta = ##super(pNotaFiscalId,pSituacao,pNfseCodigoCancelamento,pNfseCancelamentoData,pNfseCancelamentoHora,pEventoCodigo,pEventoDescricao,pEventoCorrecao,pRetornoOrigem,pXmlRetornado,pEventoAlertaCodigo,pEventoAlertaDescricao)
	Set:(objResposta) retorno = ##class(interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado).ExecutarModulosCustomizados(pModulosCustomizados,.objResposta,pNotaFiscalId,pSituacao,pNfseCodigoCancelamento,pNfseCancelamentoData,pNfseCancelamentoHora,pEventoCodigo,pEventoDescricao,pEventoCorrecao,pRetornoOrigem,pXmlRetornado,pEventoAlertaCodigo,pEventoAlertaDescricao)
	Return objResposta
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSeV2.modulo.AdequarLayoutAgiliBlue">
<Description>
Módulo responsável por adaptar o layout no padrão AgiliBlue nas chamadas de obtenção de lote de rps
Campos alterador: RpsTipo, RegimeEspecialDeTributacao, OptanteSimplesNacional, IssRetidoResponsavel e IssExigibilidade</Description>
<Super>interoperability.NFSeV2.modulo.interface.ModuloCustomizado</Super>
<TimeChanged>66970,62190.217714</TimeChanged>
<TimeCreated>66765,51199.111738</TimeCreated>

<Method name="PopularRequisicao">
<FormalSpec><![CDATA[&pRequisicaoCustomizada:%String,&pRetornoShiftLis,pArgs...:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set pRequisicaoCustomizada = ##class(s00.util.Json).ObjectToJSONString(pRetornoShiftLis)
	
	Return 1
]]></Implementation>
</Method>

<Method name="ExecutarRegra">
<FormalSpec><![CDATA[pRequisicaoCustomizada:%String,&pRespostaCustomizada:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try
	{
		Set retorno = 1
		Set descricaoErro = ""
		
		If ('##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(pRequisicaoCustomizada,"s01.util.b2b.NFSe.xml.EmissaoRpsLote",.objLoteRps,"")) Return 0
		
		#DIM objLoteRps As s01.util.b2b.NFSe.xml.EmissaoRpsLote
		
		Set qtdeRps = objLoteRps.ListaRps.Count()
		For idxRps=1:1:qtdeRps
		{
			#DIM objRps As s01.util.b2b.NFSe.xml.EmissaoRps = objLoteRps.ListaRps.GetAt(idxRps)
			
			Set objRps.RpsSerie = 1
			Set objRps.RpsTipo = $SELECT(objRps.RpsTipo=1:-2, 1:"")
			
			Set objRps.TomadorEstrangeiro = $SELECT(objRps.TomadorEstrangeiro=1:2, 1:1)

			If (objRps.RegimeEspecialDeTributacao '= "") Set objRps.RegimeEspecialDeTributacao = $SELECT(objRps.RegimeEspecialDeTributacao=1:"", 1:-objRps.RegimeEspecialDeTributacao)
			Set objRps.OptanteSimplesNacional = $SELECT(objRps.OptanteSimplesNacional=2:0, 1:objRps.OptanteSimplesNacional)
			/// Quando o ISS não for retido, o responsável pelo ISS deve ser o prestador do serviço
			If (objRps.IssRetido = 2)
			{
				Set objRps.IssRetidoResponsavel = 3
			}
			If (objRps.IssRetidoResponsavel '= "") Set objRps.IssRetidoResponsavel = -objRps.IssRetidoResponsavel
			If (objRps.IssExigibilidade '= "") Set objRps.IssExigibilidade = -objRps.IssExigibilidade
		}
		
		Set jsonObjLoteRps = ##class(s00.util.Json).ObjectToJSONString(objLoteRps)
	}
	Catch(ex)
	{
		Set retorno = 0
		Set descricaoErro = ex.DisplayString()
	}
	
	Set pRespostaCustomizada = {
		"Retorno": (retorno),
		"DescricaoErro": (descricaoErro),
		"JsonObjLoteRps": (jsonObjLoteRps)
	}
	
	Set pRespostaCustomizada = pRespostaCustomizada.%ToJSON()
	
	Return retorno
]]></Implementation>
</Method>

<Method name="PopularResposta">
<FormalSpec><![CDATA[pRespostaCustomizada:%String,&pRetorno]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set pRespostaCustomizada = {}.%FromJSON(pRespostaCustomizada)
	Return ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(pRespostaCustomizada.JsonObjLoteRps,"s01.util.b2b.NFSe.xml.EmissaoRpsLote",.pRetorno,"")
	
	Return 1
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSeV2.modulo.ManterRpsFilaErroComunicacao">
<Description>
Módulo responsável por manter o RPS na fila de envio (disponível integração) caso haja falha de comunicação com o sistema terceiro.</Description>
<Super>interoperability.NFSeV2.modulo.interface.ModuloCustomizado</Super>
<TimeChanged>66765,42148.375492</TimeChanged>
<TimeCreated>66764,33698.12781</TimeCreated>

<Method name="PopularRequisicao">
<FormalSpec><![CDATA[&pRequisicaoCustomizada:%String,&pRetornoShiftLis,pArgs...:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ('$GET(pArgs,0)) Return 1
	
	Set pRequisicaoCustomizada = {
		"NotaFiscalId": (pArgs(1)),
		"XmlEnviado": (pArgs(2)),
		"Status": (pArgs(3)),
		"ErroMensagem": (pArgs(4))
	}
	
	Set pRequisicaoCustomizada = pRequisicaoCustomizada.%ToJSON()
	
	Return 1
]]></Implementation>
</Method>

<Method name="ExecutarRegra">
<FormalSpec><![CDATA[pRequisicaoCustomizada:%String,&pRespostaCustomizada:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try
	{
		Set retorno = 1
		Set descricaoErro = ""
		
		Set pRequisicaoCustomizada = {}.%FromJSON(pRequisicaoCustomizada)
		
		If ('pRequisicaoCustomizada.Status)
		{
			Set objNotaFiscal = ##class(dado.TblNotaFiscal).%OpenId(pRequisicaoCustomizada.NotaFiscalId)
			
			If $ISOBJECT(objNotaFiscal)
			{
				Set eventoMensagem = $$$Text("Falha ao enviar para o sistema terceiro. Reinserindo o RPS na fila.")
				
				If (pRequisicaoCustomizada.ErroMensagem '= "")
				{
					Set eventoMensagem = eventoMensagem _ ": " _ $CHAR(254) _ pRequisicaoCustomizada.ErroMensagem
				}

				Set objNotaFiscal.StatusGeracaoNFe = 0
				
				Do objNotaFiscal.Status.Clear()
				Do objNotaFiscal.Status.Insert("EM")
				
				Do objNotaFiscal.RpsEmissaoXmlEnvio.Clear()
				Do objNotaFiscal.RpsEmissaoXmlEnvio.Write(pRequisicaoCustomizada.XmlEnviado)
				
				Do ##class(s01.util.b2b.NFSe.Util).RegistrarEventoDocumento(pRequisicaoCustomizada.NotaFiscalId,1,"0",eventoMensagem,,,,pRequisicaoCustomizada.XmlEnviado)
				$$$THROWONERROR(pSC, objNotaFiscal.%Save())
			}
			Else
			{
				Throw ##class(s00.util.Excecao).%New($$$Text("Nota fiscal não encontrada: ") _ pRequisicaoCustomizada.NotaFiscalId,"","ConfirmarEnvioRps()")
			}
		}
	}
	Catch(ex)
	{
		Set retorno = 0
		Set descricaoErro = ex.DisplayString()
	}
	
	Set pRespostaCustomizada = {
		"Retorno": (retorno),
		"DescricaoErro": (descricaoErro)
	}
	
	Set pRespostaCustomizada = pRespostaCustomizada.%ToJSON()
	
	Return retorno
]]></Implementation>
</Method>

<Method name="PopularResposta">
<FormalSpec><![CDATA[pRespostaCustomizada:%String,&pRetorno]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set pRespostaCustomizada = {}.%FromJSON(pRespostaCustomizada)
	Set pRetorno = pRespostaCustomizada.Retorno
	
	Return 1
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSeV2.modulo.RecuperarCodigoIBGECancelamento">
<Description>
Módulo responsável por recuperar campo "PrestadorEnderecoCidadeIBGE" nas chamadas de obtenção de lote de cancelamento.</Description>
<Super>interoperability.NFSeV2.modulo.interface.ModuloCustomizado</Super>
<TimeChanged>66765,51199.111738</TimeChanged>
<TimeCreated>66765,51199.111738</TimeCreated>

<Method name="PopularRequisicao">
<FormalSpec><![CDATA[&pRequisicaoCustomizada:%String,&pRetornoShiftLis,pArgs...:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set pRequisicaoCustomizada = ##class(s00.util.Json).ObjectToJSONString(pRetornoShiftLis)
	
	Return 1
]]></Implementation>
</Method>

<Method name="ExecutarRegra">
<FormalSpec><![CDATA[pRequisicaoCustomizada:%String,&pRespostaCustomizada:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try
	{
		Set retorno = 1
		Set descricaoErro = ""
		Set jsonObjCancelamentoNFSeLote = ""

		If ('##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(pRequisicaoCustomizada,"s01.util.b2b.NFSe.xml.CancelamentoNFSeLote",.objCancelamentoNFSeLote,"")) Return 0
		
		#DIM objCancelamentoNFSeLote As s01.util.b2b.NFSe.xml.CancelamentoNFSeLote
		
		Set qtdNfse = objCancelamentoNFSeLote.ListaNfse.Count()
		
		For cNfse=1:1:qtdNfse
		{
			#DIM objCancelamentoNFSe As s01.util.b2b.NFSe.xml.CancelamentoNFSe = objCancelamentoNFSeLote.ListaNfse.GetAt(cNfse)
			
			Set objNotaFiscal = ##class(dado.TblNotaFiscal).%OpenId(objCancelamentoNFSe.NotaFiscalId)
			
			If $ISOBJECT(objNotaFiscal)
			{
				Set objCancelamentoNFSe.PrestadorEnderecoCidadeIBGE = ##class(dado.TblCepLocalidade).CodigoIBGEGetStored(objNotaFiscal.EmpresaId.PessoaJuridica.EnderecoCidade.GetAt(1))
			}			
		}
		
		Set jsonObjCancelamentoNFSeLote = ##class(s00.util.Json).ObjectToJSONString(objCancelamentoNFSeLote)
	}
	Catch(ex)
	{
		Set retorno = 0
		Set descricaoErro = ex.DisplayString()
	}
	
	Set pRespostaCustomizada = {
		"Retorno": (retorno),
		"DescricaoErro": (descricaoErro),
		"JsonObjCancelamentoNFSeLote": (jsonObjCancelamentoNFSeLote)
	}
	
	Set pRespostaCustomizada = pRespostaCustomizada.%ToJSON()
	
	Return retorno
]]></Implementation>
</Method>

<Method name="PopularResposta">
<FormalSpec><![CDATA[pRespostaCustomizada:%String,&pRetorno]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set pRespostaCustomizada = {}.%FromJSON(pRespostaCustomizada)
	Return ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(pRespostaCustomizada.JsonObjCancelamentoNFSeLote,"s01.util.b2b.NFSe.xml.CancelamentoNFSeLote",.pRetorno,"")
	
	Return 1
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSeV2.modulo.adaptador.ModuloCustomizado">
<TimeChanged>66765,37022.58964</TimeChanged>
<TimeCreated>66764,46254.599932</TimeCreated>

<Parameter name="CaminhoModulo">
<Default>interoperability.NFSeV2.modulo</Default>
</Parameter>

<Method name="ExecutarModulosCustomizados">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pModulosCustomizados:%String,&objShiftLis,pArgs...:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set qtdArgs = $GET(pArgs,0)
	
	If (('qtdArgs) || (pModulosCustomizados = "")) Return 1
	
	Set pModulosCustomizados = $LISTFROMSTRING(pModulosCustomizados)
	Set ptrModuloCustomizado = 0
	
	While ($LISTNEXT(pModulosCustomizados,ptrModuloCustomizado,moduloCustomizado))
	{
		Set classeModuloCustomizado = ..#CaminhoModulo _ "." _ moduloCustomizado
		Set objModuloCustomizado = $CLASSMETHOD(classeModuloCustomizado,"%New")
		
		If $ISOBJECT(objModuloCustomizado)
		{
			If ('$METHOD(objModuloCustomizado,"PopularRequisicao",.request,.objShiftLis,pArgs...)) Return 0
			If ('$METHOD(objModuloCustomizado,"ExecutarRegra",request,.response)) Return 0
			If ('$METHOD(objModuloCustomizado,"PopularResposta",response,.objShiftLis)) Return 0	
		}
	}
	
	Return 1
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.NFSeV2.modulo.interface.ModuloCustomizado">
<Description>
Interface responsável por definir o contrato dos módulos customizados de NFSe.
Ao criar-se um novo módulo, deve-se estender dessa classe, para que as implementações sigam o padrão
E não haja intercorrências com o serviço.</Description>
<Abstract>1</Abstract>
<Super>s01.util.b2b.NFSe.integracao.Emissao</Super>
<TimeChanged>66765,51849.795241</TimeChanged>
<TimeCreated>66764,33686.744647</TimeCreated>

<Method name="PopularRequisicao">
<Description>
Sobrescrever este método.
Método responsável por receber o retorno do método invocado do produto padrão e uma lista de argumentos
e devolver, via referência, um JSON contendo requisição customizada que será processada pelo método "ExecutarRegra".</Description>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&pRequisicaoCustomizada:%String,&pRetornoShiftLis,pArgs...:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  If ('%class.Abstract)
  {
	  Quit $$$ERROR($$$GeneralError, %method.Name _ " não implementado pela classe " _ %classname)
  }
  
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExecutarRegra">
<Description>
Sobrescrever este método.
Método responsável por receber uma requisição JSON, realizar o processamento da regra customizada implementada no módulo
e devolver, via referência, um JSON contendo o resultado da execução do método.</Description>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[pRequisicaoCustomizada:%String,&pRespostaCustomizada:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  If ('%class.Abstract)
  {
	  Quit $$$ERROR($$$GeneralError, %method.Name _ " não implementado pela classe " _ %classname)
  }
  
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="PopularResposta">
<Description>
Sobrescrever este método.
Método responsável por receber um JSON contendo o resultado da execução do módulo customizado, e devolver,
via referência, o retorno esperado pelo Web Service.</Description>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[pRespostaCustomizada:%String,&pRetorno]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  If ('%class.Abstract)
  {
	  Quit $$$ERROR($$$GeneralError, %method.Name _ " não implementado pela classe " _ %classname)
  }
  
  Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.api.Rest">
<Super>%CSP.REST</Super>
<TimeChanged>66926,52917.626052</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/collect/v1/register" Method="POST" Call="Register" Cors="false"/>
<Route Url="/login-client-credentials/token" Method="POST" Call="Token" Cors="false"/>
</Routes>
]]></Data>
</XData>

<Method name="Token">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set token = $SYSTEM.Encryption.Base64Encode("Tokencustomizado")
	Set %response.Status = ..#HTTP200OK
	Set %response.ContentType = "application/json"
	Write {"token" : (token)}.%ToJSON()

	Return $$$OK
]]></Implementation>
</Method>

<Method name="Register">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		#Dim integrationCollectRecordDto As s01.dto.coleta.registro.integracao.RegistroColetaDto
		//"s01.dto.coleta.registro.integracao.RegistroColetaDto"
		Set integrationCollectRecordDto = ##class(shared.json.JsonDynamicObject).FromJSONStream(%request.Content,
													"s01.dto.coleta.registro.integracao.RegistroColetaDto",1)
		Set service = ##class(interoperability.service.coleta.integracao.ColetaService).%New()
		Set stream = ##class(shared.json.JsonDynamicObject).ToJSONStream(service.RegistrarColeta(integrationCollectRecordDto), ,1)
	    Set %response.Status = ..#HTTP200OK
	    Set %response.ContentType = "application/json"
		Set statusCodes = $GET(%request.CgiEnvs("HTTP_STATUSCODE_IGNORE"))
		Do:(statusCodes '= "") %response.SetHeader("StatusCode-Ignore", statusCodes)
	    $$$THROWONERROR(sc,stream.Rewind())
	    While 'stream.AtEnd {
	        Write stream.Read(32000)
	    }
	} Catch error {
		Set %response.Status = ..#HTTP500INTERNALSERVERERROR
		Write error.DisplayString()
	}	
	Return $$$OK
]]></Implementation>
</Method>

<Method name="RegistrarAplicacao">
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
    Set namespaceOrigem = $NAMESPACE
    Set $Namespace = "%SYS"
    Set ret = $$$OK
    Set spec("AutheEnabled") = $$$AutheUnauthenticated
    Set spec("NameSpace") = namespaceOrigem
    Set spec("Description") = "Api Rest de Customização - "_namespaceOrigem
    Set spec("IsNameSpaceDefault") = $$$NO
    Set spec("DispatchClass") = "interoperability.service.coleta.integracao.ColetaService"
    Set spec("MatchRoles")=":%All"

    If ('##class(Security.Applications).Exists(pName)) {
        Write !,"Criando aplicação Web """_pName_"""..."
        Set ret = ##class(Security.Applications).Create(pName, .spec)
        Write !, "Aplicação Web """_pName_""" foi criada."
    }
    Else { 
        Write !, "Atualizando aplicação Web """_pName_"""..."
        Set ret = ##class(Security.Applications).Modify(pName, .spec)
        Write !, "Aplicação Web """_pName_""" foi atualizada."
    }
    Set $Namespace = namespaceOrigem
    Return ret
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.api.Soap">
<Super>%SOAP.WebService</Super>
<TimeChanged>66968,44302.002553</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>Interoperability</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domínio usado para localização.</Description>
<Default>SCSDOMAIN</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.e-lis.com.br</Default>
</Parameter>

<Parameter name="USECLASSNAMESPACES">
<Description>
Os namespaces das classes referenciadas serão usados no WSDL.</Description>
<Default>1</Default>
</Parameter>

<Method name="ClassMethodWS">
<Description>
{"class":"customizacao.xpto.Abc","method":"HelloWorld","params":["Olá","Mundo"]}
{"data":"","error":""}</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pJson:%Stream.GlobalCharacter</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set retorno = ##class(%Stream.GlobalCharacter).%New()
	Set retornoJson = ##class(interoperability.api.models.SoapReturn).%New()
	Try{
		Set objDynamic = {}.%FromJSON(pJson)
		If ((objDynamic.class = "")||
			(objDynamic.method = "")||
			($FIND(objDynamic.class,"interoperability.util") = 0)) 
			{
				Set retornoJson.error = "Você não tem permissão para acessar esse recurso."
				$$$THROWONERROR(Status, ##class(%ZEN.Auxiliary.altJSONProvider).%WriteJSONStreamFromObject(.retorno,retornoJson,,,1,"aelo"))
				Return retorno
			}
		
		Set params = ""
		Set iterator = objDynamic.params.%GetIterator()
		While iterator.%GetNext(.index, .param){
			Set params($I(params)) = param
		}
		
		Set retornoStream = $CLASSMETHOD(objDynamic.class,objDynamic.method,params...)
		Set retornoJson.data = retornoStream		
	}
	Catch(ex)
	{
		Set retornoJson.error = ex.DisplayString()
	}
	$$$THROWONERROR(Status, ##class(%ZEN.Auxiliary.altJSONProvider).%WriteJSONStreamFromObject(.retorno,retornoJson,,,1,"aelos"))
	Return retorno
]]></Implementation>
</Method>

<Method name="ImportarPedidoAssincrono">
<Description>
pPedidoLab: xml do pedidoLab
pLinkEnsemble: Determina o webService da integração de retorno da importação do pedido
pToken: Token definido para controle do andamento do processo de geração de pedido</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab,pLinkEnsemble:%String(MAXLEN=""),pToken:%String(MAXLEN=""),*pDescricaoErro:%String(MAXLEN="")</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[

	Try{		
		Set tStatus = 1
		Set pDescricaoErro = ""
		Set ^ControleTokenInteroperability(pToken) = 1
		Set ^ControleTokenInteroperability(pToken,"LinkEnsemble") = pLinkEnsemble
		Set ^ControleTokenInteroperability(pToken,"Servidor") = $ZU(110)
		Set ^ControleTokenInteroperability(pToken,"JOB") = $JOB
		Do pPedidoLab.XMLExportToStream(.pedidoStream)
		Set arquivo = ##class(%FileCharacterStream).%New()
		Set arquivo.Filename = ##class(%File).TempFilename("xml")
		Set tStatus = arquivo.CopyFromAndSave(pedidoStream)
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		Set ^ControleTokenInteroperability(pToken,"Arquivo") = arquivo.Filename
		Job ..ImportarPedidoJob(pToken)
	}Catch(ex){
		Set tStatus = 0
		Set pDescricaoErro = ex.DisplayString()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="ImportarPedidoJob">
<Description>
Exemplo:
Do ..ImportarPedidoJob("6655643872063648;10886;")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pToken:%String(MAXLEN="")</FormalSpec>
<Implementation><![CDATA[

	Set limiteReprocesso = 20
	Set $LIST(listaErrosReprocesso,*+1) = "ERRO #5803: Não foi possível obter o lock exclusivo na instância de 'dado.TblPessoaFisica'"
	
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set xmlReader = ##class(%XML.Reader).%New()
		Set arquivo = ##class(%Stream.FileCharacter).%New()
		Set arquivo.Filename = ^ControleTokenInteroperability(pToken,"Arquivo")
		
		Set tStatus = xmlReader.OpenStream(arquivo)
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		Set linkIntegracao = ^ControleTokenInteroperability(pToken,"LinkEnsemble")
		
		Do xmlReader.Correlate("pedidoLab","s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab")
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		If xmlReader.Next(.pedidoLab,.tStatus) {
			For contadorLimite=1:limiteReprocesso{
				Set sucesso = ##class(interoperability.api.Soap).ImportarPedido(pedidoLab,.retorno)
				// Se não encontrou erro de lock sai do FOR
				Quit:'$LF(listaErrosReprocesso,retorno.DescricaoErro)
				Hang 1
			}
			If linkIntegracao '= "" {
				
				Set wsEnsemble = ##class(interoperability.client.WSEnsembleSoap).%New()
				
				If $FIND(linkIntegracao,"https")>0 {
					Set wsEnsemble.SSLConfiguration = "EmailSSL"
				}
				Set wsEnsemble.Location = linkIntegracao			
				
				set tRetorno = ""
				Do retorno.XMLExportToString(.tRetorno)
								
				Set tStatus = wsEnsemble.RetornoPedido(pToken,tRetorno,retorno.Retorno,retorno.DescricaoErro)
				
				Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
			}
			Do retorno.XMLExportToStream(.retornoStream)
			Set arquivo = ##class(%FileCharacterStream).%New()
			Set arquivo.Filename = ##class(%File).TempFilename("xml")
			Set tStatus = arquivo.CopyFromAndSave(retornoStream)
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
			Set ^ControleTokenInteroperability(pToken,"ArquivoRetorno") = arquivo.Filename
		}
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		Set ^ControleTokenInteroperability(pToken) = 2
	}Catch(ex){
		Set ^ControleTokenInteroperability(pToken) = 3
		Set ^ControleTokenInteroperability(pToken,"MensagemErro") = ex.DisplayString()
	}
]]></Implementation>
</Method>

<Method name="ConsultaTokenPedido">
<ClassMethod>1</ClassMethod>
<FormalSpec>pToken:%String(MAXLEN=""),*pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try{
		Set tStatus = $$$OK
		Set pRetorno = ##class(s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab).%New()
		If '$GET(^ControleTokenInteroperability(pToken),0) {
			Set pRetorno.Retorno = 0
			Set pRetorno.DescricaoErro = "Token não encontrado."
			Set tStatus = $SYSTEM.Status.Error(5001,pRetorno.DescricaoErro)
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		}
		Set pRetorno.Retorno = 1
		Set pRetorno.DescricaoErro = "Em processamento"
		If (^ControleTokenInteroperability(pToken)=2) {
			Set arquivo = ##class(%File).%New(^ControleTokenInteroperability(pToken,"ArquivoRetorno"))
			Do arquivo.Open("RW")
			Set xmlReader = ##class(%XML.Reader).%New()
			Set tStatus = xmlReader.Correlate("retornoLab","s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab")
			#DIM retorno As s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab
			Do xmlReader.Next(.pRetorno,.tStatus) 
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		} ElseIf (^ControleTokenInteroperability(pToken)=3) {
			Set pRetorno.Retorno = 0
			Set pRetorno.DescricaoErro = ^ControleTokenInteroperability(pToken,"MensagemErro")
			Set tStatus = $SYSTEM.Status.Error(5001,pRetorno.DescricaoErro)
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		}
	}Catch(ex){
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="ImportarPedido">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab,*pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {
		Set sucesso = 0
		#Dim tExame As s01.util.b2b.shiftLis.ensemblev2.imp.Exame
		// executa depara entrada futuro
		For contadorExame=1:1:pPedidoLab.Exame.Count() {
			Set tExame = pPedidoLab.Exame.GetAt(contadorExame)
			Set tMnemonico = tExame.Codigo
			Set:(##class(dado.TblExame).%ExistsId(tMnemonico)) tMnemonico = ##class(dado.TblExame).MnemonicoGetStored(tMnemonico)
			Continue:('##class(dado.TblExame).idxMnemonicoExists(tMnemonico))
			Set ^||ControleExame(tMnemonico) = tExame.Codigo
		}
		Set objPedido = ##class(s01.util.b2b.shiftLis.ensemblev2.Pedido).%New()
		Set sucesso = objPedido.ImportarPedido(pPedidoLab,.pRetorno)
		For contadorExame=1:1:pRetorno.Exames.Count(){
			Set pRetorno.Exames.GetAt(contadorExame).Codigo = $Get(^||ControleExame(pRetorno.Exames.GetAt(contadorExame).Codigo),pRetorno.Exames.GetAt(contadorExame).Codigo)
		}
		// executa depara retorno futuro
	}Catch(ex){
		Set tStatus = ex.AsStatus()
	}
	Return sucesso
]]></Implementation>
</Method>

<Method name="ValidarImportacaoPedido">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab,*pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {
		Set sucesso = 0
		
		#Dim tExame As s01.util.b2b.shiftLis.ensemblev2.imp.Exame
		For contadorExame=1:1:pPedidoLab.Exame.Count() {
			Set tExame = pPedidoLab.Exame.GetAt(contadorExame)
			Set tMnemonico = tExame.Codigo
			Set:(##class(dado.TblExame).%ExistsId(tMnemonico)) tMnemonico = ##class(dado.TblExame).MnemonicoGetStored(tMnemonico)
			Continue:('##class(dado.TblExame).idxMnemonicoExists(tMnemonico))
			Set ^||ControleExame(tMnemonico) = tExame.Codigo
		}
		
		Set objPedidoValidacao = ##class(interoperability.util.ValidarPedido).%New()
		Set sucesso = objPedidoValidacao.ValidarImportacaoPedido(pPedidoLab,.pRetorno)
		For contadorExame=1:1:pRetorno.Exames.Count(){
			Set pRetorno.Exames.GetAt(contadorExame).Codigo = $Get(^||ControleExame(pRetorno.Exames.GetAt(contadorExame).Codigo),pRetorno.Exames.GetAt(contadorExame).Codigo)
		}
	}Catch(ex){
		Set tStatus = ex.AsStatus()
	}
	Return sucesso
]]></Implementation>
</Method>

<Method name="SalvaInfoPreAnalitica">
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set Retorno = $$$OK
    Try {  
		Set objPedidoValidacao = ##class(interoperability.util.SalvarInfPreAnalitica).%New()
		Set sucesso = objPedidoValidacao.SalvaInfoPreAnaliticasDoProcedimento(pPedidoLab)
		Set sucesso = objPedidoValidacao.SalvarPerguntasNaInclusaoProcedimento(pPedidoLab)
    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
        Set Retorno = ex.Name _ " - " _ ex.Data
    }
    Quit Retorno
]]></Implementation>
</Method>

<Method name="BuscaDadosMedico">
<FormalSpec>pCrm:%String,pConselho:%String,pUfConselho:%String,*pNomeMedico:%String="",*pIdMedico:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try{	
		Set retorno = 1
		Set sql = 
			"SELECT ID, "_
			"PessoaFisica->Nome "_
			"FROM dado.ArqSolicitante " _
			"WHERE Conselho = ? AND ConselhoNumero = ? AND ConselhoEstado = ? "
		Set rs = ##class(%ResultSet).%New()
		Set sc = rs.Prepare(sql)
		Set sc = rs.Execute(pConselho,pCrm,pUfConselho)
		If rs.Next(){
			Set pNomeMedico = rs.ID
			Set pIdMedico = rs.Nome
		}		
	}Catch(pExcecao){
		Set faultString = pExcecao.Name _ " - " _ pExcecao.Data
		Set fault=##class(%SOAP.Fault).%New()
		Set fault.faultcode = $$$FAULTServer
		Set fault.faultstring = faultString
		Set pString = $REPLACE(pExcecao.DisplayString(), "<", "&lt;")
	    Set pString = $REPLACE(pString, ">", "&gt;")
		Set fault.detail = pString
		Do ..ReturnFault(fault)
		Set retorno = 0
	}
	Return retorno
]]></Implementation>
</Method>

<Method name="CancelarProcedimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pParametrosRequisicao:s01.util.b2b.shiftLis.ensemblev2.cancelamento.requisicao.Requisicao,*pRetorno:s01.util.b2b.shiftLis.ensemblev2.cancelamento.resposta.Resposta</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set retorno = 1
	Try {
		Set controleCancelamento = ##class(s01.util.b2b.shiftLis.ensemblev2.cancelamento.Cancelamento).%New()
		For idxExame = 1:1:pParametrosRequisicao.Procedimentos.Count()
		{
			If ##class(dado.TblExame).idxMnemonicoExists(pParametrosRequisicao.Procedimentos.GetAt(idxExame).Codigo,.procedimento) {

				Set pParametrosRequisicao.Procedimentos.GetAt(idxExame).Codigo = procedimento
			}
		}
		Set controleCancelamento.Requisicao = pParametrosRequisicao
		Set pRetorno = controleCancelamento.ProcessarRequisicao()
	}Catch(ex) {
		Throw ex
		Set retorno = 0
	}
	
	Return retorno
]]></Implementation>
</Method>

<Method name="RetornaStatusProcedimentos">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLista:interoperability.api.dto.Exames,*pRetorno:interoperability.api.dto.Exames</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set sucesso = 1
	
	Try 
	{
		Set pRetorno = ##Class(interoperability.api.dto.Exames).%New()
		
		For contadorExame = 1 : 1 : pLista.Exames.Count()
		{
			Set Status = pRetorno.Exames.SetAt(pLista.Exames.GetAt(contadorExame), contadorExame)
			Throw:$$$ISERR(Status) ##class(%Exception.StatusException).CreateFromStatus(Status)
			
			Set codigoExame = pRetorno.Exames.GetAt(contadorExame).Codigo
			Set pRetorno.Exames.GetAt(contadorExame).Status = 0
			
			Do ##class(dado.TblExame).idxMnemonicoExists(codigoExame,.idMnemonicoExame)
			
			If (idMnemonicoExame '= "")
			{
				Set codigoExame = idMnemonicoExame				
			}
			
			If (##class(dado.TblExame).%ExistsId(codigoExame))
			{			
				Set pRetorno.Exames.GetAt(contadorExame).Status = ##class(dado.TblExame).StatusGetStored(codigoExame)
			}
		}
	}
	Catch(ex)
	{
		Set tStatus = ex.AsStatus()
		Set sucesso = 0
	}

	Return sucesso
]]></Implementation>
</Method>

<Method name="BuscaDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaLog:%String="",pListaStatus:%String="",pValidaAutomacao:%Boolean=0</FormalSpec>
<ReturnType>interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {
		Return ..PreencherDadosStatus(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao,pListaLog,pListaStatus,pValidaAutomacao)
	} Catch(ex){		
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
	}
	
	Return ##class(interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno).%New()
]]></Implementation>
</Method>

<Method name="PreencherDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String="",pListaLog:%String="",pListaStatus:%String="",pValidaAutomacao:%Boolean=0</FormalSpec>
<ReturnType>interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno</ReturnType>
<Implementation><![CDATA[
	Try {
		K parms
		Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataInicial)
		Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataFinal)
		Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraInicial,"hora")
		Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraFinal,"hora")
		Set parms($I(parms)) = $LISTFROMSTRING(pListaLog)
		Set Status = $$$OK
		
		Set sqlLogOperacao = "SELECT "_
							 "       ID, "_
							 "       Dado1, "_
							 "       Dado2, "_
							 "       LogId->Tipo "_
							 "FROM dado.TblLogOperacao "_
							 "WHERE "_
							 "       Data BETWEEN ? AND ? "_
							 "AND   "_
							 "       Hora BETWEEN ? AND ? "_
							 "AND   "_
							 "       LogId %INLIST  ? "_
							 "AND   "_
							 "       LogId->Tipo != '2' "_
							 "GROUP BY "_
							 "       Dado1 , Dado2 "_
							 "ORDER BY "_
							 "       Id ASC"
		
		If (pListaLog = "001")
		{
			K parms
			Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataInicial)
			Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataFinal)
			Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraInicial,"hora")
			Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraFinal,"hora")
			Set parms($I(parms)) = $LISTFROMSTRING(pListaLog)
			Set parms($I(parms)) = "2"
			Set parms($I(parms)) = "4"			

			Set sqlLogOperacao = 	"SELECT 									" _
									"		LOG100.ID, 							" _
									"		LOG100.DADO1,						" _
									"		LOG100.DADO2,						" _
									"		LOG100.LOGID->TIPO					" _
									"FROM DADO.TBLLOGOPERACAO LOG001			" _
									"	INNER JOIN DADO.TBLLOGOPERACAO LOG100	" _
									"		ON LOG001.DADO1 = LOG100.DADO2		" _
									"WHERE 										" _
									"		LOG001.DATA BETWEEN ? AND ? 		" _
									"AND 										" _ 
									"		LOG001.HORA BETWEEN ? AND ? 		" _
									"AND 										" _
									"		LOG001.LOGID %INLIST  ? 			" _
									"AND 										" _
									"		LOG001.LOGID->TIPO != ? 			" _
									"AND 										" _
									"		LOG100.LOGID->TIPO = ? 				" _
									"ORDER BY 									" _ 
									"		ID ASC 								"
		}

		Set statement = ##class(%SQL.Statement).%New()
		$$$THROWONERROR(Status,statement.%Prepare(sqlLogOperacao))
		Set resultSet = statement.%Execute(parms...)
	
		Set objDadosRetorno = ##class(interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno).%New()
		While resultSet.%Next()
		{
			Set os = resultSet.Dado2
			Set procedimento = resultSet.Dado1
			Set idLogOperacao = resultSet.Id
			If (resultSet.Tipo =1)
			{
				Set os = resultSet.Dado1
			}
			If ((resultSet.Tipo =2)||(resultSet.Tipo =4))
			{
				Set os = resultSet.Dado2	
			}
			Set parmsProcedimento($I(parmsProcedimento)) = os
			
			Set sqlOsProcedimento = "SELECT "_
								    "       Id "_
								    "FROM dado.TblOsProcedimento "_
								    "WHERE "_
								    "       Os = ? "
			If (resultSet.Tipo = 4)
            {
                Set sqlOsProcedimento = sqlOsProcedimento_"AND Procedimento = ? "
                Set parmsProcedimento($I(parmsProcedimento)) = procedimento
            }
            
            If (pListaStatus '= "")
            {
	            Set sqlOsProcedimento = sqlOsProcedimento_"AND Status %INLIST ? "
	            Set parmsProcedimento($I(parmsProcedimento)) = $LISTFROMSTRING(pListaStatus)
	        }
            
            Set statement = ##class(%SQL.Statement).%New()
            $$$THROWONERROR(Status,statement.%Prepare(sqlOsProcedimento))
            Set rsOsProcedimento = statement.%Execute(parmsProcedimento...)
			While (rsOsProcedimento.%Next())
			{
				Set idOsProcedimento = rsOsProcedimento.Id
				$$$THROWONERROR(Status,..PreencherDadosRetornoStatus(os,idOsProcedimento,idLogOperacao,.objDadosRetorno,pIntegracao,pValidaAutomacao))
			}
			Kill parmsProcedimento
			
		}
		
	}Catch(objExcecao) {	
		Set objDadosRetorno.Situacao = 0
		Set objDadosRetorno.DescricaoErro = objExcecao.Name _ " - " _ objExcecao.Data
	}
	Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosRetornoStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOs:%String,pIdOsProcedimento:%String,pIdLogOperacao:%String,&objDadosRetorno:interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno,pIntegracao:%String,pValidaAutomacao:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status = $$$OK
	Try
	{
		Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(pIdLogOperacao)
		If '$ISOBJECT(tblLogOperacao) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblLogOperacao não encontrado para ID "_pIdLogOperacao_".")					
				
		Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(pIdOs)
		If '$ISOBJECT(arqOrdemServico) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.ArqOrdemServico não encontrado para OS com ID "_pIdOs_".")
				
		Set tblOsProcedimento = ##class(dado.TblOsProcedimento).%OpenId(pIdOsProcedimento)		
		If '$ISOBJECT(tblOsProcedimento) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_pIdOsProcedimento_".")
		
		If (pValidaAutomacao)
		{
			Set exameValido=..ValidaDeParaAutomacao(tblOsProcedimento.Procedimento.%Id(),pIntegracao)
			If 'exameValido Quit
		}

		Set osIncluida = 0
		Set qtdeOsIncluidas = objDadosRetorno.OrdemServico.Count()
		
		For contOsInc=1:1:qtdeOsIncluidas
		{
			// OS já estava incluída na lista
			If (objDadosRetorno.OrdemServico.GetAt(contOsInc).CodigoOs = arqOrdemServico.CodigoOs)
			{
				Set osIncluida = 1
				Set exameIncluido = 0
				
				Set qtdeEx = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Count()
				For contEx=1:1:qtdeEx
				{
					// Exame já estava incluído na OS
					If (objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).Codigo = pIdOsProcedimento)
					{
						If (tblLogOperacao.Data > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento)
						{
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = tblLogOperacao.Data
							Set exameIncluido = 1
						}
						If (tblLogOperacao.Hora > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento)
						{
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = tblLogOperacao.Hora
							Set exameIncluido = 1
						}
					}
				}
				// Exame não estava incluído na OS
				If ('exameIncluido)
				{
					Set objExame = ##class(interoperability.api.xml.buscadadosstatus.response.ExameStatus).%New()
					Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
					Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
					Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
					Set objExame.Status = tblOsProcedimento.Status.Id
					Set objExame.Urgente = tblOsProcedimento.Prioridade
					Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
					Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
					If $ISOBJECT(tblLogOperacao.MotivoId)
					{
						Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
						Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
					}
					If $ISOBJECT(tblLogOperacao.UsuarioId)
					{
						If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica)
						{
							Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
						}
					}
					
					//Inserindo dados do medico
					Do ..MontaObjMedico(pIdOsProcedimento, .objExame)
					
					//Inserindo dados do Material
					Do ..MontaObjMaterial(pIdOsProcedimento, .objExame)
					
					//Inserindo dados da Amostra
					Do ..MontaObjAmostra(pIdOsProcedimento, .objExame)
					
					Do objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Insert(objExame)
				}Else{
					
					//Inserindo dados do medico
					Set objExameAux = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx)
					Do ..MontaObjMedico(pIdOsProcedimento, .objExameAux)
										
					//Inserindo dados do Material
					Do ..MontaObjMaterial(pIdOsProcedimento, .objExameAux)
										
					///Inserindo dados da Amostra
					Do ..MontaObjAmostra(pIdOsProcedimento, .objExameAux)
										
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = $ZDATE(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento,3)
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = $ZTIME(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento)
					
				}
			}
		}
		
		// OS não estava incluída na lista
		If 'osIncluida{
			Set objOrdemServico = ##class(interoperability.api.xml.buscadadosstatus.response.OrdemServicoStatus).%New()
			Set objOrdemServico.CodigoOs = arqOrdemServico.CodigoOs
			Set objOrdemServico.PedidoCliente = arqOrdemServico.NroIdentificacaoOsLisOrigem
						
			Set objExame = ##class(interoperability.api.xml.buscadadosstatus.response.ExameStatus).%New()
			Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
			Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
			Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
			Set objExame.Status = tblOsProcedimento.Status.Id		
			Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
			Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
			If $ISOBJECT(tblLogOperacao.MotivoId){
				Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
				Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
			}
			If $ISOBJECT(tblLogOperacao.UsuarioId){
				If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
					Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
				}
			}
			
			//Inserindo dados do medico
			Do ..MontaObjMedico(pIdOsProcedimento, .objExame)
					
			//Inserindo dados do Material
			Do ..MontaObjMaterial(pIdOsProcedimento, .objExame)
			
			//Inserindo dados da Amostra
			Do ..MontaObjAmostra(pIdOsProcedimento, .objExame)
			
			//Inserindo dados do paciente
			Set objPaciente = ##class(interoperability.api.xml.buscadadosstatus.response.PacienteStatus).%New()
			Set objPaciente.Id = arqOrdemServico.Paciente.PessoaFisica.%Id()
			Set objPaciente.Nome = arqOrdemServico.Paciente.PessoaFisica.Nome
			Set objPaciente.DataNascimento = arqOrdemServico.Paciente.PessoaFisica.DataNascimento
			If (((arqOrdemServico.Paciente.PessoaFisica.Sexo)="M")||((arqOrdemServico.Paciente.PessoaFisica.Sexo)="F"))
			{
				Set objPaciente.Sexo = arqOrdemServico.Paciente.PessoaFisica.Sexo
			}
			Else
			{
				Set objPaciente.Sexo = "U"	
			}
			Do objOrdemServico.Paciente.Insert(objPaciente)
			
			//Inserindo dados do posto
			Set objPosto = ##class(interoperability.api.xml.buscadadosstatus.response.PostoStatus).%New()
			Set objPosto.Id = arqOrdemServico.Posto.%Id()
			Set objPosto.Descricao = arqOrdemServico.Posto.Descricao
			Do objOrdemServico.Posto.Insert(objPosto)
					
			Do objOrdemServico.Exames.Insert(objExame)
			
			Do objDadosRetorno.OrdemServico.Insert(objOrdemServico)
		}				
	}
	Catch(objErro)
	{
		Set Status = objErro.AsStatus()
	}	
	
	Quit Status
]]></Implementation>
</Method>

<Method name="RetornarSolicitantesOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdOsProcedimento:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set listaObjSolicitante = ##class(%ListOfObjects).%New()
	
	Set sqlSolicitanteOS = "SELECT "_
						   "       Solicitante "_
						   "FROM dado.TblOsExameSolicitante "_
						   "WHERE "_
						   "       OsProcedimento = ?"
						   
	Set statement = ##class(%SQL.Statement).%New()
	$$$THROWONERROR(Status,statement.%Prepare(sqlSolicitanteOS))
	Set rsOsSolicitante = statement.%Execute(pIdOsProcedimento)
	
	While rsOsSolicitante.%Next()
	{
		Set objSolicitante = ##class(dado.ArqSolicitante).%OpenId(rsOsSolicitante.Solicitante)
		Do listaObjSolicitante.Insert(objSolicitante)
	}
	Quit listaObjSolicitante
]]></Implementation>
</Method>

<Method name="RetornarAmostrasOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdOsProcedimento:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set listaObjAmostra = ##class(%ListOfObjects).%New()
		
	Set sqlAmostraOS =	"SELECT "_
						"        RecipienteOs " _
						"FROM dado.TblOsRecipienteProcedimento " _
						"WHERE "_
						"        OsProcedimento = ? "
	
	Set statement = ##class(%SQL.Statement).%New()
	$$$THROWONERROR(Status,statement.%Prepare(sqlAmostraOS))
	
	Set rsOsAmostra = statement.%Execute(pIdOsProcedimento)
	
	While rsOsAmostra.%Next()
	{
		Set objAmostra = ##class(dado.TblOsRecipiente).%OpenId(rsOsAmostra.RecipienteOs)
		Do listaObjAmostra.Insert(objAmostra)
	}
	
	Quit listaObjAmostra
]]></Implementation>
</Method>

<Method name="RetornarMaterialOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdOsProcedimento:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set listaObjProcedimento = ##class(%ListOfObjects).%New()
	
	Set sqlProcedimentoOS = "SELECT "_
	                        "       Id "_
	                        "FROM dado.TblOsProcedimentoAC "_
	                        "WHERE "_
	                        "       Id = ?"
	
	Set statement = ##class(%SQL.Statement).%New()
	$$$THROWONERROR(Status,statement.%Prepare(sqlProcedimentoOS))
	Set rsProcedimentoOS = statement.%Execute(pIdOsProcedimento)
	
	While rsProcedimentoOS.%Next()
	{
		Set objProcedimento = ##class(dado.TblOsProcedimentoAC).%OpenId(rsProcedimentoOS.Id)
		Do listaObjProcedimento.Insert(objProcedimento)
	}
	Quit listaObjProcedimento
]]></Implementation>
</Method>

<Method name="MontaObjMedico">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOsProcedimento:%String,&objExame:interoperability.api.xml.buscadadosstatus.response.ExameStatus]]></FormalSpec>
<Implementation><![CDATA[
	Set listaObjMedico = ..RetornarSolicitantesOS(pIdOsProcedimento)
	Set qtdeListaObjMedico = listaObjMedico.Count()

	For indiceMedico=1:1:qtdeListaObjMedico
	{
		Set objMedico = ##class(interoperability.api.xml.buscadadosstatus.response.MedicoStatus).%New()
		Set objMedico.Nome = listaObjMedico.GetAt(indiceMedico).PessoaFisica.Nome
		Set objMedico.ConselhoNumero = listaObjMedico.GetAt(indiceMedico).ConselhoNumero
		Set objMedico.ConselhoEstado = listaObjMedico.GetAt(indiceMedico).ConselhoEstado
		Set objMedico.ConselhoSigla = listaObjMedico.GetAt(indiceMedico).Conselho.Id
		
		Do objExame.Medico.Insert(objMedico)
	}
]]></Implementation>
</Method>

<Method name="MontaObjMaterial">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOsProcedimento:%String,&objExame:interoperability.api.xml.buscadadosstatus.response.ExameStatus]]></FormalSpec>
<Implementation><![CDATA[
	Set objProcedimentoAC = ##class(dado.TblOsProcedimentoAC).%OpenId(pIdOsProcedimento)
	Set objMaterial = ##class(interoperability.api.xml.buscadadosstatus.response.MaterialStatus).%New()
	Set objMaterial.Id = objProcedimentoAC.Material.Id
	Set objMaterial.Descricao = objProcedimentoAC.Material.Descricao
	Do objExame.Material.Insert(objMaterial)
]]></Implementation>
</Method>

<Method name="MontaObjAmostra">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOsProcedimento:%String,&objExame:interoperability.api.xml.buscadadosstatus.response.ExameStatus]]></FormalSpec>
<Implementation><![CDATA[
	Set listaObjAmostra = ..RetornarAmostrasOS(pIdOsProcedimento)
	Set qtdeListaObjAmostra = listaObjAmostra.Count()

	For indiceAmostra=1:1:qtdeListaObjAmostra
	{
		Set objAmostra = ##class(interoperability.api.xml.buscadadosstatus.response.AmostraStatus).%New()
		//Set objAmostra.Data = listaObjAmostra.GetAt(indiceAmostra).Data
		//Set objAmostra.Hora = listaObjAmostra.GetAt(indiceAmostra).Hora
		Set objAmostra.Cbarra = listaObjAmostra.GetAt(indiceAmostra).Cbarra
		Do objExame.Amostra.Insert(objAmostra)
	
	}
]]></Implementation>
</Method>

<Method name="RetornarEquipamentosOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOS:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set objProcedimento = ##class(dado.TblOsProcedimento).%New()
	Set listaObjProcedimento = ##class(%ListOfObjects).%New()
	Set sqlProcedimentoOS = ##class(%Stream.GlobalCharacter).%New()
	Do sqlProcedimentoOS.WriteLine("SELECT Id ")
	Do sqlProcedimentoOS.WriteLine("FROM dado.TblOsProcedimento ")
	Do sqlProcedimentoOS.WriteLine("WHERE Os = ?")
	Set sqlProcedimentoOS = sqlProcedimentoOS.Read(sqlProcedimentoOS.Size)
	Set statement = ##class(%SQL.Statement).%New(2)
	$$$THROWONERROR(Status,statement.%Prepare(sqlProcedimentoOS))
	Set rsProcedimentoOS = statement.%Execute(pOS)
	
	If rsProcedimentoOS.%Next()
	{
		Set setor = ##class(dado.TblOsProcedimento).SetorGetStored(rsProcedimentoOS.Id)
		If $Length(setor) = 1
		{ 
			Set setor = "00"_setor	
		}
		If $Length(setor) = 2
		{
			Set setor = "0"_setor	
		}
		Set sqlProcedimentoOS = ##class(%Stream.GlobalCharacter).%New()
		Do sqlProcedimentoOS.WriteLine("SELECT Id ")
		Do sqlProcedimentoOS.WriteLine("FROM dado.TblServidorAutomacao ")
		Do sqlProcedimentoOS.WriteLine("WHERE ListaSetores like %?%")
		Set sqlProcedimentoOS = sqlProcedimentoOS.Read(sqlProcedimentoOS.Size)
		Set statement = ##class(%SQL.Statement).%New(2)
		$$$THROWONERROR(Status,statement.%Prepare(sqlProcedimentoOS))
		Set rsProcedimentoOS = statement.%Execute(pOS)
		If rsProcedimentoOS.%Next()
		{
				
		}
	}
	Quit listaObjProcedimento
]]></Implementation>
</Method>

<Method name="ValidaDeParaAutomacao">
<Description>
Valida se o exame esta na tabela do shift automação, senao tiver nao o inclui na lista</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdExame:%String,pIntegracao</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try
	{	
		K parms
		Set parms($I(parms)) = pIntegracao
		Set Status = '$$$OK
		
		Set sqlAutomacao = "SELECT "_
						   "       ListaProcedimentos "_
						   "FROM dado.TblServidorAutomacao "_
						   "WHERE "_
						   "       Descricao = ?"
		
		Set statement = ##class(%SQL.Statement).%New()
		Do statement.%Prepare(sqlAutomacao)
		Set resultSet = statement.%Execute(parms...)
		If resultSet.%Next()
		{
			Set listaProcedimentos = resultSet.ListaProcedimentos
			If ($FIND(listaProcedimentos,pIdExame) > 0)
			{
				Set Status = $$$OK	
			}
		}
	}
	Catch(objErro)
	{
		Set Status = objErro.AsStatus()
	}	

	Quit Status
]]></Implementation>
</Method>

<Method name="CarregarStatusByDescricao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDescricao:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try
	{
		Set Status = $$$OK
		Set retornoDescricao = ""
		
		Set sql = "SELECT ID FROM dado.TblStatusExame WHERE Descricao = ?"
        Set statement = ##class(%SQL.Statement).%New()
       
        Set Status = statement.%Prepare(sql)
        If $$$ISERR(Status) Throw ##class(shift.utl.TrataExcecao).StatusExcecao(Status)
        
        Set resultSet = statement.%Execute(pDescricao)

        If (resultSet.%Next())
        {
			Set retornoDescricao  = resultSet.%Get("ID")
        }
	}
	Catch objErro
	{
		Set Status = ##class(shift.utl.TrataExcecao).Excecao(objErro)
        Set proxyDados.Erro = $System.Status.GetErrorText(Status)
	}
	Quit retornoDescricao
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.api.SoapSilva">
<Super>%SOAP.WebService</Super>
<TimeChanged>66954,56095.298389</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>Interoperability</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domínio usado para localização.</Description>
<Default>SCSDOMAIN</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.e-lis.com.br</Default>
</Parameter>

<Parameter name="USECLASSNAMESPACES">
<Description>
Os namespaces das classes referenciadas serão usados no WSDL.</Description>
<Default>1</Default>
</Parameter>

<Method name="ClassMethodWS">
<Description>
{"class":"customizacao.xpto.Abc","method":"HelloWorld","params":["Olá","Mundo"]}
{"data":"","error":""}</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pJson:%Stream.GlobalCharacter</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set retorno = ##class(%Stream.GlobalCharacter).%New()
	Set retornoJson = ##class(interoperability.api.models.SoapReturn).%New()
	Try{
		Set objDynamic = {}.%FromJSON(pJson)
		If ((objDynamic.class = "")||
			(objDynamic.method = "")||
			($FIND(objDynamic.class,"interoperability.util") = 0)) 
			{
				Set retornoJson.error = "Você não tem permissão para acessar esse recurso."
				$$$THROWONERROR(Status, ##class(%ZEN.Auxiliary.altJSONProvider).%WriteJSONStreamFromObject(.retorno,retornoJson,,,1,"aelo"))
				Return retorno
			}
		
		Set params = ""
		Set iterator = objDynamic.params.%GetIterator()
		While iterator.%GetNext(.index, .param){
			Set params($I(params)) = param
		}
		
		Set retornoStream = $CLASSMETHOD(objDynamic.class,objDynamic.method,params...)
		Set retornoJson.data = retornoStream		
	}
	Catch(ex)
	{
		Set retornoJson.error = ex.DisplayString()
	}
	$$$THROWONERROR(Status, ##class(%ZEN.Auxiliary.altJSONProvider).%WriteJSONStreamFromObject(.retorno,retornoJson,,,1,"aelos"))
	Return retorno
]]></Implementation>
</Method>

<Method name="ImportarPedidoAssincrono">
<Description>
pPedidoLab: xml do pedidoLab
pLinkEnsemble: Determina o webService da integração de retorno da importação do pedido
pToken: Token definido para controle do andamento do processo de geração de pedido</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab,pLinkEnsemble:%String(MAXLEN=""),pToken:%String(MAXLEN=""),*pDescricaoErro:%String(MAXLEN="")</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[

	Try{		
		Set tStatus = 1
		Set pDescricaoErro = ""
		Set ^ControleTokenInteroperability(pToken) = 1
		Set ^ControleTokenInteroperability(pToken,"LinkEnsemble") = pLinkEnsemble
		Set ^ControleTokenInteroperability(pToken,"Servidor") = $ZU(110)
		Set ^ControleTokenInteroperability(pToken,"JOB") = $JOB
		Do pPedidoLab.XMLExportToStream(.pedidoStream)
		Set arquivo = ##class(%FileCharacterStream).%New()
		Set arquivo.Filename = ##class(%File).TempFilename("xml")
		Set tStatus = arquivo.CopyFromAndSave(pedidoStream)
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		Set ^ControleTokenInteroperability(pToken,"Arquivo") = arquivo.Filename
		Job ..ImportarPedidoJob(pToken)
	}Catch(ex){
		Set tStatus = 0
		Set pDescricaoErro = ex.DisplayString()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="ImportarPedidoJob">
<Description>
Exemplo:
Do ..ImportarPedidoJob("6655643872063648;10886;")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pToken:%String(MAXLEN="")</FormalSpec>
<Implementation><![CDATA[

	Set limiteReprocesso = 20
	Set $LIST(listaErrosReprocesso,*+1) = "ERRO #5803: Não foi possível obter o lock exclusivo na instância de 'dado.TblPessoaFisica'"
	
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set xmlReader = ##class(%XML.Reader).%New()
		Set arquivo = ##class(%Stream.FileCharacter).%New()
		Set arquivo.Filename = ^ControleTokenInteroperability(pToken,"Arquivo")
		
		Set tStatus = xmlReader.OpenStream(arquivo)
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		Set linkIntegracao = ^ControleTokenInteroperability(pToken,"LinkEnsemble")
		
		Do xmlReader.Correlate("pedidoLab","s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab")
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		If xmlReader.Next(.pedidoLab,.tStatus) {
			For contadorLimite=1:limiteReprocesso{
				Set sucesso = ##class(interoperability.api.Soap).ImportarPedido(pedidoLab,.retorno)
				// Se não encontrou erro de lock sai do FOR
				Quit:'$LF(listaErrosReprocesso,retorno.DescricaoErro)
				Hang 1
			}
			If linkIntegracao '= "" {
				
				Set wsEnsemble = ##class(interoperability.client.WSEnsembleSoap).%New()
				
				If $FIND(linkIntegracao,"https")>0 {
					Set wsEnsemble.SSLConfiguration = "EmailSSL"
				}
				Set wsEnsemble.Location = linkIntegracao			
				
				set tRetorno = ""
				Do retorno.XMLExportToString(.tRetorno)
								
				Set tStatus = wsEnsemble.RetornoPedido(pToken,tRetorno,retorno.Retorno,retorno.DescricaoErro)
				
				Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
			}
			Do retorno.XMLExportToStream(.retornoStream)
			Set arquivo = ##class(%FileCharacterStream).%New()
			Set arquivo.Filename = ##class(%File).TempFilename("xml")
			Set tStatus = arquivo.CopyFromAndSave(retornoStream)
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
			Set ^ControleTokenInteroperability(pToken,"ArquivoRetorno") = arquivo.Filename
		}
		Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		Set ^ControleTokenInteroperability(pToken) = 2
	}Catch(ex){
		Set ^ControleTokenInteroperability(pToken) = 3
		Set ^ControleTokenInteroperability(pToken,"MensagemErro") = ex.DisplayString()
	}
]]></Implementation>
</Method>

<Method name="ConsultaTokenPedido">
<ClassMethod>1</ClassMethod>
<FormalSpec>pToken:%String(MAXLEN=""),*pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</FormalSpec>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try{
		Set tStatus = $$$OK
		Set pRetorno = ##class(s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab).%New()
		If '$GET(^ControleTokenInteroperability(pToken),0) {
			Set pRetorno.Retorno = 0
			Set pRetorno.DescricaoErro = "Token não encontrado."
			Set tStatus = $SYSTEM.Status.Error(5001,pRetorno.DescricaoErro)
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		}
		Set pRetorno.Retorno = 1
		Set pRetorno.DescricaoErro = "Em processamento"
		If (^ControleTokenInteroperability(pToken)=2) {
			Set arquivo = ##class(%File).%New(^ControleTokenInteroperability(pToken,"ArquivoRetorno"))
			Do arquivo.Open("RW")
			Set xmlReader = ##class(%XML.Reader).%New()
			Set tStatus = xmlReader.Correlate("retornoLab","s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab")
			#DIM retorno As s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab
			Do xmlReader.Next(.pRetorno,.tStatus) 
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		} ElseIf (^ControleTokenInteroperability(pToken)=3) {
			Set pRetorno.Retorno = 0
			Set pRetorno.DescricaoErro = ^ControleTokenInteroperability(pToken,"MensagemErro")
			Set tStatus = $SYSTEM.Status.Error(5001,pRetorno.DescricaoErro)
			Throw:$$$ISERR(tStatus) ##class(%Exception.StatusException).CreateFromStatus(tStatus)
		}
	}Catch(ex){
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="ImportarPedido">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab,*pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {
		Set sucesso = 0
		#Dim tExame As s01.util.b2b.shiftLis.ensemblev2.imp.Exame
		// executa depara entrada futuro
		For contadorExame=1:1:pPedidoLab.Exame.Count() {
			Set tExame = pPedidoLab.Exame.GetAt(contadorExame)
			Set tMnemonico = tExame.Codigo
			Set:(##class(dado.TblExame).%ExistsId(tMnemonico)) tMnemonico = ##class(dado.TblExame).MnemonicoGetStored(tMnemonico)
			Continue:('##class(dado.TblExame).idxMnemonicoExists(tMnemonico))
			Set ^||ControleExame(tMnemonico) = tExame.Codigo
		}
		Set objPedido = ##class(s01.util.b2b.shiftLis.ensemblev2.Pedido).%New()
		Set sucesso = objPedido.ImportarPedido(pPedidoLab,.pRetorno)
		For contadorExame=1:1:pRetorno.Exames.Count(){
			Set pRetorno.Exames.GetAt(contadorExame).Codigo = $Get(^||ControleExame(pRetorno.Exames.GetAt(contadorExame).Codigo),pRetorno.Exames.GetAt(contadorExame).Codigo)
		}
		// executa depara retorno futuro
	}Catch(ex){
		Set tStatus = ex.AsStatus()
	}
	Return sucesso
]]></Implementation>
</Method>

<Method name="ValidarImportacaoPedido">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab,*pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {
		Set sucesso = 0
		
		#Dim tExame As s01.util.b2b.shiftLis.ensemblev2.imp.Exame
		For contadorExame=1:1:pPedidoLab.Exame.Count() {
			Set tExame = pPedidoLab.Exame.GetAt(contadorExame)
			Set tMnemonico = tExame.Codigo
			Set:(##class(dado.TblExame).%ExistsId(tMnemonico)) tMnemonico = ##class(dado.TblExame).MnemonicoGetStored(tMnemonico)
			Continue:('##class(dado.TblExame).idxMnemonicoExists(tMnemonico))
			Set ^||ControleExame(tMnemonico) = tExame.Codigo
		}
		
		Set objPedidoValidacao = ##class(interoperability.util.ValidarPedido).%New()
		Set sucesso = objPedidoValidacao.ValidarImportacaoPedido(pPedidoLab,.pRetorno)
		For contadorExame=1:1:pRetorno.Exames.Count(){
			Set pRetorno.Exames.GetAt(contadorExame).Codigo = $Get(^||ControleExame(pRetorno.Exames.GetAt(contadorExame).Codigo),pRetorno.Exames.GetAt(contadorExame).Codigo)
		}
	}Catch(ex){
		Set tStatus = ex.AsStatus()
	}
	Return sucesso
]]></Implementation>
</Method>

<Method name="SalvaInfoPreAnalitica">
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set Retorno = $$$OK
    Try {  
		Set objPedidoValidacao = ##class(interoperability.util.SalvarInfPreAnalitica).%New()
		Set sucesso = objPedidoValidacao.SalvaInfoPreAnaliticasDoProcedimento(pPedidoLab)
		Set sucesso = objPedidoValidacao.SalvarPerguntasNaInclusaoProcedimento(pPedidoLab)
    } Catch(ex){        
        Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
        Set Retorno = ex.Name _ " - " _ ex.Data
    }
    Quit Retorno
]]></Implementation>
</Method>

<Method name="BuscaDadosMedico">
<FormalSpec>pCrm:%String,pConselho:%String,pUfConselho:%String,*pNomeMedico:%String="",*pIdMedico:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try{	
		Set retorno = 1
		Set sql = 
			"SELECT ID, "_
			"PessoaFisica->Nome "_
			"FROM dado.ArqSolicitante " _
			"WHERE Conselho = ? AND ConselhoNumero = ? AND ConselhoEstado = ? "
		Set rs = ##class(%ResultSet).%New()
		Set sc = rs.Prepare(sql)
		Set sc = rs.Execute(pConselho,pCrm,pUfConselho)
		If rs.Next(){
			Set pNomeMedico = rs.ID
			Set pIdMedico = rs.Nome
		}		
	}Catch(pExcecao){
		Set faultString = pExcecao.Name _ " - " _ pExcecao.Data
		Set fault=##class(%SOAP.Fault).%New()
		Set fault.faultcode = $$$FAULTServer
		Set fault.faultstring = faultString
		Set pString = $REPLACE(pExcecao.DisplayString(), "<", "&lt;")
	    Set pString = $REPLACE(pString, ">", "&gt;")
		Set fault.detail = pString
		Do ..ReturnFault(fault)
		Set retorno = 0
	}
	Return retorno
]]></Implementation>
</Method>

<Method name="CancelarProcedimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pParametrosRequisicao:s01.util.b2b.shiftLis.ensemblev2.cancelamento.requisicao.Requisicao,*pRetorno:s01.util.b2b.shiftLis.ensemblev2.cancelamento.resposta.Resposta</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set retorno = 1
	Try {
		Set controleCancelamento = ##class(s01.util.b2b.shiftLis.ensemblev2.cancelamento.Cancelamento).%New()
		For idxExame = 1:1:pParametrosRequisicao.Procedimentos.Count()
		{
			If ##class(dado.TblExame).idxMnemonicoExists(pParametrosRequisicao.Procedimentos.GetAt(idxExame).Codigo,.procedimento) {

				Set pParametrosRequisicao.Procedimentos.GetAt(idxExame).Codigo = procedimento
			}
		}
		Set controleCancelamento.Requisicao = pParametrosRequisicao
		Set pRetorno = controleCancelamento.ProcessarRequisicao()
	}Catch(ex) {
		Throw ex
		Set retorno = 0
	}
	
	Return retorno
]]></Implementation>
</Method>

<Method name="RetornaStatusProcedimentos">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLista:interoperability.api.dto.Exames,*pRetorno:interoperability.api.dto.Exames</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Set sucesso = 1
	
	Try 
	{
		Set pRetorno = ##Class(interoperability.api.dto.Exames).%New()
		
		For contadorExame = 1 : 1 : pLista.Exames.Count()
		{
			Set Status = pRetorno.Exames.SetAt(pLista.Exames.GetAt(contadorExame), contadorExame)
			Throw:$$$ISERR(Status) ##class(%Exception.StatusException).CreateFromStatus(Status)
			
			Set codigoExame = pRetorno.Exames.GetAt(contadorExame).Codigo
			Set pRetorno.Exames.GetAt(contadorExame).Status = 0
			
			Do ##class(dado.TblExame).idxMnemonicoExists(codigoExame,.idMnemonicoExame)
			
			If (idMnemonicoExame '= "")
			{
				Set codigoExame = idMnemonicoExame				
			}
			
			If (##class(dado.TblExame).%ExistsId(codigoExame))
			{			
				Set pRetorno.Exames.GetAt(contadorExame).Status = ##class(dado.TblExame).StatusGetStored(codigoExame)
			}
		}
	}
	Catch(ex)
	{
		Set tStatus = ex.AsStatus()
		Set sucesso = 0
	}

	Return sucesso
]]></Implementation>
</Method>

<Method name="BuscaDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String,pListaLog:%String=""</FormalSpec>
<ReturnType>interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	Try {		
		Return ..PreencherDadosStatus(pDataInicial,pHoraInicial,pDataFinal,pHoraFinal,pIntegracao,pListaLog)
	} Catch(ex){		
		Do ##class(s00.util.Padrao).ApresentaExcecao(ex, 2)
	}
	
	Return ##class(interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno).%New()
]]></Implementation>
</Method>

<Method name="PreencherDadosStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataInicial:%String,pHoraInicial:%String,pDataFinal:%String,pHoraFinal:%String,pIntegracao:%String="",pListaLog:%String=""</FormalSpec>
<ReturnType>interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno</ReturnType>
<Implementation><![CDATA[
	
	Try {
		
		K parms
		Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataInicial)
		Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataFinal)
		Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraInicial,"hora")
		Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraFinal,"hora")
		Set parms($I(parms)) = $LISTFROMSTRING(pListaLog)
		Set Status = $$$OK
		
		Set sqlLogOperacao = "SELECT "_
							 "       ID, "_
							 "       Dado1, "_
							 "       Dado2, "_
							 "       LogId->Tipo "_
							 "FROM dado.TblLogOperacao "_
							 "WHERE "_
							 "       Data BETWEEN ? AND ? "_
							 "AND   "_
							 "       Hora BETWEEN ? AND ? "_
							 "AND   "_
							 "       LogId %INLIST  ? "_
							 "AND   "_
							 "       LogId->Tipo != '2' "_
							 "GROUP BY "_
							 "       Dado1 , Dado2 "_
							 "ORDER BY "_
							 "       Id ASC"
		
		If (pListaLog = "001")
		{
			K parms
			Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataInicial)
			Set parms($I(parms)) = ##class(s00.util.DataHora).OdbcToLogical(pDataFinal)
			Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraInicial,"hora")
			Set parms($I(parms)) = ##class(s00.util.DataHora).DisplayToLogical(pHoraFinal,"hora")
			Set parms($I(parms)) = $LISTFROMSTRING(pListaLog)
			Set parms($I(parms)) = "2"
			Set parms($I(parms)) = "4"
			Set parms($I(parms)) = "100"

			Set sqlLogOperacao = 	"SELECT 									" _
									"		LOG100.ID, 							" _
									"		LOG100.DADO1,						" _
									"		LOG100.DADO2,						" _
									"		LOG100.LOGID->TIPO					" _
									"FROM DADO.TBLLOGOPERACAO LOG001			" _
									"	INNER JOIN DADO.TBLLOGOPERACAO LOG100	" _
									"		ON LOG001.DADO1 = LOG100.DADO2		" _
									"WHERE 										" _
									"		LOG001.DATA BETWEEN ? AND ? 		" _
									"AND 										" _ 
									"		LOG001.HORA BETWEEN ? AND ? 		" _
									"AND 										" _
									"		LOG001.LOGID %INLIST  ? 			" _
									"AND 										" _
									"		LOG001.LOGID->TIPO != ? 			" _
									"AND 										" _
									"		LOG100.LOGID->TIPO = ? 				" _
									"AND 										" _
									"		LOG100.LOGID = ? 					" _
									"ORDER BY 									" _ 
									"		ID ASC 								"
		}

		Set statement = ##class(%SQL.Statement).%New()
		$$$THROWONERROR(Status,statement.%Prepare(sqlLogOperacao))
		Set resultSet = statement.%Execute(parms...)
	
		Set objDadosRetorno = ##class(interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno).%New()
		While resultSet.%Next()
		{
			Set os = resultSet.Dado2
			Set procedimento = resultSet.Dado1
			Set idLogOperacao = resultSet.Id
			If (resultSet.Tipo =1)
			{
				Set os = resultSet.Dado1
			}
			If ((resultSet.Tipo =2)||(resultSet.Tipo =4))
			{
				Set os = resultSet.Dado2	
			}
			Set parmsProcedimento($I(parmsProcedimento)) = os
			
			Set sqlOsProcedimento = "SELECT "_
								    "       Id "_
								    "FROM dado.TblOsProcedimento "_
								    "WHERE "_
								    "       Os = ? "
			If (resultSet.Tipo = 4)
            {
                Set sqlOsProcedimento = sqlOsProcedimento_"AND Procedimento = ? "
                Set parmsProcedimento($I(parmsProcedimento)) = procedimento
            }
            
            Set statement = ##class(%SQL.Statement).%New()
            $$$THROWONERROR(Status,statement.%Prepare(sqlOsProcedimento))
            Set rsOsProcedimento = statement.%Execute(parmsProcedimento...)
			While (rsOsProcedimento.%Next())
			{
				Set idOsProcedimento = rsOsProcedimento.Id
				$$$THROWONERROR(Status,..PreencherDadosRetornoStatus(os,idOsProcedimento,idLogOperacao,.objDadosRetorno,pIntegracao))					
			}
			Kill parmsProcedimento
			
		}
		
	}Catch(objExcecao) {	
		Set objDadosRetorno.Situacao = 0
		Set objDadosRetorno.DescricaoErro = objExcecao.Name _ " - " _ objExcecao.Data
	}
	Return objDadosRetorno
]]></Implementation>
</Method>

<Method name="PreencherDadosRetornoStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOs:%String,pIdOsProcedimento:%String,pIdLogOperacao:%String,&objDadosRetorno:interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno,pIntegracao:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status = $$$OK
	Try
	{
		Set tblLogOperacao = ##class(dado.TblLogOperacao).%OpenId(pIdLogOperacao)
		If '$ISOBJECT(tblLogOperacao) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblLogOperacao não encontrado para ID "_pIdLogOperacao_".")					
				
		Set arqOrdemServico = ##class(dado.ArqOrdemServico).%OpenId(pIdOs)
		If '$ISOBJECT(arqOrdemServico) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.ArqOrdemServico não encontrado para OS com ID "_pIdOs_".")
				
		Set tblOsProcedimento = ##class(dado.TblOsProcedimento).%OpenId(pIdOsProcedimento)		
		If '$ISOBJECT(tblOsProcedimento) Throw ##class(s00.util.Excecao).%New("Registro da tabela dado.TblOsProcedimento não encontrado para ID "_pIdOsProcedimento_".")
		
		Set exameValido=..ValidaDeParaAutomacao(tblOsProcedimento.Procedimento.%Id(),pIntegracao)
		If 'exameValido Quit		

		Set osIncluida = 0
		Set qtdeOsIncluidas = objDadosRetorno.OrdemServico.Count()
		
		For contOsInc=1:1:qtdeOsIncluidas
		{
			// OS já estava incluída na lista
			If (objDadosRetorno.OrdemServico.GetAt(contOsInc).CodigoOs = arqOrdemServico.CodigoOs)
			{
				Set osIncluida = 1
				Set exameIncluido = 0
				
				Set qtdeEx = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Count()
				For contEx=1:1:qtdeEx
				{
					// Exame já estava incluído na OS
					If (objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).Codigo = pIdOsProcedimento)
					{
						If (tblLogOperacao.Data > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento)
						{
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = tblLogOperacao.Data
							Set exameIncluido = 1
						}
						If (tblLogOperacao.Hora > objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento)
						{
							Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = tblLogOperacao.Hora
							Set exameIncluido = 1
						}
					}
				}
				// Exame não estava incluído na OS
				If ('exameIncluido)
				{
					Set objExame = ##class(interoperability.api.xml.buscadadosstatus.response.ExameStatus).%New()
					Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
					Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
					Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
					Set objExame.Status = tblOsProcedimento.Status.Id
					Set objExame.Urgente = tblOsProcedimento.Prioridade
					Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
					Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
					If $ISOBJECT(tblLogOperacao.MotivoId)
					{
						Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
						Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
					}
					If $ISOBJECT(tblLogOperacao.UsuarioId)
					{
						If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica)
						{
							Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
						}
					}
					
					//Inserindo dados do medico
					Do ..MontaObjMedico(pIdOsProcedimento, .objExame)
					
					//Inserindo dados do Material
					Do ..MontaObjMaterial(pIdOsProcedimento, .objExame)
					
					//Inserindo dados da Amostra
					Do ..MontaObjAmostra(pIdOsProcedimento, .objExame)
					
					Do objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.Insert(objExame)
				}Else{
					
					//Inserindo dados do medico
					Set objExameAux = objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx)
					Do ..MontaObjMedico(pIdOsProcedimento, .objExameAux)
										
					//Inserindo dados do Material
					Do ..MontaObjMaterial(pIdOsProcedimento, .objExameAux)
										
					///Inserindo dados da Amostra
					Do ..MontaObjAmostra(pIdOsProcedimento, .objExameAux)
										
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento = $ZDATE(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).DataEvento,3)
					Set objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento = $ZTIME(objDadosRetorno.OrdemServico.GetAt(contOsInc).Exames.GetAt(contEx).HoraEvento)
					
				}
			}
		}
		
		// OS não estava incluída na lista
		If 'osIncluida{
			Set objOrdemServico = ##class(interoperability.api.xml.buscadadosstatus.response.OrdemServicoStatus).%New()
			Set objOrdemServico.CodigoOs = arqOrdemServico.CodigoOs
			Set objOrdemServico.PedidoCliente = arqOrdemServico.NroIdentificacaoOsLisOrigem
						
			Set objExame = ##class(interoperability.api.xml.buscadadosstatus.response.ExameStatus).%New()
			Set objExame.Codigo = tblOsProcedimento.Procedimento.%Id()
			Set objExame.Mnemonico = tblOsProcedimento.Procedimento.Mnemonico
			Set objExame.Descricao = tblOsProcedimento.Procedimento.Descricao			
			Set objExame.Status = tblOsProcedimento.Status.Id		
			Set objExame.Urgente = tblOsProcedimento.Prioridade
			Set objExame.DataEvento = $ZDATE(tblLogOperacao.Data,3)
			Set objExame.HoraEvento = $ZTIME(tblLogOperacao.Hora)
			If $ISOBJECT(tblLogOperacao.MotivoId){
				Set objExame.MotivoEvento = tblLogOperacao.MotivoId.Descricao
				Set objExame.CdMotivoEvento = tblLogOperacao.MotivoId.Classe
			}
			If $ISOBJECT(tblLogOperacao.UsuarioId){
				If $ISOBJECT(tblLogOperacao.UsuarioId.PessoaFisica){
					Set objExame.UsuarioEvento = tblLogOperacao.UsuarioId.PessoaFisica.Nome
				}
			}
			
			//Inserindo dados do medico
			Do ..MontaObjMedico(pIdOsProcedimento, .objExame)
					
			//Inserindo dados do Material
			Do ..MontaObjMaterial(pIdOsProcedimento, .objExame)
			
			//Inserindo dados da Amostra
			Do ..MontaObjAmostra(pIdOsProcedimento, .objExame)
			
			//Inserindo dados do paciente
			Set objPaciente = ##class(interoperability.api.xml.buscadadosstatus.response.PacienteStatus).%New()
			Set objPaciente.Id = arqOrdemServico.Paciente.PessoaFisica.%Id()
			Set objPaciente.Nome = arqOrdemServico.Paciente.PessoaFisica.Nome
			Set objPaciente.DataNascimento = arqOrdemServico.Paciente.PessoaFisica.DataNascimento
			If (((arqOrdemServico.Paciente.PessoaFisica.Sexo)="M")||((arqOrdemServico.Paciente.PessoaFisica.Sexo)="F"))
			{
				Set objPaciente.Sexo = arqOrdemServico.Paciente.PessoaFisica.Sexo
			}
			Else
			{
				Set objPaciente.Sexo = "U"	
			}
			Do objOrdemServico.Paciente.Insert(objPaciente)
			
			//Inserindo dados do posto
			Set objPosto = ##class(interoperability.api.xml.buscadadosstatus.response.PostoStatus).%New()
			Set objPosto.Id = arqOrdemServico.Posto.%Id()
			Set objPosto.Descricao = arqOrdemServico.Posto.Descricao
			Do objOrdemServico.Posto.Insert(objPosto)
					
			Do objOrdemServico.Exames.Insert(objExame)
			
			Do objDadosRetorno.OrdemServico.Insert(objOrdemServico)
		}				
	}
	Catch(objErro)
	{
		Set Status = objErro.AsStatus()
	}	
	
	Quit Status
]]></Implementation>
</Method>

<Method name="RetornarSolicitantesOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdOsProcedimento:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set listaObjSolicitante = ##class(%ListOfObjects).%New()
	
	Set sqlSolicitanteOS = "SELECT "_
						   "       Solicitante "_
						   "FROM dado.TblOsExameSolicitante "_
						   "WHERE "_
						   "       OsProcedimento = ?"
						   
	Set statement = ##class(%SQL.Statement).%New()
	$$$THROWONERROR(Status,statement.%Prepare(sqlSolicitanteOS))
	Set rsOsSolicitante = statement.%Execute(pIdOsProcedimento)
	
	While rsOsSolicitante.%Next()
	{
		Set objSolicitante = ##class(dado.ArqSolicitante).%OpenId(rsOsSolicitante.Solicitante)
		Do listaObjSolicitante.Insert(objSolicitante)
	}
	Quit listaObjSolicitante
]]></Implementation>
</Method>

<Method name="RetornarAmostrasOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdOsProcedimento:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set listaObjAmostra = ##class(%ListOfObjects).%New()
		
	Set sqlAmostraOS =	"SELECT "_
						"        RecipienteOs " _
						"FROM dado.TblOsRecipienteProcedimento " _
						"WHERE "_
						"        OsProcedimento = ? "
	
	Set statement = ##class(%SQL.Statement).%New()
	$$$THROWONERROR(Status,statement.%Prepare(sqlAmostraOS))
	
	Set rsOsAmostra = statement.%Execute(pIdOsProcedimento)
	
	While rsOsAmostra.%Next()
	{
		Set objAmostra = ##class(dado.TblOsRecipiente).%OpenId(rsOsAmostra.RecipienteOs)
		Do listaObjAmostra.Insert(objAmostra)
	}
	
	Quit listaObjAmostra
]]></Implementation>
</Method>

<Method name="RetornarMaterialOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdOsProcedimento:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set listaObjProcedimento = ##class(%ListOfObjects).%New()
	
	Set sqlProcedimentoOS = "SELECT "_
	                        "       Id "_
	                        "FROM dado.TblOsProcedimentoAC "_
	                        "WHERE "_
	                        "       Id = ?"
	
	Set statement = ##class(%SQL.Statement).%New()
	$$$THROWONERROR(Status,statement.%Prepare(sqlProcedimentoOS))
	Set rsProcedimentoOS = statement.%Execute(pIdOsProcedimento)
	
	While rsProcedimentoOS.%Next()
	{
		Set objProcedimento = ##class(dado.TblOsProcedimentoAC).%OpenId(rsProcedimentoOS.Id)
		Do listaObjProcedimento.Insert(objProcedimento)
	}
	Quit listaObjProcedimento
]]></Implementation>
</Method>

<Method name="MontaObjMedico">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOsProcedimento:%String,&objExame:interoperability.api.xml.buscadadosstatus.response.ExameStatus]]></FormalSpec>
<Implementation><![CDATA[
	Set listaObjMedico = ..RetornarSolicitantesOS(pIdOsProcedimento)
	Set qtdeListaObjMedico = listaObjMedico.Count()

	For indiceMedico=1:1:qtdeListaObjMedico
	{
		Set objMedico = ##class(interoperability.api.xml.buscadadosstatus.response.MedicoStatus).%New()
		Set objMedico.Nome = listaObjMedico.GetAt(indiceMedico).PessoaFisica.Nome
		Set objMedico.ConselhoNumero = listaObjMedico.GetAt(indiceMedico).ConselhoNumero
		Set objMedico.ConselhoEstado = listaObjMedico.GetAt(indiceMedico).ConselhoEstado
		Set objMedico.ConselhoSigla = listaObjMedico.GetAt(indiceMedico).Conselho.Id
		
		Do objExame.Medico.Insert(objMedico)
	}
]]></Implementation>
</Method>

<Method name="MontaObjMaterial">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOsProcedimento:%String,&objExame:interoperability.api.xml.buscadadosstatus.response.ExameStatus]]></FormalSpec>
<Implementation><![CDATA[
	
	
	Set objProcedimentoAC = ##class(dado.TblOsProcedimentoAC).%OpenId(pIdOsProcedimento)
	Set objMaterial = ##class(interoperability.api.xml.buscadadosstatus.response.MaterialStatus).%New()
	Set objMaterial.Id = objProcedimentoAC.Material.Id
	Set objMaterial.Descricao = objProcedimentoAC.Material.Descricao
	Do objExame.Material.Insert(objMaterial)
]]></Implementation>
</Method>

<Method name="MontaObjAmostra">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pIdOsProcedimento:%String,&objExame:interoperability.api.xml.buscadadosstatus.response.ExameStatus]]></FormalSpec>
<Implementation><![CDATA[
	Set listaObjAmostra = ..RetornarAmostrasOS(pIdOsProcedimento)
	Set qtdeListaObjAmostra = listaObjAmostra.Count()

	For indiceAmostra=1:1:qtdeListaObjAmostra
	{
		Set objAmostra = ##class(interoperability.api.xml.buscadadosstatus.response.AmostraStatus).%New()
		//Set objAmostra.Data = listaObjAmostra.GetAt(indiceAmostra).Data
		//Set objAmostra.Hora = listaObjAmostra.GetAt(indiceAmostra).Hora
		Set objAmostra.Cbarra = listaObjAmostra.GetAt(indiceAmostra).Cbarra
		Do objExame.Amostra.Insert(objAmostra)
	
	}
]]></Implementation>
</Method>

<Method name="RetornarEquipamentosOS">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOS:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	Set objProcedimento = ##class(dado.TblOsProcedimento).%New()
	Set listaObjProcedimento = ##class(%ListOfObjects).%New()
	Set sqlProcedimentoOS = ##class(%Stream.GlobalCharacter).%New()
	Do sqlProcedimentoOS.WriteLine("SELECT Id ")
	Do sqlProcedimentoOS.WriteLine("FROM dado.TblOsProcedimento ")
	Do sqlProcedimentoOS.WriteLine("WHERE Os = ?")
	Set sqlProcedimentoOS = sqlProcedimentoOS.Read(sqlProcedimentoOS.Size)
	Set statement = ##class(%SQL.Statement).%New(2)
	$$$THROWONERROR(Status,statement.%Prepare(sqlProcedimentoOS))
	Set rsProcedimentoOS = statement.%Execute(pOS)
	
	If rsProcedimentoOS.%Next()
	{
		Set setor = ##class(dado.TblOsProcedimento).SetorGetStored(rsProcedimentoOS.Id)
		If $Length(setor) = 1
		{ 
			Set setor = "00"_setor	
		}
		If $Length(setor) = 2
		{
			Set setor = "0"_setor	
		}
		Set sqlProcedimentoOS = ##class(%Stream.GlobalCharacter).%New()
		Do sqlProcedimentoOS.WriteLine("SELECT Id ")
		Do sqlProcedimentoOS.WriteLine("FROM dado.TblServidorAutomacao ")
		Do sqlProcedimentoOS.WriteLine("WHERE ListaSetores like %?%")
		Set sqlProcedimentoOS = sqlProcedimentoOS.Read(sqlProcedimentoOS.Size)
		Set statement = ##class(%SQL.Statement).%New(2)
		$$$THROWONERROR(Status,statement.%Prepare(sqlProcedimentoOS))
		Set rsProcedimentoOS = statement.%Execute(pOS)
		If rsProcedimentoOS.%Next()
		{
				
		}
	}
	Quit listaObjProcedimento
]]></Implementation>
</Method>

<Method name="ValidaDeParaAutomacao">
<Description>
Valida se o exame esta na tabela do shift automação, senao tiver nao o inclui na lista</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIdExame:%String,pIntegracao</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try
	{	
		K parms
		Set parms($I(parms)) = pIntegracao
		Set Status = '$$$OK
		
		Set sqlAutomacao = "SELECT "_
						   "       ListaProcedimentos "_
						   "FROM dado.TblServidorAutomacao "_
						   "WHERE "_
						   "       Descricao = ?"
		
		Set statement = ##class(%SQL.Statement).%New()
		Do statement.%Prepare(sqlAutomacao)
		Set resultSet = statement.%Execute(parms...)
		If resultSet.%Next()
		{
			Set listaProcedimentos = resultSet.ListaProcedimentos
			If ($FIND(listaProcedimentos,pIdExame) > 0)
			{
				Set Status = $$$OK	
			}
		}
	}
	Catch(objErro)
	{
		Set Status = objErro.AsStatus()
	}	

	Quit Status
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.api.dto.Exame">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66904,41841.813534</TimeChanged>
<TimeCreated>66865,31914.200655</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.shift.interoperability.com.br</Default>
</Parameter>

<Parameter name="XMLNAME">
<Default>exame</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>0</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Codigo">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="codigo"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="status"/>
</Property>

<Property name="CodigoCliente">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="codigoCliente"/>
</Property>
</Class>


<Class name="interoperability.api.dto.Exames">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66896,50200.166906</TimeChanged>
<TimeCreated>66865,31914.200655</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*Parameter NAMESPACE = "http://www.shift.interoperability.com.br";

Parameter XMLNAME = "Requisicao";

Parameter XMLIGNORENULL = 1;

Property Exames As list Of interoperability.api.dto.Exame(XMLNAME = "Exames") [ Required ];*/
]]></Content>
</UDLText>

<Parameter name="NAMESPACE">
<Default>http://www.shift.interoperability.com.br</Default>
</Parameter>

<Parameter name="XMLNAME">
<Default>Resposta</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>0</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Exames">
<Type>interoperability.api.dto.Exame</Type>
<Collection>list</Collection>
<Required>1</Required>
<Parameter name="XMLNAME" value="exames"/>
</Property>
</Class>


<Class name="interoperability.api.dto.request.Exames">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66896,50068.096321</TimeChanged>
<TimeCreated>66865,31914.200655</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.shift.interoperability.com.br</Default>
</Parameter>

<Parameter name="XMLNAME">
<Default>Requisicao</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>0</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Exames">
<Type>interoperability.api.dto.Exame</Type>
<Collection>list</Collection>
<Required>1</Required>
<Parameter name="XMLNAME" value="exames"/>
<Parameter name="XMLPROJECTION" value="wrapped"/>
</Property>
</Class>


<Class name="interoperability.api.dto.response.Exames">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66896,50064.900806</TimeChanged>
<TimeCreated>66865,31914.200655</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.shift.interoperability.com.br</Default>
</Parameter>

<Parameter name="XMLNAME">
<Default>Resposta</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>0</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Exames">
<Type>interoperability.api.dto.Exame</Type>
<Collection>list</Collection>
<Required>1</Required>
<Parameter name="XMLNAME" value="exames"/>
</Property>
</Class>


<Class name="interoperability.api.models.SQLQuery">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>66865,44638.302824</TimeChanged>
<TimeCreated>66865,31914.200655</TimeCreated>

<Property name="instrucao">
<Type>%String</Type>
<InitialExpression>"SELECT"</InitialExpression>
<Required>1</Required>
<Parameter name="VALUELIST" value=",SELECT"/>
</Property>

<Property name="colunas">
<Type>%String</Type>
<Collection>list</Collection>
<Required>1</Required>
</Property>

<Property name="from">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
</Property>

<Property name="where">
<Type>%String</Type>
<Collection>list</Collection>
<Required>1</Required>
<Parameter name="MAXLEN"/>
</Property>

<Property name="joins">
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="MAXLEN"/>
</Property>

<Property name="clausula">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="params">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="returnSchema">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="runtimeMode">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
<Parameter name="DISPLAYLIST" value=",LOGICAL,ODBC,DISPLAY"/>
<Parameter name="VALUELIST" value=",0,1,2"/>
</Property>
</Class>


<Class name="interoperability.api.models.SoapReturn">
<Super>%RegisteredObject</Super>
<TimeChanged>66905,39609.486603</TimeChanged>
<TimeCreated>66905,39609.486603</TimeCreated>

<Property name="data">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="error">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.request.DadosRetornoStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66925,30393.425681</TimeChanged>
<TimeCreated>66925,30389.98749</TimeCreated>

<Property name="DataInicial">
<Type>%String</Type>
</Property>

<Property name="HoraInicial">
<Type>%String</Type>
</Property>

<Property name="DataFinal">
<Type>%String</Type>
</Property>

<Property name="HoraFinal">
<Type>%String</Type>
</Property>

<Property name="Integracao">
<Type>%String</Type>
</Property>

<Property name="ListaLog">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>DadosRetornoStatusState</State>
<StreamLocation>^interopera589C.DadosRetorno57DS</StreamLocation>
<Data name="DadosRetornoStatusState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>DataInicial</Value>
</Value>
<Value name="2">
<Value>HoraInicial</Value>
</Value>
<Value name="3">
<Value>DataFinal</Value>
</Value>
<Value name="4">
<Value>HoraFinal</Value>
</Value>
<Value name="5">
<Value>Integracao</Value>
</Value>
<Value name="6">
<Value>ListaLog</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.AmostraStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66937,64453.557039</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>amostraStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Cbarra">
<Type>%String</Type>
<Parameter name="XMLNAME" value="cbarra"/>
</Property>

<Property name="Data">
<Type>%String</Type>
<Parameter name="XMLNAME" value="data"/>
</Property>

<Property name="Hora">
<Type>%String</Type>
<Parameter name="XMLNAME" value="hora"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>AmostraStatusState</State>
<StreamLocation>^interoperabi1BFA.AmostraStatusS</StreamLocation>
<Data name="AmostraStatusState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Cbarra</Value>
</Value>
<Value name="2">
<Value>Data</Value>
</Value>
<Value name="3">
<Value>Hora</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.DadosStatusRetorno">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66943,61179.947513</TimeChanged>
<TimeCreated>66912,43308.572963</TimeCreated>

<Parameter name="XMLIGNORENULL">
<Default>0</Default>
</Parameter>

<Property name="OrdemServico">
<Type>interoperability.api.xml.buscadadosstatus.response.OrdemServicoStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="ordemServicoStatus"/>
<Parameter name="XMLNAME" value="ordensServicoStatus"/>
</Property>

<Property name="Retorno">
<Type>%String</Type>
</Property>

<Property name="DescricaoErro">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>DadosStatusRetornoState</State>
<StreamLocation>^interopera4EC4.DadosStatusE490S</StreamLocation>
<Data name="DadosStatusRetornoState">
<Value name="1">
<Value>OrdemServico</Value>
</Value>
<Value name="2">
<Value>Retorno</Value>
</Value>
<Value name="3">
<Value>DescricaoErro</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.EquipamentoStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66937,64486.984512</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>equipamentoStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Data">
<Type>%String</Type>
<Parameter name="XMLNAME" value="data"/>
</Property>

<Property name="Hora">
<Type>%String</Type>
<Parameter name="XMLNAME" value="hora"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>EquipamentoStatusState</State>
<StreamLocation>^interopera4EC4.Equipamento87F7S</StreamLocation>
<Data name="EquipamentoStatusState">
<Value name="1">
<Value>Data</Value>
</Value>
<Value name="2">
<Value>Hora</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.ExameStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66941,39019.495821</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>exameStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Codigo">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigo"/>
</Property>

<Property name="Mnemonico">
<Type>%String</Type>
<Parameter name="XMLNAME" value="mnemonico"/>
</Property>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="descricao"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="XMLNAME" value="status"/>
</Property>

<Property name="DataEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="dataEvento"/>
</Property>

<Property name="HoraEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="horaEvento"/>
</Property>

<Property name="UsuarioEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="usuarioEvento"/>
</Property>

<Property name="MotivoEvento">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="motivoEvento"/>
</Property>

<Property name="CdMotivoEvento">
<Type>%String</Type>
<Parameter name="XMLNAME" value="cdMotivoEvento"/>
</Property>

<Property name="Amostra">
<Type>interoperability.api.xml.buscadadosstatus.response.AmostraStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="amostraStatus"/>
<Parameter name="XMLNAME" value="amostrasStatus"/>
</Property>

<Property name="Material">
<Type>interoperability.api.xml.buscadadosstatus.response.MaterialStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="materialStatus"/>
<Parameter name="XMLNAME" value="materiaisStatus"/>
</Property>

<Property name="Medico">
<Type>interoperability.api.xml.buscadadosstatus.response.MedicoStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="medicoStatus"/>
<Parameter name="XMLNAME" value="medicosStatus"/>
</Property>

<Property name="Urgente">
<Type>%String</Type>
<Parameter name="XMLNAME" value="urgente"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>ExameStatusState</State>
<StreamLocation>^interoperabili4EC4.ExameStatusS</StreamLocation>
<Data name="ExameStatusState">
<Value name="1">
<Value>Codigo</Value>
</Value>
<Value name="2">
<Value>Mnemonico</Value>
</Value>
<Value name="3">
<Value>Descricao</Value>
</Value>
<Value name="4">
<Value>Status</Value>
</Value>
<Value name="5">
<Value>DataEvento</Value>
</Value>
<Value name="6">
<Value>HoraEvento</Value>
</Value>
<Value name="7">
<Value>UsuarioEvento</Value>
</Value>
<Value name="8">
<Value>MotivoEvento</Value>
</Value>
<Value name="9">
<Value>CdMotivoEvento</Value>
</Value>
<Value name="10">
<Value>Amostra</Value>
</Value>
<Value name="11">
<Value>Material</Value>
</Value>
<Value name="12">
<Value>Medico</Value>
</Value>
<Value name="13">
<Value>Urgente</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.MaterialStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66937,64511.903332</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>materialStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Id">
<Type>%String</Type>
<Parameter name="XMLNAME" value="id"/>
</Property>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="XMLNAME" value="descricao"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>MaterialStatusState</State>
<StreamLocation>^interoperab4EC4.MaterialStatusS</StreamLocation>
<Data name="MaterialStatusState">
<Value name="1">
<Value>Id</Value>
</Value>
<Value name="2">
<Value>Descricao</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.MedicoStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66937,64535.154963</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>medicoStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Nome">
<Type>%String</Type>
<Parameter name="XMLNAME" value="nome"/>
</Property>

<Property name="ConselhoNumero">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
<Parameter name="XMLNAME" value="conselhoNumero"/>
</Property>

<Property name="ConselhoSigla">
<Type>%String</Type>
<Parameter name="XMLNAME" value="conselhoSigla"/>
</Property>

<Property name="ConselhoEstado">
<Type>%String</Type>
<Parameter name="XMLNAME" value="conselhoEstado"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>MedicoStatusState</State>
<StreamLocation>^interoperabil4EC4.MedicoStatusS</StreamLocation>
<Data name="MedicoStatusState">
<Value name="1">
<Value>Nome</Value>
</Value>
<Value name="2">
<Value>ConselhoNumero</Value>
</Value>
<Value name="3">
<Value>ConselhoSigla</Value>
</Value>
<Value name="4">
<Value>ConselhoEstado</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.OrdemServicoStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66937,63626.986716</TimeChanged>
<TimeCreated>65423,61724.249383</TimeCreated>

<Parameter name="XMLNAME">
<Default>ordemServicoStatus</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>0</Default>
</Parameter>

<Property name="CodigoOs">
<Type>%String</Type>
<Parameter name="XMLNAME" value="codigoOs"/>
</Property>

<Property name="PedidoCliente">
<Type>%String</Type>
<Parameter name="XMLNAME" value="pedidoCliente"/>
</Property>

<Property name="Exames">
<Type>interoperability.api.xml.buscadadosstatus.response.ExameStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="exameStatus"/>
<Parameter name="XMLNAME" value="examesStatus"/>
</Property>

<Property name="Paciente">
<Type>interoperability.api.xml.buscadadosstatus.response.PacienteStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="pacienteStatus"/>
<Parameter name="XMLNAME" value="pacientesStatus"/>
</Property>

<Property name="Posto">
<Type>interoperability.api.xml.buscadadosstatus.response.PostoStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="postoStatus"/>
<Parameter name="XMLNAME" value="postosStatus"/>
</Property>

<Property name="Equipamento">
<Type>interoperability.api.xml.buscadadosstatus.response.EquipamentoStatus</Type>
<Collection>list</Collection>
<Parameter name="XMLITEMNAME" value="equipamentoStatus"/>
<Parameter name="XMLNAME" value="equipamentosStatus"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>OrdemServicoStatusState</State>
<StreamLocation>^interopera4EC4.OrdemServicD5D4S</StreamLocation>
<Data name="OrdemServicoStatusState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>CodigoOs</Value>
</Value>
<Value name="2">
<Value>PedidoCliente</Value>
</Value>
<Value name="3">
<Value>Exames</Value>
</Value>
<Value name="4">
<Value>Paciente</Value>
</Value>
<Value name="5">
<Value>Posto</Value>
</Value>
<Value name="6">
<Value>Equipamento</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.PacienteStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66937,64575.646749</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>pacienteStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Id">
<Type>%String</Type>
<Parameter name="XMLNAME" value="id"/>
</Property>

<Property name="Nome">
<Type>%String</Type>
<Parameter name="XMLNAME" value="nome"/>
</Property>

<Property name="DataNascimento">
<Type>%Date</Type>
<Parameter name="XMLNAME" value="dataNascimento"/>
</Property>

<Property name="Sexo">
<Type>dado.dataType.String</Type>
<Parameter name="DISPLAYLIST" value=",Masculino,Feminino,Indefinido"/>
<Parameter name="VALUELIST" value=",M,F,U"/>
<Parameter name="XMLNAME" value="sexo"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>PacienteStatusState</State>
<StreamLocation>^interoperab4EC4.PacienteStatusS</StreamLocation>
<Data name="PacienteStatusState">
<Value name="1">
<Value>Id</Value>
</Value>
<Value name="2">
<Value>Nome</Value>
</Value>
<Value name="3">
<Value>DataNascimento</Value>
</Value>
<Value name="4">
<Value>Sexo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.api.xml.buscadadosstatus.response.PostoStatus">
<Super>%SerialObject,%XML.Adaptor</Super>
<TimeChanged>66937,64394.001003</TimeChanged>
<TimeCreated>65423,61745.343805</TimeCreated>

<Parameter name="XMLNAME">
<Default>postoStatus</Default>
</Parameter>

<Parameter name="XMLSEQUENCE">
<Default>1</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="Id">
<Type>%String</Type>
<Parameter name="XMLNAME" value="id"/>
</Property>

<Property name="Descricao">
<Type>%String</Type>
<Parameter name="XMLNAME" value="descricao"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>PostoStatusState</State>
<StreamLocation>^interoperabili4EC4.PostoStatusS</StreamLocation>
<Data name="PostoStatusState">
<Value name="1">
<Value>Id</Value>
</Value>
<Value name="2">
<Value>Descricao</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="interoperability.client.WSEnsembleSoap">
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebClient</Super>
<TimeChanged>66556,42264.476975</TimeChanged>
<TimeCreated>66556,42223.236075</TimeCreated>

<Parameter name="LOCATION">
<Description>
This is the URL used to access the web service.</Description>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// = "http://cst-ens.shiftcloud.com.br:57774/shift/integracao/beep/shifthis/shift.bs.WSEnsemble.cls";

]]></Content>
</UDLText>

<Parameter name="NAMESPACE">
<Description>
This is the namespace used by the Service</Description>
<Default>http://www.shift.com.br</Default>
</Parameter>

<Parameter name="OUTPUTTYPEATTRIBUTE">
<Description>
Use xsi:type attribute for literal types.</Description>
<Default>1</Default>
</Parameter>

<Parameter name="SECURITYIN">
<Description>
Determines handling of Security header.</Description>
<Default>ALLOW</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description>
This is the name of the Service</Description>
<Default>WSEnsemble</Default>
</Parameter>

<Parameter name="SOAPVERSION">
<Description>
This is the SOAP version supported by the service.</Description>
<Default>1.1</Default>
</Parameter>

<Method name="RetornoPedido">
<Final>1</Final>
<FormalSpec>pToken:%String,pPedidoSinc:%String,pRetorno:%Boolean,pDescricaoErro:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<Implementation><![CDATA[ Quit ..WebMethod("RetornoPedido").Invoke($this,"http://www.shift.com.br/shift.bs.WSEnsemble.RetornoPedido",.pToken,.pPedidoSinc,.pRetorno,.pDescricaoErro)
]]></Implementation>
</Method>
</Class>




<Class name="interoperability.service.coleta.ColetaService">
<Super>s01.service.coleta.ColetaService</Super>
<TimeChanged>66937,64290.221473</TimeChanged>
<TimeCreated>65806,62439.54144</TimeCreated>

<Method name="AlterarStatusProcedimentoAguardandoAmostraParaHoldUnidade">
<FormalSpec>pDadosOsRecipienteProcedimentoDto:s01.dto.ordemServico.DadosOsRecipienteProcedimentoDto</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[	Return
]]></Implementation>
</Method>

<Method name="%OnNew">
<Internal>1</Internal>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.service.coleta.integracao.ColetaService">
<Super>s01.service.coleta.integracao.ColetaService</Super>
<TimeChanged>66998,30573.696316</TimeChanged>
<TimeCreated>65806,62439.54144</TimeCreated>

<Property name="ColetaService">
<Type>interoperability.service.coleta.ColetaService</Type>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>pColetaService:interoperability.service.coleta.ColetaService="",pOrdemServicoService:s01.service.ordemServico.OrdemServicoService="",pDataHoraService:shared.service.dataHora.DataHoraService="",pOrdemServicoLockService:s01.service.ordemServico.OrdemServicoLockService="",pRegiaoService:s01.service.configuracao.regiao.RegiaoService="",pUsuarioService:s01.service.UsuarioService="",pUsuarioWebService:s01.service.usuarioWeb.UsuarioWebService="",pProcedimentoService:s01.service.procedimento.ProcedimentoService="",pOsRecipienteService:s01.service.ordemServico.OsRecipienteService="",pOsRecipienteProcedimentoService:s01.service.ordemServico.OsRecipienteProcedimentoService="",pOsProcedimentoService:s01.service.ordemServico.OsProcedimentoService=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set:$ISOBJECT(pColetaService) ..ColetaService = pColetaService
	Set:$ISOBJECT(pOrdemServicoService) ..OrdemServicoService = pOrdemServicoService
	Set:$ISOBJECT(pDataHoraService) ..DataHoraService = pDataHoraService
	Set:$ISOBJECT(pOrdemServicoLockService) ..OrdemServicoLockService = pOrdemServicoLockService
	Set:$ISOBJECT(pRegiaoService) ..RegiaoService = pRegiaoService
	Set:$ISOBJECT(pUsuarioService) ..UsuarioService = pUsuarioService
	Set:$ISOBJECT(pUsuarioWebService) ..UsuarioWebService = pUsuarioWebService
	Set:$ISOBJECT(pProcedimentoService) ..ProcedimentoService = pProcedimentoService
	Set:$ISOBJECT(pOsRecipienteService) ..OsRecipienteService = pOsRecipienteService
	Set:$ISOBJECT(pOsRecipienteProcedimentoService) ..OsRecipienteProcedimentoService = pOsRecipienteProcedimentoService
	Set:$ISOBJECT(pOsProcedimentoService) ..OsProcedimentoService = pOsProcedimentoService
	Return $$$OK
]]></Implementation>
</Method>

<Method name="ColetaServiceGet">
<Private>1</Private>
<ReturnType>interoperability.service.coleta.ColetaService</ReturnType>
<Implementation><![CDATA[
	Set:('$ISOBJECT(i%ColetaService)) i%ColetaService = ##class(interoperability.service.coleta.ColetaService).%New()
	Return i%ColetaService
]]></Implementation>
</Method>

<Method name="ColetaServiceSet">
<FormalSpec>pColetaService:interoperability.service.coleta.ColetaService</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set i%ColetaService = pColetaService
	Return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.util.ExportacaoFaturamento">
<TimeChanged>66980,44219.927545</TimeChanged>
<TimeCreated>66848,35380.261507</TimeCreated>

<Method name="GetAntibiograma">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOs:%String,pExameCultura:%String</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
	Try
	{
		Set json = {}
		Do ##class(dado.ArqOrdemServico).idxCodigoOsExists(pOs,.idOS)
		Do:(idOS '= "") ##class(dado.TblOsProcedimento).idxOsProcedimentoExists(idOS,pExameCultura,.idOSProcedimento) 
		If (idOSProcedimento '= "")
		{
			Set tsa = ##class(dado.TblExame).TsaGetStored(pExameCultura)
			Set fontePagadora = ##class(dado.TblOsProcedimento).FontePagadoraIdGetStored(idOSProcedimento)
			Set:(tsa '= "") json.codExameAntibiograma = tsa
			If ##class(dado.TblTussCorrelacao).idxProcedimentoFontePagadoraExists(fontePagadora,tsa,.idTussCorrelacao) {
				Set procedimentoTUSS = ##class(dado.TblTussCorrelacao).ProcedimentoTussIdGetStored(idTussCorrelacao)
				Set json.codigoTUSS = ##class(dado.TblTuss).CodigoTussGetStored(procedimentoTUSS)
			}
		}
	}
	Catch objErro
	{
		Set Status = objErro.AsStatus()
		Set msgErro = $System.Status.GetErrorText(Status,"pt-br")
		Set json.error = msgErro
	}
	Quit json.%ToJSON()
]]></Implementation>
</Method>

<Method name="GetDataHoraOs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pOs:%String</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
	Try
	{
		Set json = {}
		Do ##class(dado.ArqOrdemServico).idxCodigoOsExists(pOs,.idOS)
		If (idOS '= "")
		{
			Set data = ##class(s00.util.DataHora).LogicalToOdbc(##class(dado.ArqOrdemServico).DataGetStored(idOS))
			Set hora = ##class(s00.util.DataHora).LogicalToDisplay(##class(dado.ArqOrdemServico).HoraFinalGetStored(), "hora")
			Set json.dataHoraOs = data_"T"_hora
		}
	}
	Catch objErro
	{
		Set Status = objErro.AsStatus()
		Set msgErro = $System.Status.GetErrorText(Status,"pt-br")
		Set json.error = msgErro
	}
	Quit json.%ToJSON()
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.util.Posto">
<TimeChanged>66907,53530.084115</TimeChanged>
<TimeCreated>66899,38462.319924</TimeCreated>

<Method name="GetUnidadeById">
<ClassMethod>1</ClassMethod>
<FormalSpec>pUnidadeId:%String="",pWebParametroId:%String=""</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
	#Dim retorno As s01.util.b2b.shift.consultas.Resposta.unidade
	Set retorno = ##class(s01.util.b2b.shift.consultas.Util).GetUnidadeById(pUnidadeId,pWebParametroId)
	
	$$$THROWONERROR(Status, retorno.XMLExportToStream(.xml))
	
	Return xml
]]></Implementation>
</Method>

<Method name="GetUnidadeByIdDescricaoUnidadeAtendimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pUnidadeId:%String="",pWebParametroId:%String=""</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
	#Dim retorno As s01.util.b2b.shift.consultas.Resposta.unidade
	Set retorno = ##class(s01.util.b2b.shift.consultas.Util).GetUnidadeById(pUnidadeId,pWebParametroId)
	
	Set unidadeAtendimentoId = ##class(dado.TblPosto).UnidadeAtendimentoIdGetStored(pUnidadeId)
	Set retorno.nome = ##class(dado.TblUnidadeAtendimento).DescricaoGetStored(unidadeAtendimentoId)
	
	$$$THROWONERROR(Status, retorno.XMLExportToStream(.xml))
	
	Return xml
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.util.Resultado">
<TimeChanged>66912,53023.360154</TimeChanged>
<TimeCreated>66897,63313.259261</TimeCreated>

<Method name="ExportarResultadoComMascaraOrdenada">
<Description>
Método Exportar Resultado com Mascara Ordenada
Inicialmente tem o mesmo comportamento do método do produto
Gera o retorno após a chamada ##class(s01.util.b2b.shiftLis.ensemblev2.Resultado).ExportarResultado(params...)
Manipula o retorno adicionando todas as mascaras do exame no resultado mesmo que não possua valor.
Tarefa: SHIFT-17186</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIntegracao:%String="",pFontePagadoraId:%String(MAXLEN="")="",pCodOs:%String="",pCbarra:%String(MAXLEN="")="",pDataInicio:%String="",pDataFinal:%String="",pHoraInicio:%String="",pHoraFinal:%String="",pProcedimento:%String="",pUnidadeColeta:%String(MAXLEN="")="",pUsuarioWebId:%String="",pRetornarExportados:%String=2,pNumeroOsLimite:%Integer=0,pStatusFatura:%String="",pOmiteDetalhesResultado:%Boolean=0</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[
	Set params = ""
	Set params($INCREMENT(params)) = pIntegracao
	Set params($INCREMENT(params)) = pFontePagadoraId
	Set params($INCREMENT(params)) = pCodOs
	Set params($INCREMENT(params)) = pCbarra
	Set params($INCREMENT(params)) = pDataInicio
	Set params($INCREMENT(params)) = pDataFinal
	Set params($INCREMENT(params)) = pHoraInicio
	Set params($INCREMENT(params)) = pHoraFinal
	Set params($INCREMENT(params)) = pProcedimento
	Set params($INCREMENT(params)) = pUnidadeColeta
	Set params($INCREMENT(params)) = pUsuarioWebId
	Set params($INCREMENT(params)) = pRetornarExportados
	Set params($INCREMENT(params)) = pNumeroOsLimite
	Set params($INCREMENT(params)) = pStatusFatura
	Set params($INCREMENT(params)) = pOmiteDetalhesResultado	
	
	#Dim retorno AS s01.util.b2b.shiftLis.ensemblev2.exp.ListaResultadoLab
	Set retorno = ##class(s01.util.b2b.shiftLis.ensemblev2.Resultado).ExportarResultado(params...)
	
	For indiceResultado=1:1:retorno.ResultadoLab.Count()
	{
		#Dim resultadoLabItem As s01.util.b2b.shiftLis.ensemblev2.exp.ResultadoLab
		Set resultadoLabItem = retorno.ResultadoLab.GetAt(indiceResultado)
		
		For indiceExame=1:1:resultadoLabItem.Exame.Count()
		{
			#Dim exameItem AS s01.util.b2b.shiftLis.ensemblev2.exp.Exame
			Set exameItem = resultadoLabItem.Exame.GetAt(indiceExame)
			
			Do ..AtribuirMascaraAoExame(.exameItem)
			Do ..AtribuirResultadoComMarcarasOrganizadas(.exameItem)
		}
	}
	
	$$$THROWONERROR(Status, retorno.XMLExportToStream(.xml))

	Quit xml
]]></Implementation>
</Method>

<Method name="AtribuirMascaraAoExame">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pExameItem:s01.util.b2b.shiftLis.ensemblev2.exp.Exame]]></FormalSpec>
<Implementation><![CDATA[
	If ('$ISOBJECT(pExameItem.Mascara))
	{
		Set procedimentoId = pExameItem.Codigo
		Set resultSetMascaras = ..RetornarMascaraPorProcedimento(procedimentoId)
		
		While (resultSetMascaras.%Next())
		{
			Do pExameItem.MascaraNewObject()
			Set pExameItem.Mascara.Data = resultSetMascaras.Data
			Set pExameItem.Mascara.Hora = resultSetMascaras.Hora
			Set pExameItem.Mascara.VersaoMascara = resultSetMascaras.Versao
		}
	}
]]></Implementation>
</Method>

<Method name="RetornarMascaraPorProcedimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pProcedimentoId:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[	Return ##class(%SQL.Statement).%ExecDirect(,..SQLMascara(),pProcedimentoId)
]]></Implementation>
</Method>

<Method name="SQLMascara">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Return "SELECT "_
	"	Data, "_
	"	Hora, "_
	"	Versao "_
	"FROM "_
	"	dado.TblMascara "_
	"WHERE "_
	"	ProcedimentoId = ? "_
	"	AND Padrao = 1"
]]></Implementation>
</Method>

<Method name="AtribuirResultadoComMarcarasOrganizadas">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pExameItem:s01.util.b2b.shiftLis.ensemblev2.exp.Exame]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	Set listaSequenciaResultado = ""
	Set arrayResultado = ##class(%ArrayOfObjects).%New()
	
	Set parcialCount = 0
	
	For indiceResultadoExame=1:1:pExameItem.Resultado.Count()
	{
		#Dim resultadoExameItem As s01.util.b2b.shiftLis.ensemblev2.exp.Resultado
		
		Set resultadoExameItem = pExameItem.Resultado.GetAt(indiceResultadoExame).%ConstructClone(1)
		
		If resultadoExameItem.SequenciaMascara = ""
		{
			Set sequenciaMascara = "PARCIAL_"_$INCREMENT(parcialCount)
			$$$THROWONERROR(Status,arrayResultado.SetAt(resultadoExameItem,sequenciaMascara))
			Continue
		}

		Set resultSet = ..RetornarMascaraItemDescricaoPorMascaraId(resultadoExameItem.SequenciaMascara)
		If (resultSet.%Next())
		{	
			Set resultadoExameItem.Apelido = resultSet.DescricaoExportacao
		}

		$$$THROWONERROR(Status,arrayResultado.SetAt(resultadoExameItem,resultadoExameItem.SequenciaMascara))
		
		Set listaSequenciaResultado = listaSequenciaResultado_$LISTBUILD(resultadoExameItem.SequenciaMascara)
	}
	
	Set resultSet = ..RetornarMascaraItemPorProcedimentoESequencial(pExameItem.Codigo,listaSequenciaResultado)
	While (resultSet.%Next())
	{
		Set resultado = ##class(s01.util.b2b.shiftLis.ensemblev2.exp.Resultado).%New()
		Set resultado.Descricao = resultSet.Descricao
		Set resultado.Apelido = resultSet.DescricaoExportacao
		Set resultado.SequenciaMascara = resultSet.Sequencia
		
		$$$THROWONERROR(Status, arrayResultado.SetAt(resultado,resultSet.Sequencia))
	}
	
	$$$THROWONERROR(Status, pExameItem.Resultado.Clear())
	While (arrayResultado.GetNext(.indiceArrayResultado))
	{
		$$$THROWONERROR(Status, pExameItem.Resultado.Insert(arrayResultado.GetAt(indiceArrayResultado)))
	}
]]></Implementation>
</Method>

<Method name="RetornarMascaraItemPorProcedimentoESequencial">
<ClassMethod>1</ClassMethod>
<FormalSpec>pProcedimentoId:%Integer,pListaSequencia</FormalSpec>
<Private>1</Private>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[	Return ##class(%SQL.Statement).%ExecDirect(,..SQLMascaraItem(),pProcedimentoId,pListaSequencia)
]]></Implementation>
</Method>

<Method name="SQLMascaraItem">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Return "SELECT "_
			"	Id As Sequencia, "_
			"	ParametroId->Descricao, "_
			"	Descricao As DescricaoExportacao "_
			"FROM "_
			"	dado.TblMascaraItem "_
			"WHERE "_
			"	MascaraId->ProcedimentoId = ? "_
			"	AND ID NOT %INLIST(?) "_
			"	AND MascaraId->Padrao = 1 "_
			"ORDER BY ID ASC"
]]></Implementation>
</Method>

<Method name="RetornarMascaraItemDescricaoPorMascaraId">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMascaraId:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[	Return ##class(%SQL.Statement).%ExecDirect(,..SQLMascaraItemDescricao(),pMascaraId)
]]></Implementation>
</Method>

<Method name="SQLMascaraItemDescricao">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Return "SELECT "_
			"	Descricao As DescricaoExportacao "_
			"FROM "_
			"	dado.TblMascaraItem "_
			"WHERE "_
			"	ID = ? "
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.util.SalvarInfPreAnalitica">
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>
<TimeChanged>66863,52626.571705</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>WSLisCustomizacao</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.shift.com.br</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domínio usado para localização.</Description>
<Default>SCSDOMAIN</Default>
</Parameter>

<Parameter name="XMLIGNORENULL">
<Default>1</Default>
</Parameter>

<Property name="CompositePergunta">
<Type>s01.controle.perguntas.Perguntas</Type>
<InitialExpression>##class(s01.controle.perguntas.Perguntas).%New()</InitialExpression>
</Property>

<Property name="ObjUsuarioWeb">
<Type>dado.TblUsuarioWeb</Type>
</Property>

<Method name="SalvaInfoPreAnaliticasDoProcedimento">
<FormalSpec>pPedidoLab:%RegisteredObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set retorno = 1
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set objProxy = ##Class(%ZEN.proxyObject).%New()
		Set pedidoLab = pPedidoLab
		Set ..ObjUsuarioWeb = ##class(dado.TblUsuarioWeb).idxUserIdOpen(pedidoLab.UsuarioWebId)
		Set objUsuarioWeb = ..ObjUsuarioWeb
		Set Os = ##Class(dado.ArqOrdemServico).idxCodigoOsOpen(pedidoLab.Pedido.OrdemServico)
		Set objProxy.OsId = Os.%Id()
		
		Set listaProcedimento = ""
		Set qtdProcedimento = pedidoLab.Exame.Count()
		For i=1:1:qtdProcedimento
		{
			Do ##class(dado.TblExame).idxMnemonicoExists(pedidoLab.Exame.GetAt(i).Codigo,.procedimento)
			Set:(procedimento = "") procedimento = pedidoLab.Exame.GetAt(i).Codigo
			Set listaProcedimento = listaProcedimento_$LB(procedimento)
		}
		
		Set lProcedimento = $LISTTOSTRING(listaProcedimento,$CHAR(252))
		Set objRetorno = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).BuscarInfPreanalitica(, objProxy.OsId, "", lProcedimento, "", $CHAR(253), $CHAR(252),,1)
		Set scsListaRespostas = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).ConstruirListaResposta(objRetorno.scsListaParametros, $CHAR(253), $CHAR(252))
		Set scsListaLaudos = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).ConstruirListaResposta(objRetorno.scsListaParametros, $CHAR(253), $CHAR(252))
		Set lParametrosOs = $LISTFROMSTRING(objRetorno.scsListaParametros,$CHAR(252))
		Set lProcessoAnaliticoOs = $LISTFROMSTRING(objRetorno.scsListaProcessos,$CHAR(252))
					
		/*
		** VALIDAÇÃO DAS INFORMAÇÕES PRÉ-ANALÍTICAS POR PROCEDIMENTO
		*/
		Set existeResposta = 0
		Set totalProcedimento = pedidoLab.Exame.Count()
		For i=1:1:totalProcedimento{
			#DIM lInformacaoPreAnalitica As %ListOfObjects = pedidoLab.Exame.GetAt(i).InformacoesPreAnaliticas
			Set totalInformacaoPreAnalitica = lInformacaoPreAnalitica.Count()
			For j=1:1:totalInformacaoPreAnalitica{
				#DIM informacaoPreAnalitica As s01.util.b2b.shiftLis.ensemblev2.imp.InformacaoPreAnalitica = lInformacaoPreAnalitica.GetAt(j)
				
				If informacaoPreAnalitica.Tipo '= "I" CONTINUE
				
				Set objParametro = ##class(dado.TblParametro).idxApelidoOpen(informacaoPreAnalitica.ValorId)
				
				If '$ISOBJECT(objParametro) CONTINUE
				
				Set posicaoInformacaoPreAnalitica = $LISTFIND(lParametrosOs,objParametro.%Id())
				If posicaoInformacaoPreAnalitica > 0{
					Set objProcessoAnalitico = ##class(dado.TblProcessoAnalitico).%OpenId($LISTGET(lProcessoAnaliticoOs,posicaoInformacaoPreAnalitica))
					
					Set resposta = informacaoPreAnalitica.Valor
										
					Set existeProcessoComItemLaudo = 0
					If $ISOBJECT(objProcessoAnalitico){
						If (objProcessoAnalitico.PermiteAlterarTextoLaudo = 0) && ($ISOBJECT(objProcessoAnalitico.GrupoLaudoId)){
							Set existeProcessoComItemLaudo = 1
							
							If ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).ExisteLaudoNoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta){
								Set objLaudoItem = ##class(dado.TblGrupoLaudoItem).idxGrupoLaudoAbreviaturaOpen(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta)								
								Set resposta = objLaudoItem.LaudoId.%Id()
							}Else{
								Set valoresPermitidosLaudo = ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).GetApelidoItensLaudoDoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id())
								Throw ##class(s00.util.Excecao).%New("SalvarInformacoesPreAnalitica()",5001,,"Erro ao salvar informações pré-analíticas. O parâmetro %1 aceita apenas os seguintes valores %2.",informacaoPreAnalitica.ValorId,valoresPermitidosLaudo)
							}
						}
					}
					
					If existeProcessoComItemLaudo{
						Set $PIECE(scsListaLaudos,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
					}Else{
						Set $PIECE(scsListaRespostas,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
					}
					
					Set existeResposta = 1
				}
			}
		}
		
		/*
		** VALIDAÇÃO DAS INFORMAÇÕES PRÉ-ANALÍTICAS POR PACIENTE
		*/
		Set lParametro = $LISTFROMSTRING("")
		Set lValorSalvar = $LISTFROMSTRING("")
		Set imc = ""
		Set pedido = ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).%New()
		Set pedido.PedidoLab = pedidoLab
		Do pedido.ValidarInfoPreAnaliticaEspecifica(.lParametro, .lValorSalvar, .imc)

		For i=1:1:$LISTLENGTH(lParametro){
			Set parametroId = $LISTGET(lParametro,i)
			Set objParametro = ##class(dado.TblParametro).%OpenId(parametroId)
				
			If '$ISOBJECT(objParametro) CONTINUE
			
			Set posicao = $LISTLENGTH(lParametrosOs) + 1
			Set $LIST(lParametrosOs,*+1)= parametroId
			Set posicaoInformacaoPreAnalitica = $LISTFIND(lParametrosOs,parametroId)
			If posicaoInformacaoPreAnalitica > 0{
				Set objProcessoAnalitico = ##class(dado.TblProcessoAnalitico).%OpenId($LISTGET(lProcessoAnaliticoOs,posicaoInformacaoPreAnalitica))
				
				Set resposta = $LISTGET(lValorSalvar,i)
									
				Set existeProcessoComItemLaudo = 0
				If $ISOBJECT(objProcessoAnalitico){
					If (objProcessoAnalitico.PermiteAlterarTextoLaudo = 0) && ($ISOBJECT(objProcessoAnalitico.GrupoLaudoId)){
						Set existeProcessoComItemLaudo = 1
						
						If ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).ExisteLaudoNoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta){
							Set objLaudoItem = ##class(dado.TblGrupoLaudoItem).idxGrupoLaudoAbreviaturaOpen(objProcessoAnalitico.GrupoLaudoId.%Id(),resposta)								
							Set resposta = objLaudoItem.LaudoId.%Id()
						}Else{
							Set valoresPermitidosLaudo = ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).GetApelidoItensLaudoDoGrupo(objProcessoAnalitico.GrupoLaudoId.%Id())
							Throw ##class(s00.util.Excecao).%New("SalvarInformacoesPreAnalitica()",5001,,"Erro ao salvar informações pré-analíticas. O parâmetro %1 aceita apenas os seguintes valores %2.",$LISTGET(lParametro,i),valoresPermitidosLaudo)
						}
					}
				}
				
				If existeProcessoComItemLaudo{
					Set $PIECE(scsListaLaudos,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
				}Else{
					Set $PIECE(scsListaRespostas,$CHAR(252),posicaoInformacaoPreAnalitica) = resposta
				}
				
				Set existeResposta = 1
			}
		}
	
		Set objRetorno.scsListaRespostas = scsListaRespostas
		Set objRetorno.scsListaLaudos = scsListaLaudos
		Set objRetorno.scsListaParametros 	= $LISTTOSTRING(lParametrosOs, $CHAR(252))
		
		If objUsuarioWeb.ValidarInformacaoPreAnalitica{
			Do ##Class(s01.util.b2b.shiftLis.ensemblev2.Pedido).ValidaInformacaoPreAnaliticaObrigatoria(
				objRetorno.scsListaParametros,
				objRetorno.scsListaRespostas,
				objRetorno.scsListaLaudos)
		}
		
		Set objProxy.txtImc = imc
		Set retorno = ##class(s01.componente.codigo.scsCompositeInfPreAnalitica).SalvarInfPreAnaliticas(
			objRetorno.scsListaOS,
			objRetorno.scsListaProcedimentos,
			objRetorno.scsListaParametros,
			objRetorno.scsListaProcessos,
			objRetorno.scsListaRespostas,
			objRetorno.scsListaLaudos,
			$CHAR(253),
			$CHAR(252),
			objProxy)
			
	}Catch(ex){
		Throw ex
	}
	
	Quit retorno
]]></Implementation>
</Method>

<Method name="SalvarPerguntasNaInclusaoProcedimento">
<FormalSpec>pPedidoLab:%RegisteredObject,pObjProxy</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set retorno = 1
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set pedidoLab = pPedidoLab
		
		Set objProxy = ##Class(%ZEN.proxyObject).%New()
		
		Set Os = ##Class(dado.ArqOrdemServico).idxCodigoOsOpen(pedidoLab.Pedido.OrdemServico)
		Set objProxy.OsId = Os.%Id()
		
		Set ..CompositePergunta.OsId = objProxy.OsId
		Do ..PreencherInfoCompositePergunta(pedidoLab,objProxy)
		Set mv = $CHAR(253)
		Set listaCodPerguntas = ""
		Set listaRespostas = ""
		Set qtdPerguntas = ..CompositePergunta.Perguntas.Count()
		For iPerguntas = 1:1:qtdPerguntas{
			Set $LIST(listaCodPerguntas,iPerguntas) = ..CompositePergunta.Perguntas.GetAt(iPerguntas).PerguntaId
			Set $LIST(listaRespostas,iPerguntas) = ..CompositePergunta.Perguntas.GetAt(iPerguntas).Resposta
		}
		Set codPerguntas = $LISTTOSTRING(listaCodPerguntas,mv)
		 		
		Set totalProcedimento = pedidoLab.Exame.Count()
		For iProcedimento=1:1:totalProcedimento{
 			#DIM lInformacaoPreAnalitica As %ListOfObjects = pedidoLab.Exame.GetAt(iProcedimento).InformacoesPreAnaliticas
 			Set totalInformacaoPreAnalitica = lInformacaoPreAnalitica.Count()
 			For iPerguntas=1:1:totalInformacaoPreAnalitica{
	 			#DIM informacaoPreAnalitica As s01.util.b2b.shiftLis.ensemblev2.imp.InformacaoPreAnalitica = lInformacaoPreAnalitica.GetAt(iPerguntas)
			
				If informacaoPreAnalitica.Tipo '= "P" CONTINUE
				Set posPergunta = $LISTFIND(listaCodPerguntas, informacaoPreAnalitica.ValorId)
				If (posPergunta '= 0){
					Set $LIST(listaRespostas,posPergunta) = informacaoPreAnalitica.Valor
				}				
			}
		}
		For iPerguntas = 1:1:qtdPerguntas{
			Set ..CompositePergunta.Perguntas.GetAt(iPerguntas).Resposta = $LISTGET(listaRespostas, iPerguntas)
		}
		Do ..SalvarObservacoes(objProxy.OsId)	
	}Catch(ex){
		Throw ex
	}
	
	Quit retorno
]]></Implementation>
</Method>

<Method name="PreencherInfoCompositePergunta">
<FormalSpec>pPedidoLab:%RegisteredObject,pObjProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try{
		#DIM pedidoLab As s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab
		Set pedidoLab = pPedidoLab
		
		Set objPaciente = ""
		
		Set validacaoPacienteFactory = ##class(s01.util.b2b.shiftLis.ensemblev2.ValidacaoPacienteFactory).%New(pedidoLab,..ObjUsuarioWeb.%Id())
		Set pacienteId = validacaoPacienteFactory.GetValidacaoPaciente().ValidarPacientePorNome()
		If pacienteId '= ""
		{
			Set objPaciente = ##class(dado.ArqPaciente).%OpenId(pacienteId)
		}
		
		Set ..CompositePergunta.UnidadeColetaId = pedidoLab.Pedido.Posto
		Set ..CompositePergunta.Segmento = pedidoLab.Pedido.Segmento
		Set ..CompositePergunta.Categoria = 1
		Set ..CompositePergunta.Origem = 2 //2 = integração
		Set ..CompositePergunta.PacienteId = objPaciente.%Id()
 		If (pObjProxy.OsId '= "") {//se a ordem de serviço já está cadastrada
 			Set ..CompositePergunta.Acao = "INCLUSAO"
		} Else {
			Set ..CompositePergunta.Acao = "CADASTRO"
		}
		
		Set qtdProcedimento = pedidoLab.Exame.Count()
		Set listaProcedimento = ""
		For i=1:1:qtdProcedimento
		{
			Do ##class(dado.TblExame).idxMnemonicoExists(pedidoLab.Exame.GetAt(i).Codigo,.procedimento)
			Set:(procedimento = "") procedimento = pedidoLab.Exame.GetAt(i).Codigo
			Set listaProcedimento = listaProcedimento_$LB(procedimento)
		}
		Set lProcedimento = $LISTTOSTRING(listaProcedimento,$CHAR(253))
		
		Set listaExames = $LISTFROMSTRING(lProcedimento, $CHAR(253))
		Set qtdExames = $LISTLENGTH(listaExames)
		
		For iExame = 1:1:qtdExames {
			Set objPerguntaItem = ##class(s01.modelo.perguntas.Item).%New()
			Set objPerguntaItem.Id = $LISTGET(listaExames,iExame)
			Set objPerguntaItem.Status = "AM"
			Do ..CompositePergunta.Itens.Insert(objPerguntaItem)
			Kill objPerguntaItem
 		}
 		
 		Do ..CompositePergunta.BuscarPerguntas()
	}Catch(ex){
		Throw ex
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="SalvarObservacoes">
<FormalSpec>pOsId:%String</FormalSpec>
<Implementation><![CDATA[
	Try {
		Set ..CompositePergunta.OsId = pOsId
		Set ..CompositePergunta.UsuarioId = ..ObjUsuarioWeb.%Id()
		Set ..CompositePergunta.UsuarioWebId = ..ObjUsuarioWeb.%Id()
		Set ..CompositePergunta.ValidarInformacaoPreAnalitica = ..ObjUsuarioWeb.ValidarInformacaoPreAnalitica
		Do ..CompositePergunta.Salvar()
		
	} Catch (ex) {
		Throw ex	
	}
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.util.UnidadeFontePagadora">
<TimeChanged>66897,27922.127489</TimeChanged>
<TimeCreated>66848,35380.261507</TimeCreated>

<Method name="GetUnidadeById">
<ClassMethod>1</ClassMethod>
<FormalSpec>pUnidadeId:%String="",pWebParametroId:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<ReturnTypeParams>MAXLEN=""</ReturnTypeParams>
<Implementation><![CDATA[
	#Dim retorno As s01.util.b2b.shift.consultas.Resposta.unidade
	Set retorno = ##class(s01.util.b2b.shift.consultas.Util).GetUnidadeById(pUnidadeId,pWebParametroId)
	
	$$$THROWONERROR(Status, retorno.XMLExportToString(.xml))
	
	Return xml
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.util.ValidarPedido">
<Super>%SOAP.WebService</Super>
<TimeChanged>66879,43336.975032</TimeChanged>
<TimeCreated>64670,65155.809002</TimeCreated>

<Parameter name="SERVICENAME">
<Default>WSLisValidacao</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domínio usado para localização.</Description>
<Default>SCSDOMAIN</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
Namespace SOAP para o serviço Web</Description>
<Default>http://www.shift.com.br</Default>
</Parameter>

<Parameter name="USECLASSNAMESPACES">
<Description>
Os namespaces das classes referenciadas serão usados no WSDL.</Description>
<Default>1</Default>
</Parameter>

<Property name="PedidoLab">
<Type>%RegisteredObject</Type>
</Property>

<Property name="Retorno">
<Type>s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</Type>
</Property>

<Property name="OsGerenciamento">
<Type>s01.gerenciamento.OrdemServico</Type>
</Property>

<Property name="AtualizarDadosPaciente">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="StatusProcedimento">
<Type>%String</Type>
<InitialExpression>"HU"</InitialExpression>
</Property>

<Property name="ListaCbarra">
<Description>
Lista dos cbarra dos procedimentos separados por char(252). O índice é o id do procedimento</Description>
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="ListaCbarraRecipiente">
<Description>
Lista dos recipientes de cada cbarra. Controlada por ListaCbarra.</Description>
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="ListaCbarraNovos">
<Description>
Lista dos cbarras que devem ser incluídos para uma ordem de serviço já cadastrada no sistema. O índice é o id do procedimento</Description>
<Type>%String</Type>
<Collection>array</Collection>
</Property>

<Property name="UsuarioWeb">
<Type>dado.TblUsuarioWeb</Type>
<Private>1</Private>
</Property>

<Property name="ExisteCbi">
<Type>%Boolean</Type>
</Property>

<Method name="ValidarImportacaoPedido">
<Description>
pUnificarPaciente: Determina se no momento de validar o paciente será feita a pesquisa por Nome,Data de nascimento e sexo.
pUnificarPacienteCPF: Determina se irá verificar a existencia do paciente pelo CPF que é um campo único.
pAtualizarDadosPaciente: Define que os dados do paciente serão atualizados durante a importação, caso sejam enviados.
pValidarCodigoLisIgnoraInfo: Define que ao realizar a validação do código LIS não complementa a validação utilizando nome, sexo e data de nascimento do paciente.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab,*pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try{
		Set pRetorno = ##class(s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab).%New()
		Set obj = ##class(interoperability.util.ValidarPedido).%New()
		Do obj.ExecutarImportacaoPedido(pPedidoLab, .pRetorno)
	}Catch(ex){
		Set pRetorno.Retorno = 0
		Set pRetorno.DescricaoErro = $ZSTRIP(ex.DisplayString(), "*C")
	}
	Quit pRetorno.Retorno
]]></Implementation>
</Method>

<Method name="ExecutarImportacaoPedido">
<FormalSpec><![CDATA[pPedidoLab:%RegisteredObject,&pRetorno:s01.util.b2b.shiftLis.ensemblev2.imp.RetornoLab]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Try{
		//Popula propriedades na classe
		Set ..PedidoLab = pPedidoLab
		Set ..Retorno = pRetorno
		Set ..Retorno.Pedido = ..PedidoLab.Pedido.Codigo
		Set ..OsGerenciamento = ##class(s01.gerenciamento.OrdemServico).%New()
		Set ..ExisteCbi = 0
	
		Set objProxy = ##class(%ZEN.proxyObject).%New()
		// validações do arquivo
		If ('..PreencherInfoLog(objProxy, pPedidoLab)) Quit
		If ('..RecuperarUsuarioIntegracao(objProxy)) Quit
		If ('..SetUsuarioWeb(objProxy.IdUsuarioIntegracao)) Quit
		If ('..ValidarFontePagadora()) Quit
		If ('..ValidarUnidadeColeta()) Quit
        If ('..VerificarOsCadastrada(objProxy)) Quit
		;If ('..ValidaProcedimento()) Quit
		;Do ..PreencherGerenciamentoInicio(objProxy)
		If (objProxy.OsId '= ""){
	        Set ..Retorno.DescricaoErro = "Ordem de serviço já cadastrada não deve ser enviada como pedido."
	        Set ..Retorno.Retorno = 0
		}
		
		If ('..ValidarProcedimentos(objProxy)) Quit
		Set ..AtualizarDadosPaciente = ..UsuarioWeb.AtualizarPaciente
		If ('..ValidarPaciente(objProxy)) Quit
		If ('..ValidarPedidoLabExiste(objProxy)) Quit
		//Se não tem procedimentos para incluir executa diretos as ações de código do c´doigo de barras
	}Catch(ex){
		Throw ex
	}
	
	Set pPedidoLab = ..PedidoLab
	Set pRetorno = ..Retorno
	Quit pRetorno.Retorno
]]></Implementation>
</Method>

<Method name="GetProcedimento">
<FormalSpec>pCodigoIntegracao:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set procedimentoId = ""
	Try {
		Set existeProcedimentoMnemonico = ##class(dado.TblExame).idxMnemonicoExists(pCodigoIntegracao,.procedimentoId)
		If ('existeProcedimentoMnemonico) {
			Set existeProcedimentoId = ##class(dado.TblExame).%ExistsId(pCodigoIntegracao)
			Set:(existeProcedimentoId) procedimentoId = pCodigoIntegracao
		}
	}Catch(ex) {
		Throw ex
	}
	Quit procedimentoId
]]></Implementation>
</Method>

<Method name="RetornarErro">
<FormalSpec>pDescricao:%String,pErroInfo:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{
		
		Set msg=$CASE(pDescricao,
			  	  "recipienteInvalido"        : $$$FormatText($$$Text("Recipiente inválido. Recipiente esperado: %1."), pErroInfo),
				  "CalcularValorExame"        : $$$FormatText($$$Text("Preço do procedimento: %1 não definido." ), pErroInfo),
				  "exameJaIncluido"           : $$$FormatText($$$Text("Procedimento %1 duplicado no pedido."), pErroInfo),
				  "ErroIncProc"               : $$$FormatText($$$Text("Erro durante o processo de inclusão de procedimento %1."), pErroInfo),
			  	  "RecipExisteProcedimento"   : $$$FormatText($$$Text("O recipiente %1 já existe para o procedimento %2."), pErroInfo, pErroInfo1),
			  	  "antibiogramaPrecisaCultura": $$$FormatText($$$Text("O antibiograma %1 necessita de cultura."), pErroInfo),
			  	  "fontePagadoraNaoCobreProcedimento": $$$FormatText($$$Text("fonte pagadora cobre procedimento: %1."), pErroInfo),
			  	  "procNaoDispParaUnidade"    : $$$FormatText($$$Text("Procedimento %1 não disponível para a unidade de coleta."), pErroInfo),
			  	  "sexoNaoCompativel"         : $$$FormatText($$$Text("Sexo do paciente não compatível para o procedimento %1."), pErroInfo),
			  	  "exameInativo"         	: $$$FormatText($$$Text("Exame %1 inativo."), pErroInfo),
			  	  "exameImcompativel"		: $$$FormatText($$$Text("Tipo exame %1 não compatível para o paciente."), pErroInfo),
				                              : $$$Text("Erro não definido: ")_" "_ pDescricao _ " - " _ pErroInfo)
		Set ..Retorno.DescricaoErro = msg
	}Catch(ex){
		Throw ex
	}
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="VerificarOsCadastrada">
<FormalSpec>pObjProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{
		//Verifica se o pedido já está cadastrado no sistema
		If (##class(dado.ArqOrdemServico).idxIntegracaoPedidoExists(..PedidoLab.UsuarioWebId, ..PedidoLab.Pedido.Codigo,.idOS)){
			Set pObjProxy.OsId = idOS
			Set ..Retorno.OrdemServico = ##class(dado.ArqOrdemServico).CodigoOsGetStored(idOS)
			Set pObjProxy.ScsOperacao = 2
		}
	}Catch(ex){
		Throw ex	
	}
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="PreencherGerenciamentoInicio">
<Description>
Preenche informações básicas do gerenciamento da ordem de serviço</Description>
<FormalSpec>pObjProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	
	Try{
		
		//Gerenciamento da ordem de serviço
		Set ..OsGerenciamento.Origem                      = pObjProxy.Origem //2 = integração
		Set ..OsGerenciamento.Convenio                    = ..PedidoLab.Pedido.Convenio
		Set ..OsGerenciamento.Posto                       = ..PedidoLab.Pedido.Posto
		Set ..OsGerenciamento.Segmento                    = ..PedidoLab.Pedido.Segmento //1 = Análises clínicas // 2 = Vacinas
		Set ..OsGerenciamento.Categoria                   = 1 //Humano
		Set ..OsGerenciamento.EntregaTipo                 = "00000" //Entrega tipo local/internet
		Set ..OsGerenciamento.HoraInicial                 = ##class(s00.util.DataHora).DisplayToLogical(,"hora")
		Set ..OsGerenciamento.OsStatus                    = 1
		Set ..OsGerenciamento.TipoAtendimento             = ##class(dado.TblPosto).TipoAtendimentoDefaultGetStored(..PedidoLab.Pedido.Posto)
		Set ..OsGerenciamento.DisponivelWeb               = 0
		Set ..OsGerenciamento.Recepcionista               = ##class(dado.TblUsuario).idxUserIdOpen("USUARIOSISTEMA").%Id()
		Set ..OsGerenciamento.EnderecoHospitalar          = ..PedidoLab.Pedido.Leito
		Set ..OsGerenciamento.NumeroProtocolo             = ..PedidoLab.Paciente.Codigo
		Set ..OsGerenciamento.NroIdentificacaoOsLisOrigem = ..PedidoLab.Pedido.Codigo
		Set ..OsGerenciamento.EtiquetaPreImpressaPedido	  = $MVOCONV(..PedidoLab.Pedido.PedidoShiftLIS, "ML%10")
		Set ..OsGerenciamento.EtiquetaPreImpressaCBarra	  = ..PedidoLab.Pedido.PedidoShiftLIS
		Set ..OsGerenciamento.PedidoShiftLIS			  = $MVOCONV(..PedidoLab.Pedido.PedidoShiftLIS, "ML%10")
		
		If ((..PedidoLab.Pedido.DesvioDeFluxo) && (##class(dado.TblPosto).PermiteDesvioFluxoGetStored(..PedidoLab.Pedido.Posto))){
			Set ..OsGerenciamento.PostoDesvioFluxo = ##class(dado.TblPosto).UnidadeColetaDesvioFluxoIdGetStored(..PedidoLab.Pedido.Posto)
		}
		
		#DIM listaDadoCadastral AS %List = $LISTFROMSTRING("")
		#DIM listaResposta AS %List = $LISTFROMSTRING("")
		
		#DIM idxDataDadoVigente AS %String = ""
		#DIM listaDadoCruzado AS %List = $LISTFROMSTRING("")
		#DIM listaDadoCadastro AS %List = $LISTFROMSTRING("")
		//Define status para a importaçao do procedimento
		Set ..StatusProcedimento = ##class(dado.TblPosto).StatusInicialProcedimentoGetStored(..PedidoLab.Pedido.Posto)
	}Catch(ex){
		Throw ex
	}
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="PreencherInfoLog">
<Description>
Recupera as informações de log e id da integração</Description>
<FormalSpec>pObjProxy:%ZEN.proxyObject,pPedidoLab:s01.util.b2b.shiftLis.ensemblev2.imp.PedidoLab</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{
		//Proxy utilizado para o cadastro da OS
		Set pObjProxy.UsuarioLogId = ##class(dado.TblUsuario).idxUserIdOpen("USUARIOSISTEMA").%Id()
        Set pObjProxy.UsuarioLogTipo = 5
        Set pObjProxy.OrigemLog = 1
        Set pObjProxy.Origem = 2
        	
		If ((pPedidoLab.UsuarioWebId '= "") || (pPedidoLab.IdUsuarioShiftLis '= "")){
			If (pPedidoLab.IdUsuarioShiftLis '= ""){
				Set pObjProxy.UsuarioLogId = pPedidoLab.IdUsuarioShiftLis
        		Set pObjProxy.UsuarioLogTipo = 5
        		Set pObjProxy.OrigemLog = 2
        		Set pObjProxy.Origem = 2
			}Else{
				If (##class(dado.TblUsuarioWeb).idxUserIdExists(pPedidoLab.UsuarioWebId)){
					Set pObjProxy.UsuarioLogId = ##class(dado.TblUsuarioWeb).idxUserIdOpen(pPedidoLab.UsuarioWebId).%Id()
        			Set pObjProxy.UsuarioLogTipo = 4
        			Set pObjProxy.OrigemLog = 2
        			Set pObjProxy.Origem = 2
				}
			}
		}
	}Catch(ex){
		Throw ex	
	}	
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="RecuperarUsuarioIntegracao">
<Description>
Recupera o Id do usuário web da integração.
Retorna msg de erro caso não encontre</Description>
<FormalSpec>pObjProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{
		Set objUsuarioWeb = ##class(dado.TblUsuarioWeb).idxUserIdOpen(..PedidoLab.UsuarioWebId)
		
		If $ISOBJECT(objUsuarioWeb){
			If (objUsuarioWeb.Tipo '= 4){
				Set msgUsuarioWebInvalido = $$$Text("Tipo para o Usuário WEB é inválido. Usuario %1 Tipo: %2")
				Throw ##class(s00.util.Excecao).%New("RecuperarUsuarioIntegracao()",5001,,$$$FormatText(msgUsuarioWebInvalido,objUsuarioWeb.UserId,objUsuarioWeb.TipoLogicalToDisplay(objUsuarioWeb.Tipo)))
			}
			Set pObjProxy.IdUsuarioIntegracao = objUsuarioWeb.%Id()
		}Else{		
			Set idUsuarioWeb = ""
			Set integracao = $ZCONVERT(..PedidoLab.Identificador, "U")
			Set msgErro = $$$FormatText($$$Text("Não existe usuário WEB definido para a integração %1. Entre em contado com o laboratório."), ..PedidoLab.Identificador)
			&SQL(SELECT TOP 1 ID INTO :idUsuarioWeb FROM dado.TblUsuarioWeb WHERE UPPER(Integracao) = :integracao AND %INTERNAL(Status) = 1)
			If ((SQLCODE = 0) || ((SQLCODE = 100))){
				If (idUsuarioWeb = ""){
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = msgErro
				}Else{
					Set pObjProxy.IdUsuarioIntegracao = idUsuarioWeb
				}	
			}Else{
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = msgErro
			}
		}
	}Catch(ex){
		Throw ex
	}	
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="ValidarUnidadeColeta">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{
		If '(##class(dado.TblPosto).%ExistsId(..PedidoLab.Pedido.Posto) && ##class(dado.TblPosto).StatusGetStored(..PedidoLab.Pedido.Posto) ){
			Set ..Retorno.Retorno = 0
			Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("Posto %1 inválido."), ..PedidoLab.Pedido.Posto)
		}
		
	}Catch(ex){
		Throw ex
	}
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="ValidarFontePagadora">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{
		If '(##class(dado.TblConvenio).%ExistsId(..PedidoLab.Pedido.Convenio) && ##class(dado.TblConvenio).StatusGetStored(..PedidoLab.Pedido.Convenio)) {
			Set ..Retorno.Retorno = 0
			Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("Fonte pagadora %1 inválida."), ..PedidoLab.Pedido.Convenio)
		}
	}Catch(ex){
		Throw ex
	}
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="AdicionarAntibiogramaAutomatico">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{		
		For i = 1 : 1 : ..PedidoLab.Exame.Count(){
			Set procedimento = ..PedidoLab.Exame.GetAt(i).Codigo //o ensemble sempre enviará no campo código do objeto, independente se é código ou mnemo
			Set procedimentoId = ..GetProcedimento(procedimento)
			
			Set procedimentoTsaId = ##class(dado.TblExame).TsaGetStored(procedimentoId)
			Continue:(procedimentoTsaId = "")
			Set tsaStatus = ##class(dado.TblExame).StatusGetStored(procedimentoTsaId)
			Continue:('tsaStatus)
			
			Set tsaId = procedimentoTsaId
			Set tsaMnemonico = ##class(dado.TblExame).MnemonicoGetStored(tsaId)
			Set existeTsaNoPedido = 0
			For j = 1 : 1 : ..PedidoLab.Exame.Count(){
				Set codigoItem = ..PedidoLab.Exame.GetAt(j).Codigo
				If (codigoItem = tsaId) || (codigoItem = tsaMnemonico){
					Set existeTsaNoPedido = 1
					Quit
				}
			}
			If ('existeTsaNoPedido){
				Set objTsaPedido = ##class(s01.util.b2b.shiftLis.ensemblev2.imp.Exame).%New()
				Set objTsaPedido.Codigo = tsaId
				Set objTsaPedido.Medico = ..PedidoLab.Exame.GetAt(i).Medico
				Do ..PedidoLab.Exame.Insert(objTsaPedido)
				
				For exameAux = 1 : 1 : ..PedidoLab.Exame.GetAt(i).Amostras.Count(){
					Set objTsaAmostra = ##class(s01.util.b2b.shiftLis.ensemblev2.imp.Amostra).%New()
					Set objTsaAmostra.Cbarra = ..PedidoLab.Exame.GetAt(i).Amostras.GetAt(exameAux).Cbarra
					Set objTsaAmostra.Tipo = ..PedidoLab.Exame.GetAt(i).Amostras.GetAt(exameAux).Tipo
					Do ..PedidoLab.Exame.GetAt(..PedidoLab.Exame.Count()).Amostras.Insert(objTsaAmostra)
				}
			}
		}
	}Catch(ex){
		Throw ex
	}
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="ValidarProcedimentos">
<Description>
Valida os procedimentos da ordem de serviço</Description>
<FormalSpec><![CDATA[&pObjProxy:%ZEN.proxyObject]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	
	Set retorno = 1	
	Set sv = $CHAR(252)
	Set mv = $CHAR(253)
	Try{
		Set postoLiberarPendencia = ""
		Set listaProcedimentosLiberarPendencia = ##class(%ListOfDataTypes).%New()
		
		Set usuarioWebIncluirEmergenciaIntegracao = ..UsuarioWeb.IncluirProcedimentoUrgenteIntegracao
		If ('..AdicionarAntibiogramaAutomatico()) Quit
	    Set pDadosCadastrais = ""
	    Set pDadosCadastraisResposta = ""
	    Set qtdExame = ..PedidoLab.Exame.Count()
		For cExame=1:1:qtdExame{
			#DIM objXMLProcedimento AS s01.util.b2b.shiftLis.ensemblev2.imp.Exame = ..PedidoLab.Exame.GetAt(cExame) //o ensemble sempre enviará no campo código do objeto, independente se é código ou mnemo
			Set procedimento = objXMLProcedimento.Codigo
			Set procedimentoId = ..GetProcedimento(procedimento)
			//Verifica se o procedimento existe
			If (procedimentoId = ""){
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("Procedimento %1 inválido."), $ZCONVERT(procedimento, "U"))
				Quit
			}
	
			//Verifica se o procedimento está inativo
			Set procedimentoStatus = ##class(dado.TblExame).StatusGetStored(procedimentoId)
			If ('procedimentoStatus){
				Set procedimentoDescricao = ##class(dado.TblExame).DescricaoGetStored(procedimentoId)
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("Procedimento %1 - %2 inativo."), procedimentoId, procedimentoDescricao)
				Quit
			}
			Set mnemo = ##class(dado.TblExame).MnemonicoGetStored(procedimentoId)
			Set erroInfo = procedimentoId _ "("_mnemo_")"
			
			Set tipoExame = ##class(dado.TblExame).TipoExameGetStored(procedimentoId)
			If (tipoExame '= 1){
					If ((tipoExame = 4) || (tipoExame = 3)){
					Set msg = $$$Text("O procedimento não pode ser incluído para esse tipo de OS pois sua categoria está definida como %1.")
					Set tipoExame = ##class(dado.TblExame).TipoExameGetStored(procedimentoId)
					Set msg = $$$FormatText(msg,##class(dado.TblExame).TipoExameLogicalToDisplay(tipoExame))
					Set ..Retorno.DescricaoErro = msg
					Set ..Retorno.Retorno = 0
					Continue
				}
			}
            #DIM sexoPaciente As %String = ..PedidoLab.Paciente.Sexo
            If (sexoPaciente = "") Set sexoPaciente = "N" // Padrão: Não Informado
            Set sexoStored = ##class(dado.TblExame).SexoGetStored(procedimentoId)
			Set erroValidacao = 0
            If ((sexoStored = "A") || ((sexoStored = "F") && (sexoPaciente = "F")) || ((sexoStored = "M") && (sexoPaciente = "M"))) {
	            Set procedimentosRestritos = $LISTFROMSTRING(##class(dado.TblUnidadeExameRestricao).GetExamesRestritosPosto(..PedidoLab.Pedido.Posto),",")
	            If $LISTFIND(procedimentosRestritos,procedimentoId){
		            Set exameStatus = ##class(dado.TblExame).StatusGetStored(procedimentoId)
		           	Set:($GET(^||IgnorarValidacoesOs, 0)) exameStatus = 1
	                If (exameStatus) {
	                    //Verifica a compatibilidade entre a categoria do atendimento e o tipo do procedimento
	                    Set tipoProc = ##class(dado.TblExame).TipoExameGetStored(procedimentoId) //1 = todos, 2=paciente, 3=animal, 4=analises especiais
	                 	If ((tipoProc'=1) && (tipoProc '= 2)){
		                 	Set erroValidacao = "exameImcompativel"
	                 	}
	                }Else{
	                    //inativo.
	                    Set erroValidacao = "exameInativo"
	                }
	            }Else{
	            	//nao permitido para cadastro
	            	;Set erroValidacao = "procNaoDispParaUnidade"
	            }
            }Else{
	            Set erroValidacao =  "sexoNaoCompativel"
            }
            If erroValidacao '= 0 {
				Set ..Retorno.Retorno = 0
				Do ..RetornarErro(erroValidacao,erroInfo)
            }
            
			Set msgNaoRealizado = ""
		    Set perfil = ##class(dado.TblExame).PerfilGetStored(procedimentoId) 
		    Set qtPerfil= 0
		    If perfil'="" Set qtPerfil = $L(perfil,$C(253))
			Set procedimentoCobrancaService = ##class(s01.service.procedimento.ProcedimentoCobrancaService).%New()
		    If '(qtPerfil > 0){
			    
			    Set objDados = ##class(s01.modelo.calculoPreco.dados.DadosProcedimento).%New()
				Do objDados.ProcedimentoSetObjectId(procedimentoId)
				Do objDados.FontePagadoraSetObjectId(..PedidoLab.Pedido.Convenio)
				Set objDados.DadosCadastrais = pDadosCadastrais
				Set objDados.DadosCadastraisResposta = pDadosCadastraisResposta
				Set objDados.CalcularComposicao = 1
				Set objDados.ExibirAlertas = 0
				Set valido = ##class(s01.modelo.calculoPreco.CalculoPreco).Validar(.objDados)
			    Set ^testevalidacao(mnemo,1) = objDados.Status
		        // Verirfica se a Fonte Pagadora realiza o procedimento
		        If (objDados.Status = "semCobertura"){
			        Set motivoNaoCobertura = objDados.GCExcecao.MotivoNaoCobertura
		            Set msgNaoRealizado = 
		            		"#1# - "_##class(dado.TblExame).MnemonicoGetStored(procedimentoId)_" - "_##class(dado.TblExame).DescricaoGetStored(procedimentoId)_
		            		"#1#   "_$$$Text("Motivo")_": "_motivoNaoCobertura
		            		Set ..Retorno.Retorno = 0
		            		Set ..Retorno.DescricaoErro = msgNaoRealizado
		        }
		        
				Set procedimentoCobrancaService.ProcedimentoCobrancaDto = ..GetProcedimentoCobrancaDto(..PedidoLab.Pedido.Convenio,procedimentoId)
		        If ('procedimentoCobrancaService.IsOcultoFaturamento()){
	            	Set listaExamesComposto = ##class(shared.Lista).Pluck(procedimentoCobrancaService.CobrancasGet(), "ProcedimentoId")
	            	For cComposto=1:1:$LISTLENGTH(listaExamesComposto){
		            	Set idComposto = $LG(listaExamesComposto,cComposto)
		            	Continue:(idComposto = "")
		            	
		            	Set objDados = ##class(s01.modelo.calculoPreco.dados.DadosProcedimento).%New()
						Do objDados.ProcedimentoSetObjectId(idComposto)
						Do objDados.FontePagadoraSetObjectId(..PedidoLab.Pedido.Convenio)
						Set objDados.DadosCadastrais = pDadosCadastrais
						Set objDados.DadosCadastraisResposta = pDadosCadastraisResposta
						Set objDados.CalcularComposicao = 0
						Set objDados.ExibirAlertas = 0
						Set valido = ##class(s01.modelo.calculoPreco.CalculoPreco).Validar(.objDados)
				        // Verirfica se a Fonte Pagadora realiza o procedimento
				        If (objDados.Status = "semCobertura"){
					        Set motivoNaoCobertura = objDados.GCExcecao.MotivoNaoCobertura				        
					        Set mnemo = ##class(dado.TblExame).MnemonicoGetStored(idComposto)
					        Set desc = ##class(dado.TblExame).DescricaoGetStored(idComposto)
				            Set msgNaoRealizado = msgNaoRealizado _
				            		"#1# - "_mnemo_" - "_desc_
				            		"#1#   "_$$$Text("Motivo")_": "_motivoNaoCobertura
		            		Set ..Retorno.Retorno = 0
		            		Set ..Retorno.DescricaoErro = msgNaoRealizado
				        }
	            	}
	        	}
		    }Else{
			    Set objDados = ##class(s01.modelo.calculoPreco.dados.DadosProcedimento).%New()
				Do objDados.ProcedimentoSetObjectId(procedimentoId)
				Do objDados.FontePagadoraSetObjectId(..PedidoLab.Pedido.Convenio)
				Set objDados.DadosCadastrais = pDadosCadastrais
				Set objDados.DadosCadastraisResposta = pDadosCadastraisResposta
				Set objDados.CalcularComposicao = 0
				Set objDados.ExibirAlertas = 0
				Set valido = ##class(s01.modelo.calculoPreco.CalculoPreco).Validar(.objDados) 
 
		        If (objDados.Status = "semCobertura"){
			        Set motivoNaoCobertura = objDados.GCExcecao.MotivoNaoCobertura
		            Set msgNaoRealizado = 
		            		"#1# - "_##class(dado.TblExame).MnemonicoGetStored(procedimentoId)_" - "_##class(dado.TblExame).DescricaoGetStored(procedimentoId)_
		            		"#1#   "_$$$Text("Motivo")_": "_motivoNaoCobertura
            		Set ..Retorno.Retorno = 0
            		Set ..Retorno.DescricaoErro = msgNaoRealizado
		        }
		        For cPerfil=1:1:qtPerfil{	   
		        	Set codPerfil = $P(perfil,$C(253),cPerfil)     
					Set objDados = ##class(s01.modelo.calculoPreco.dados.DadosProcedimento).%New()
					Do objDados.ProcedimentoSetObjectId(codPerfil)
					Do objDados.FontePagadoraSetObjectId(..PedidoLab.Pedido.Convenio)
					Set objDados.DadosCadastrais = pDadosCadastrais
					Set objDados.DadosCadastraisResposta = pDadosCadastraisResposta
					Set objDados.CalcularComposicao = 0
					Set objDados.ExibirAlertas = 0
					Set valido = ##class(s01.modelo.calculoPreco.CalculoPreco).Validar(.objDados)
					If (objDados.Status = "semCobertura"){
						Set motivoNaoCobertura = objDados.GCExcecao.MotivoNaoCobertura
						Set msgNaoRealizado = msgNaoRealizado _
						"#1# - "_##class(dado.TblExame).MnemonicoGetStored(codPerfil)_" - "_##class(dado.TblExame).DescricaoGetStored(codPerfil)_
						"#1#   "_$$$Text("Motivo")_": "_motivoNaoCobertura
	            		Set ..Retorno.Retorno = 0
	            		Set ..Retorno.DescricaoErro = msgNaoRealizado
					}
		        }     
		    }
		    // Caso tenha algum procedimento não coberto, retorna a mensagem de erro
		    If msgNaoRealizado '= ""{
		        Set retorno = 0
		        Set msgNaoRealizado = 
		        		"#1#"_$$$Text("Fonte pagadora: ")_##class(dado.TblConvenio).DescricaoGetStored(..PedidoLab.Pedido.Convenio)_" - "_##class(dado.TblConvenio).ApelidoGetStored(..PedidoLab.Pedido.Convenio)_
		        		"#1#"_msgNaoRealizado
        		Set ..Retorno.Retorno = 0
        		Set ..Retorno.DescricaoErro = msgNaoRealizado
		    }			
			
		} //final for procedimentos
	}
	Catch(ex){
		Throw ex		
	}
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="GetProcedimentoCobrancaDto">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFontePagadora:%String,pProcedimentoId:%String</FormalSpec>
<ReturnType>s01.dto.procedimento.ProcedimentoCobrancaDto</ReturnType>
<Implementation><![CDATA[
	Set procedimentoCobrancaDto = ##class(s01.dto.procedimento.ProcedimentoCobrancaDto).%New()
    Set procedimentoCobrancaDto.FontePagadoraId = pFontePagadora
    Set procedimentoCobrancaDto.FontePagadoraTipo = ##class(s01.service.CobrancaVariavelService).GetFontePagadoraTipo(##class(dado.TblConvenio).TipoConvenioGetStored(pFontePagadora))
    Set procedimentoCobrancaDto.ProcedimentoSolicitadoId = pProcedimentoId
    
    Return procedimentoCobrancaDto
]]></Implementation>
</Method>

<Method name="ValidarPaciente">
<Description>
Valida se o paciente já existe, caso não exista armazena o novo paciente para a integração
pAtualizarDados, define se os dados de cadastro do paciente enviados no pedido serão atualizados no ShiftLis</Description>
<FormalSpec>pObjProxy:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	Try{
		If (..IsPacienteDaMesmaNacionalidadeDoSistema()){
			If ((..IsCpfObrigatorio()) && (..PedidoLab.Paciente.Cpf = "")) {
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("CPF obrigatório.")
				Quit
			}
			If ((..UsuarioWeb.InformaRg = "OBRIGATORIO") && (..PedidoLab.Paciente.Rg = "")) {
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("RG obrigatório.")
				Quit
			}
		}ElseIf((..IsPacienteEstrangeiro()) && (..IsDocumentoObrigatorioParaPacienteEstrangeiro())){
			If (..IsPacienteEstrangeiroSemDocumentoEstrangeiroNumeroOuTipo()){
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("As informações do documento para estrangeiros são obrigatórias.")
				Quit
			}
		}
		Set codigoPaciente = ""
		Set objPaciente = ""
		Set pObjProxy.SexoProcedimento = ..PedidoLab.Paciente.Sexo
		
		//Se código do paciente não foi informado apresenta exceção
		If (..PedidoLab.Paciente.Codigo) = ""{
			Set ..Retorno.Retorno = 0
			Set ..Retorno.DescricaoErro = $$$Text("Código do paciente na origem não informado.")
			Quit
		}
		//Verifica pelo parametro se o sexo é obrigatório no cadastro
		If ..PedidoLab.Paciente.Sexo = ""{
			If ##class(dado.TblUsuarioWeb).SexoObrigatorioGetStored(..UsuarioWeb.%Id()){
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("Sexo do paciente não informado.")
				Quit
			}Else{
				Set ..PedidoLab.Paciente.Sexo = "N"
			}
			
		}
		
		//Primeiramente tenta localizar o paciente pela integração e código do paciente na origem
		Set objPacienteCodigoIntegracao = ..GetPacientePorCodigoIntegracao(pObjProxy.IdUsuarioIntegracao)
		
		If ((..PedidoLab.Paciente.Cpf '= "") || (..PedidoLab.Paciente.Cns '= "")) {
			Set objPessoaFisica = ..GetPessoaFisicaPorCpfOuCns()
			If ($ISOBJECT(objPessoaFisica)) {
				
				If ('..IsPessoaFisicaValida(objPessoaFisica)) {
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = ..GetMensagemErroParaCpfOuCnsInvalido(objPessoaFisica.Nome)
					Quit
				}
				
				Set objPaciente = ##class(dado.ArqPaciente).IdxPessoaFisicaOpen(objPessoaFisica.%Id())
				If ($ISOBJECT(objPaciente)) {
					Quit
				}
			}
		}
		
		Set:('$ISOBJECT(objPaciente)) objPaciente = objPacienteCodigoIntegracao
		
		//Caso não encontre o paciente através dos dados de CPF/CNS
		If ('$ISOBJECT(objPaciente)){

			 //valida pelo NOME, DATA NASCIMENTO e SEXO
			If (..UsuarioWeb.PacienteNaoEncontrado = "CONSULTAR.NOME"){
				Set pacienteId = ""
				
				Try{
					Set validacaoPacienteFactory = ##class(s01.util.b2b.shiftLis.ensemblev2.ValidacaoPacienteFactory).%New(..PedidoLab, pObjProxy.IdUsuarioIntegracao)
					Set pacienteId = validacaoPacienteFactory.GetValidacaoPaciente().ValidarPacientePorNome()
				}Catch(ex){
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = ex.DisplayString()
					
					Return ..Retorno.Retorno
				}
				
				If (pacienteId '= ""){
					Set objPaciente = ##class(dado.ArqPaciente).%OpenId(pacienteId)
					Set codigoPacienteLisOrigem = ""
					Set objPacIntegracao = ##class(dado.TblPacienteIntegracao).idxIntegracaoPacienteIdOpen(pObjProxy.IdUsuarioIntegracao,objPaciente.%Id())
					If $ISOBJECT(objPacIntegracao){
						Set codigoPacienteLisOrigem = objPacIntegracao.IdPacienteLisOrigem
					}
					
					If (codigoPacienteLisOrigem '= ""){
						Set ..PedidoLab.Paciente.Codigo = codigoPacienteLisOrigem
					}
				}
			}
		}	
		
		//Utiliza o paciente encontrado OU cadastra novo paciente
		If ($ISOBJECT(objPaciente)){
			If ..PedidoLab.Paciente.Cpf '= "" {
				Set mensagemCpf = ##class(s01.iu.codigo.web.atendimento.cadastro.OrdemServico).ValidarCPF(..PedidoLab.Paciente.Cpf, objPaciente.PessoaFisicaGetObjectId(), ..PedidoLab.UsuarioWebId, "EDICAO")
				If mensagemCpf = "cpfInvalido" {
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("O CPF informado %1 é inválido."),..PedidoLab.Paciente.Cpf)
					Quit
				}
			}
			Set pObjProxy.PacienteId = objPaciente.%Id()
			Set pObjProxy.PessoaFisicaId = objPaciente.PessoaFisica.%Id()
						
			Set pacNome = objPaciente.PessoaFisica.Nome
			Set pacDataNascOdbc = ##class(s00.util.DataHora).LogicalToOdbc(objPaciente.PessoaFisica.DataNascimento)
			Set pacSexo = objPaciente.PessoaFisica.Sexo
			
			//Trecho criado para o caso de integrações que não enviam as informações do paciente via XML, enviam somente o código (Sírio Libanês)
			If ((..PedidoLab.Paciente.Nome = "") && (..PedidoLab.Paciente.Sexo = "N") && (..PedidoLab.Paciente.DtNascimento = "")){
				Set pObjProxy.SexoProcedimento = pacSexo
			}
			
			//Valida se todas as informações necessárias vieram no pedido
			If ((pacNome = "") || (pacDataNascOdbc = "") || (pacSexo = "")){ 
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("Nome, sexo ou data de nascimento do paciente não informados(2).")
				Quit
			}
			
		}Else{ //não encontrou o paciente então cadastra
			If ..PedidoLab.Paciente.Cpf '= "" {
				Set mensagemCpf = ##class(s01.iu.codigo.web.atendimento.cadastro.OrdemServico).ValidarCPF(..PedidoLab.Paciente.Cpf, "", ..PedidoLab.UsuarioWebId, "CADASTRO")
				If mensagemCpf = "cpfInvalido" {
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("O CPF informado %1 é inválido."),..PedidoLab.Paciente.Cpf)
					Quit
				}ElseIf mensagemCpf = "cpfPacienteJaCadastradoParaOutraPessoa" {
					Set objPessoaFisicaCPF = ##class(dado.TblPessoaFisica).CpfIndexOpen(..PedidoLab.Paciente.Cpf)
					Set:($ISOBJECT(objPessoaFisicaCPF)) pObjProxy.PessoaFisicaId = objPessoaFisicaCPF.%Id()
				}
			}
			
			If '..CnsIsUnico(..PedidoLab.Paciente.Cns) {
				Set objPessoaFisicaCNS = ##class(dado.TblPessoaFisica).idxCNSOpen(..PedidoLab.Paciente.Cns)
				Set:($ISOBJECT(objPessoaFisicaCNS)) pObjProxy.PessoaFisicaId = objPessoaFisicaCNS.%Id()
			}			
		}
		
	}Catch(ex){
		Throw ex
	}	
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="IsPacienteDaMesmaNacionalidadeDoSistema">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set paisParametrosGerais = ##class(dado.TblS00Parametro).PaisIdGetStored("UNICO")
	Return:((..PedidoLab.Paciente.Pais = "") || (..PedidoLab.Paciente.Pais = paisParametrosGerais)) 1
	Return 0
]]></Implementation>
</Method>

<Method name="IsPacienteEstrangeiro">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set paisParametrosGerais = ##class(dado.TblS00Parametro).PaisIdGetStored("UNICO")
	Return:((..PedidoLab.Paciente.Pais '= "") && (..PedidoLab.Paciente.Pais '= paisParametrosGerais)) 1
	Return 0
]]></Implementation>
</Method>

<Method name="IsCpfObrigatorio">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Return:((..UsuarioWeb.InformaCpf = "OBRIGATORIO") || (..UsuarioWeb.PacienteNaoEncontrado = "CONSULTAR.CPF")) 1
	Return 0
]]></Implementation>
</Method>

<Method name="IsDocumentoObrigatorioParaPacienteEstrangeiro">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Return:((..UsuarioWeb.InformaCpf = "OBRIGATORIO") || (..UsuarioWeb.InformaRg = "OBRIGATORIO") || (..UsuarioWeb.PacienteNaoEncontrado = "CONSULTAR.CPF")) 1
	Return 0
]]></Implementation>
</Method>

<Method name="IsPacienteEstrangeiroSemDocumentoEstrangeiroNumeroOuTipo">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set paisParametrosGerais = ##class(dado.TblS00Parametro).PaisIdGetStored("UNICO")
	Return:(((..PedidoLab.Paciente.DocumentoEstrangeiroTipo = "") || (..PedidoLab.Paciente.DocumentoEstrangeiroNumero = "")) && (..IsPacienteEstrangeiro())) 1
	Return 0
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*/// Valida se o paciente já existe, caso não exista armazena o novo paciente para a integração
/// pAtualizarDados, define se os dados de cadastro do paciente enviados no pedido serão atualizados no ShiftLis
Method ValidarPaciente(pObjProxy As %ZEN.proxyObject) As %Boolean [ ZenMethod ]
{
	
	Try{
		If ((..PedidoLab.Paciente.DocumentoEstrangeiroTipo = "") || (..PedidoLab.Paciente.DocumentoEstrangeiroNumero = "")){
			If ((..UsuarioWeb.InformaCpf = "OBRIGATORIO") && (..PedidoLab.Paciente.Cpf = "")) {
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("CPF obrigatório.")
				Quit
			}
			If ((..UsuarioWeb.InformaRg = "OBRIGATORIO") && (..PedidoLab.Paciente.Rg = "")) {
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("RG obrigatório.")
				Quit
			}
		}
		Set codigoPaciente = ""
		Set objPaciente = ""
		Set pObjProxy.SexoProcedimento = ..PedidoLab.Paciente.Sexo
		
		//Se código do paciente não foi informado apresenta exceção
		If (..PedidoLab.Paciente.Codigo) = ""{
			Set ..Retorno.Retorno = 0
			Set ..Retorno.DescricaoErro = $$$Text("Código do paciente na origem não informado.")
			Quit
		}
		//Verifica pelo parametro se o sexo é obrigatório no cadastro
		If ..PedidoLab.Paciente.Sexo = ""{
			If ##class(dado.TblUsuarioWeb).SexoObrigatorioGetStored(..UsuarioWeb.%Id()){
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("Sexo do paciente não informado.")
				Quit
			}Else{
				Set ..PedidoLab.Paciente.Sexo = "N"
			}
			
		}
		//Primeiramente tenta localizar o paciente pela integração e código do paciente na origem
		Set objPacienteCodigoIntegracao = ..GetPacientePorCodigoIntegracao(pObjProxy.IdUsuarioIntegracao)
		
		If (..PedidoLab.Paciente.Cpf '= "") || (..PedidoLab.Paciente.Cns '= "") {
			Set objPessoaFisica = ..GetPessoaFisicaPorCpfOuCns()
			If ($ISOBJECT(objPessoaFisica)) {
				
				If ('..IsPessoaFisicaValida(objPessoaFisica,.descricaoErro)) {
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = ..GetMensagemErroParaCpfOuCnsInvalido(objPessoaFisica.Nome,descricaoErro)
					Quit
				}
				
			}
		}
		
		//Caso não encontre o paciente diretamente pelo código da integração, inicia as validações por (nome,dt nasc e sexo) OU CPF
		If ('$ISOBJECT(objPaciente)){
			//Verifica se o paciente existe a partir do CPF
			If (..UsuarioWeb.PacienteNaoEncontrado = "CONSULTAR.CPF"){
				//Verifica se o CPF foi enviado
				If (..PedidoLab.Paciente.Cpf = ""){
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = $$$Text("CPF não informado.")
					Quit
				}
				
				//Instancia o pacientea partir do CPF
				Set objPessoaFisica = ##class(dado.TblPessoaFisica).CpfIndexOpen(..PedidoLab.Paciente.Cpf)
				If ($ISOBJECT(objPessoaFisica)) Set objPaciente = ##class(dado.ArqPaciente).IdxPessoaFisicaOpen(objPessoaFisica.%Id())
				//Caso o paciente já exista com este CPF, para esta integração valida se o código de origem é diferente
				If ($ISOBJECT(objPaciente)){
					Set objIntegracaoPaciente = ##class(dado.TblPacienteIntegracao).idxIntegracaoPacienteIdOpen(pObjProxy.IdUsuarioIntegracao, objPaciente.%Id())
					If ($ISOBJECT(objIntegracaoPaciente)){ //Se este paciente já existe cadastrado para esta integração
						If (objIntegracaoPaciente.IdPacienteLisOrigem '= ..PedidoLab.Paciente.Codigo){
							Set ..Retorno.Retorno = 0
							Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("Código de origem %1 inválido para o paciente %2. Código esperado: %3."),..PedidoLab.Paciente.Codigo,objIntegracaoPaciente.PacienteId.PessoaFisica.Nome,objIntegracaoPaciente.IdPacienteLisOrigem)
							Quit						
						}
					}
				}
				
			 //valida pelo NOME, DATA NASCIMENTO e SEXO
			}ElseIf (..UsuarioWeb.PacienteNaoEncontrado = "CONSULTAR.NOME"){
				Set pacienteId = ""
				
				Try{
					Set validacaoPacienteFactory = ##class(s01.util.b2b.shiftLis.ensemblev2.ValidacaoPacienteFactory).%New(..PedidoLab, pObjProxy.IdUsuarioIntegracao)
					Set pacienteId = validacaoPacienteFactory.GetValidacaoPaciente().ValidarPacientePorNome()
				}Catch(ex){
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = ex.DisplayString()
					
					Return ..Retorno.Retorno
				}
				
				If (pacienteId '= ""){
					Set objPaciente = ##class(dado.ArqPaciente).%OpenId(pacienteId)
					Set codigoPacienteLisOrigem = ""
					Set objPacIntegracao = ##class(dado.TblPacienteIntegracao).idxIntegracaoPacienteIdOpen(pObjProxy.IdUsuarioIntegracao,objPaciente.%Id())
					If $ISOBJECT(objPacIntegracao){
						Set codigoPacienteLisOrigem = objPacIntegracao.IdPacienteLisOrigem
					}
					
					If (codigoPacienteLisOrigem '= ""){
						Set ..PedidoLab.Paciente.Codigo = codigoPacienteLisOrigem
					}
				}
			}
		} Else {
			If ..PedidoLab.Paciente.Cpf '= "" {
				Set mensagemCpf = ##class(s01.iu.codigo.web.atendimento.cadastro.OrdemServico).ValidarCPF(..PedidoLab.Paciente.Cpf, "", ..PedidoLab.UsuarioWebId, "CADASTRO")
				If mensagemCpf = "cpfInvalido" {
					Set ..Retorno.Retorno = 0
					Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("O CPF informado %1 é inválido."),..PedidoLab.Paciente.Cpf)
					Quit
				}
			}
			
			If '..CnsIsUnico(..PedidoLab.Paciente.Cns) {
				Set objPessoaFisicaCNS = ##class(dado.TblPessoaFisica).idxCNSOpen(..PedidoLab.Paciente.Cns)
				
				If $ISOBJECT(objPessoaFisicaCNS) {
						Set erro = 0
						If objPessoaFisicaCNS.Sexo '= ..PedidoLab.Paciente.Sexo Set erro = 1
						If objPessoaFisicaCNS.DataNascimento '= ..PedidoLab.Paciente.Sexo Set erro = 1
						If objPessoaFisicaCNS.Nome '= ..PedidoLab.Paciente.Nome Set erro = 1
						If objPessoaFisicaCNS.Cpf '= ..PedidoLab.Paciente.Cpf Set erro = 1
						If erro {
							Set ..Retorno.Retorno = 0
							Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("O CNS %1 já existe para: %2."), ..PedidoLab.Paciente.Cns, objPessoaFisicaCNS.Nome)
							Quit
						}
				}
			}
		}
		If (..PedidoLab.Paciente.DtNascimento '= ""){
			Try{
				Set testedn = $ZDATEH(..PedidoLab.Paciente.DtNascimento,3)
			
			}Catch ex{
				Throw ##class(s00.util.Excecao).%New("CadastrarPaciente()",5001,,$$$Text("Data de nascimento inválida."))
			}
		}
		If $ISOBJECT(objPaciente) {
			Set pObjProxy.PacienteId = objPaciente.%Id()
			Set pObjProxy.PessoaFisicaId = objPaciente.PessoaFisica.%Id()
						
			Set pacNome = objPaciente.PessoaFisica.Nome
			Set pacDataNascOdbc = ##class(s00.util.DataHora).LogicalToOdbc(objPaciente.PessoaFisica.DataNascimento)
			Set pacSexo = objPaciente.PessoaFisica.Sexo
			
			//Trecho criado para o caso de integrações que não enviam as informações do paciente via XML, enviam somente o código (Sírio Libanês)
			If ((..PedidoLab.Paciente.Nome = "") && (..PedidoLab.Paciente.Sexo = "N") && (..PedidoLab.Paciente.DtNascimento = "")){
				Set pObjProxy.SexoProcedimento = pacSexo
			}
			
			//Valida se todas as informações necessárias vieram no pedido
			If ((pacNome = "") || (pacDataNascOdbc = "") || (pacSexo = "")){ 
				Set ..Retorno.Retorno = 0
				Set ..Retorno.DescricaoErro = $$$Text("Nome, sexo ou data de nascimento do paciente não informados(2).")
				Quit
			}
		}
			
	}Catch(ex){
		Throw ex
	}	
	Quit ..Retorno.Retorno
}*/
]]></Content>
</UDLText>

<Method name="CnsIsUnico">
<FormalSpec>pCns:%String="",pPessoaFisicaId:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Set retorno = 1
	Try {
		If pCns '= "" {
			Set pessoaFisicaPersistidaId = ""
			If ##class(dado.TblPessoaFisica).idxCNSExists(pCns, .pessoaFisicaPersistidaId) {
				If pPessoaFisicaId '= "" {
					If pPessoaFisicaId '= pessoaFisicaPersistidaId {
						Set retorno = 0
					}
				}Else {
					Set retorno = 0
				}
			}
		}
	}Catch(ex) {
		Throw ex
	}
	Return retorno
]]></Implementation>
</Method>

<Method name="ValidarPedidoLabExiste">
<Description>
Valida se o pedido já está cadastrado para ordem de serviço de outro paciente.</Description>
<FormalSpec>pObjProxy</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	
	Try{
		Set objOs = ##class(dado.ArqOrdemServico).idxIntegracaoPedidoOpen(..PedidoLab.UsuarioWebId, ..PedidoLab.Pedido.Codigo)
		
		If $ISOBJECT(objOs){
			Set codigoPacienteLisOrigem = ""
			If objOs.Paciente.IdPacienteLisOrigem = ""{
				Set objPacIntegracao = ##class(dado.TblPacienteIntegracao).idxIntegracaoPacienteIdOpen(pObjProxy.IdUsuarioIntegracao,objOs.Paciente.%Id())
				If $ISOBJECT(objPacIntegracao){
					Set codigoPacienteLisOrigem = objPacIntegracao.IdPacienteLisOrigem
				}
			}Else{
				Set codigoPacienteLisOrigem = objOs.Paciente.IdPacienteLisOrigem
			}
			If (codigoPacienteLisOrigem '= ..PedidoLab.Paciente.Codigo){
				Set ..Retorno.DescricaoErro = $$$FormatText($$$Text("Pedido %1 já cadastrado para a ordem de serviço %2 de outro paciente."), ..PedidoLab.Pedido.Codigo, objOs.CodigoOs)
				Set ..Retorno.Retorno = 0
			}
		}
	}Catch(ex){
		Throw ex
	}	
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="SetUsuarioWeb">
<FormalSpec>pUsuarioWebId</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	Try{
		Set objUsuarioWeb = ##class(dado.TblUsuarioWeb).%OpenId(pUsuarioWebId)
		If '$ISOBJECT(objUsuarioWeb){
			Set ..Retorno.Retorno = 0
			Set ..Retorno.DescricaoErro = $$$Text("O usuário para cadastro de pedido não foi encontrado.")
			Quit
		}
		Set ..UsuarioWeb = objUsuarioWeb		
	}Catch(ex){
		Throw ex
	}
	
	Quit ..Retorno.Retorno
]]></Implementation>
</Method>

<Method name="RetornaUnidadeDeColeta">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ((..PedidoLab.Pedido.DesvioDeFluxo) && (##class(dado.TblPosto).PermiteDesvioFluxoGetStored(..PedidoLab.Pedido.Posto))){
		Return ##class(dado.TblPosto).UnidadeColetaDesvioFluxoIdGetStored(..PedidoLab.Pedido.Posto)
	}
	Return ..PedidoLab.Pedido.Posto
]]></Implementation>
</Method>

<Method name="GetPessoaFisicaPorCpfOuCns">
<ReturnType>dado.TblPessoaFisica</ReturnType>
<Implementation><![CDATA[
	Set objPessoaFisica = ""
	If (..PedidoLab.Paciente.Cpf '= "") {
		Set objPessoaFisica = ##class(dado.TblPessoaFisica).CpfIndexOpen(##class(shared.Texto).RemoverCaracteresEspeciais(..PedidoLab.Paciente.Cpf))
	}
	
	If ('$ISOBJECT(objPessoaFisica) && (..PedidoLab.Paciente.Cns '= "")) {
		Set objPessoaFisica = ##class(dado.TblPessoaFisica).idxCNSOpen(..PedidoLab.Paciente.Cns)
	}
	Return objPessoaFisica
]]></Implementation>
</Method>

<Method name="IsNomePacienteIntegracaoValido">
<Description>
Quando definido que a integração não atualiza os dados do paciente, deve considerar a checagem do nome junto com sexo e data de nascimento, quando atualiza, considerar apenas sexo e data de nascimento</Description>
<FormalSpec>pPessoaFisicaNome:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set nomeValido = 1
	Set:('..AtualizarDadosPaciente) nomeValido = (pPessoaFisicaNome = ..PedidoLab.Paciente.Nome)
	
	Return nomeValido
]]></Implementation>
</Method>

<Method name="IsPessoaFisicaValida">
<FormalSpec>pObjPessoaFisica:dado.TblPessoaFisica,*pDescricaoErro:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set retorno = 1
	If ('..IsNomePacienteIntegracaoValido(pObjPessoaFisica.Nome)) {
		Set retorno =0
		Set pDescricaoErro = "Nome do paciente divergente."
	}
	If (pObjPessoaFisica.Sexo '= ..PedidoLab.Paciente.Sexo) {
		Set retorno =0
		Set pDescricaoErro = "Sexo do paciente divergente."
	}
	If (##class(s00.util.DataHora).LogicalToOdbc(pObjPessoaFisica.DataNascimento) '= ..PedidoLab.Paciente.DtNascimento) {
		Set retorno =0
		Set pDescricaoErro = "Data de nascimento do paciente divergente."
	}
	Return retorno
]]></Implementation>
</Method>

<Method name="GetMensagemErroParaCpfOuCnsInvalido">
<FormalSpec>pPessoaFisicaNome:%String,pDescricaoErro:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..PedidoLab.Paciente.Cpf '= "") && (..PedidoLab.Paciente.Cns '= "") {
		Return $$$FormatText($$$Text("O CPF %1 ou CNS %2 enviado pertence ao paciente: %3, %4"),..PedidoLab.Paciente.Cpf,..PedidoLab.Paciente.Cns,pPessoaFisicaNome,pDescricaoErro)
		
	}ElseIf (..PedidoLab.Paciente.Cpf '= "") {
		Return $$$FormatText($$$Text("O CPF %1 enviado pertence ao paciente: %2 , %3"),..PedidoLab.Paciente.Cpf,pPessoaFisicaNome,pDescricaoErro)
		
	}Else {
		Return $$$FormatText($$$Text("O CNS %1 enviado pertence ao paciente: %2 , %3"),..PedidoLab.Paciente.Cns,pPessoaFisicaNome,pDescricaoErro)
	}
]]></Implementation>
</Method>

<Method name="GetPacientePorCodigoIntegracao">
<FormalSpec>pUsuarioIntegracaoId:%String</FormalSpec>
<ReturnType>dado.ArqPaciente</ReturnType>
<Implementation><![CDATA[
	Set objPacienteIntegracao = ##class(dado.TblPacienteIntegracao).idxIntegracaoOrigemOpen(pUsuarioIntegracaoId, ..PedidoLab.Paciente.Codigo)
	If ($ISOBJECT(objPacienteIntegracao)){
		Return objPacienteIntegracao.PacienteId
	}Else{
		Return ##class(dado.ArqPaciente).idxIntegracaoPacienteOpen(pUsuarioIntegracaoId, ..PedidoLab.Paciente.Codigo)
	}
	Return ""
]]></Implementation>
</Method>
</Class>


<Class name="interoperability.util.XML.Reader">
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%XML.Reader</Super>
<System>3</System>
<TimeChanged>66984,37416.521934</TimeChanged>
<TimeCreated>66865,32464.982018</TimeCreated>

<Method name="ObjectFromStream">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pObject:%RegisteredObject,pStream:%BinaryStream,pClassnames:%String,pResolver:%XML.SAX.EntityResolver=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pObject=$$$NULLOREF
	
	#; Create an instance of %XML.Reader
	Set tReader=##class(%XML.Reader).%New()  

	#; Set the EntityResolver
	If $IsObject(pResolver) Set tReader.EntityResolver=pResolver

	#; Begin processing of the file
	Set tSC=tReader.OpenStream(pStream)  Quit:$$$ISERR(tSC) tSC

	#; Associate class names with the XML element names
	For iClass=1:1:$L(pClassnames,",") { Set tClassname=$ZStrip($P(pClassnames,",",iClass),"<>W")  Continue:""=tClassname
		Set tHeadTag = ..GetClassParameter(tClassname,"XMLNAME")
		Set:""=tHeadTag tHeadTag=$P(tClassname,".",$L(tClassname,"."))
		Do tReader.Correlate(tHeadTag,tClassname)
	}
	#; Read objects from xml file
	Set tFound = tReader.Next(.pObject,.tSC)  Quit:$$$ISERR(tSC) tSC
	//If 'tFound Do pStream.Rewind() Quit $$$ERROR($$$EnsErrNoObjFromStream,tHeadTag,pClassnames,pStream.Read(1000)) 
	Quit tSC
]]></Implementation>
</Method>

<Method name="ASSERTNOLOG">
<FormalSpec>%condition</FormalSpec>
<Implementation><![CDATA[
	Set text = $$$FormatText("Assert Condition Failed: %1 ",%condition)
	 If '(%condition) { Write !,text,!  BREAK }
]]></Implementation>
</Method>

<Method name="GetClassParameter">
<FormalSpec>%cls,%parm</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Return $$$comMemberKeyGet(%cls,$$$cCLASSparameter,%parm,$$$cPARAMdefault)
]]></Implementation>
</Method>

<Method name="ObjectFromString">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pObject:%RegisteredObject,pString:%String,pClassnames:%String,pResolver:%XML.SAX.EntityResolver=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pObject=$$$NULLOREF

	#; Create an instance of %XML.Reader
	Set tReader=##class(%XML.Reader).%New()  

	#; Set the EntityResolver
	If $IsObject(pResolver) Set tReader.EntityResolver=pResolver

	#; Begin processing of the file
	Set tSC=tReader.OpenString(pString)  Quit:$$$ISERR(tSC) tSC

	#; Associate class names with the XML element names
	For iClass=1:1:$L(pClassnames,",") { Set tClassname=$ZStrip($P(pClassnames,",",iClass),"<>W")  Continue:""=tClassname
		Set tHeadTag = ..GetClassParameter(tClassname,"XMLNAME")
		Set:""=tHeadTag tHeadTag=$P(tClassname,".",$L(tClassname,"."))
		Do tReader.Correlate(tHeadTag,tClassname)
	}
	#; Read objects from xml file
	Set tFound = tReader.Next(.pObject,.tSC)  Quit:$$$ISERR(tSC) tSC
	//If 'tFound Quit $$$ERROR($$$EnsErrNoObjFromString,tHeadTag,pClassnames,pString) 
	Quit tSC
]]></Implementation>
</Method>

<Method name="ChangeXMLStreamEncoding">
<Description>
Copy from a stream containing an XML header to another stream with the XML header encoding label changed to the value given in pEncoding.
Returns the output stream which if not supplied is created using the same stream class as the input stream.
If no change to the encoding label results and if no output stream is supplied then the original input stream is returned as the output stream without copying.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pSource:%CharacterStream,pEncoding:%String="",&pTarget:%CharacterStream="",*pStatus]]></FormalSpec>
<ReturnType>%CharacterStream</ReturnType>
<Implementation><![CDATA[
	Set tHeader = $S(pSource.%Extends("%IO.I.Stream"):pSource.Read(400,,.pStatus), 1: pSource.Read(400,.pStatus))  Quit:$$$ISERR(pStatus) $$$NULLOREF
	Set tNewHeader = ..ChangeXMLEncoding(tHeader, pEncoding)

	If '$IsObject(pTarget) {
		If tNewHeader=tHeader { Do pSource.Rewind()  Quit pSource }
		Set pTarget = $classmethod($S(""'=pTarget:pTarget, 1:$classname(pSource)),"%New","") 
		Do ..ASSERTNOLOG($IsObject(pTarget))
	}
	If pTarget.%Extends("%IO.I.Stream") {
		Do pTarget.Write(tNewHeader,,.pStatus)  Quit:$$$ISERR(pStatus) $$$NULLOREF
		If pSource.%Extends("%IO.I.Stream") {
			While 'pSource.AtEnd { Set tChunk=pSource.Read(32000,,.pStatus)  Quit:$$$ISERR(pStatus)  Do pTarget.Write(tChunk,,.pStatus)  Quit:$$$ISERR(pStatus) }
		} Else {
			While 'pSource.AtEnd { Set tChunk=pSource.Read(32000,.pStatus)  Quit:$$$ISERR(pStatus)  Do pTarget.Write(tChunk,,.pStatus)  Quit:$$$ISERR(pStatus) }
		}
	} Else {
		Set pStatus = pTarget.Write(tNewHeader)  Quit:$$$ISERR(pStatus) $$$NULLOREF
		If pSource.%Extends("%IO.I.Stream") {
			While 'pSource.AtEnd { Set tChunk=pSource.Read(32000,,.pStatus)  Quit:$$$ISERR(pStatus)  Set pStatus = pTarget.Write(tChunk)  Quit:$$$ISERR(pStatus) }
		} Else {
			While 'pSource.AtEnd { Set tChunk=pSource.Read(32000,.pStatus)  Quit:$$$ISERR(pStatus)  Set pStatus = pTarget.Write(tChunk)  Quit:$$$ISERR(pStatus) }
		}
	}
	Do pSource.Rewind()
	Quit:$$$ISERR(pStatus) $$$NULLOREF
	Do pTarget.Rewind()
	Quit pTarget
]]></Implementation>
</Method>

<Method name="ChangeXMLEncoding">
<ClassMethod>1</ClassMethod>
<FormalSpec>pString:%String,pEncoding:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tEncodingPos = $F(pString,"encoding")
	Set tEncoding=$Translate($Piece($Piece(pString,"?>"),"encoding",2),"""","'")
	Set tEncodingValpos = $F(tEncoding,"'")
	Set:"="'=$ZSTRIP($E(tEncoding,1,tEncodingValpos-2),"*W") tEncodingPos=0
	Set tEncoding=$Piece(tEncoding,"'",2)
	If 0=tEncodingPos {
		If pEncoding'="" { ; Insert the encoding tag
			Set tEncodingPos = $F(pString,"?>")
			If tEncodingPos Set $E(pString,tEncodingPos-2,tEncodingPos-1)=" encoding='"_pEncoding_"'?>"
		}
	} Else {
		If pEncoding="" { ; Remove the encoding tag
			Set $E(pString,tEncodingPos-$L("encoding"),$F(pString,tEncoding,tEncodingPos)) = ""
		}
		Else { ; Change the encoding tag
			If $ZCVT(tEncoding,"L")'=$ZCVT(tEncodingPos,"L") {
				Set tEncodingValpos = tEncodingPos+tEncodingValpos-1
				Set $E(pString,tEncodingValpos,tEncodingValpos+$L(tEncoding)-1)=pEncoding
			}
		}
	}
	Quit pString
]]></Implementation>
</Method>
</Class>
</Export>
